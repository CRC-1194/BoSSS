restart
**************

  Database Explorer v2
  ____________________

Databases loaded:
List of 24 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 2; Path = p:\BoSSS_DBs\Kovasznay }
  1: { Session Count = 1; Grid Count = 1; Path = p:\BoSSS_DBs\ChannelFlow }
  2: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\RectangularCylinder }
  3: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\Cylinder3D }
  4: { Session Count = 6; Grid Count = 1; Path = p:\BoSSS_DBs\MPI_Test }
  5: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\3DSolverPerformance }
  6: { Session Count = 2; Grid Count = 2; Path = P:\BoSSS_DBs\nonIBM_cylinder }
  7: { Session Count = 12; Grid Count = 1; Path = P:\BoSSS_DBs\osciCylinder }
  8: { Session Count = 0; Grid Count = 0; Path = P:\BoSSS_DBs\osciCylinder_new }
  9: { Session Count = 21; Grid Count = 25; Path = P:\BoSSS_DBs\ImmersedBoundary }
  10: { Session Count = 8; Grid Count = 44; Path = P:\BoSSS_DBs\ParticleInShearFlow\ }
  11: { Session Count = 16; Grid Count = 46; Path = P:\BoSSS_DBs\ParticleUnderGravity }
  12: { Session Count = 8; Grid Count = 31; Path = P:\BoSSS_DBs\fixedCylinder }
  13: { Session Count = 0; Grid Count = 0; Path = P:\BoSSS_DBs\Paper_OsciCylinder }
  14: { Session Count = 43; Grid Count = 45; Path = P:\BoSSS_DBs\IBMPaper }
  15: { Session Count = 28; Grid Count = 15; Path = P:\BoSSS_DBs\Paper_IBM2D }
  16: { Session Count = 38; Grid Count = 22; Path = P:\BoSSS_DBs\Paper_CellAgglo01_Penalty4 }
  17: { Session Count = 52; Grid Count = 65; Path = P:\BoSSS_DBs\Sphere3D }
  18: { Session Count = 22; Grid Count = 10; Path = P:\BoSSS_DBs\Performance }
  19: { Session Count = 24; Grid Count = 14; Path = P:\BoSSS_DBs\PaperRevision }
  20: { Session Count = 0; Grid Count = 0; Path = P:\Lichtenberg_DB }
  21: { Session Count = 2; Grid Count = 354; Path = P:\BoSSS_DBs\Bug }
  22: { Session Count = 16; Grid Count = 7; Path = P:\BoSSS_DBs\NodePerformance }
  23: { Session Count = 136; Grid Count = 98; Path = L:\BoSSS_DB\Lichtenberg_DB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("SolverPerformanceDrivenCavity");
**************
Project name is set to 'SolverPerformanceDrivenCavity'.

==============
using System.IO;
using BoSSS.Application.IBM_Solver;
using System.Data;
**************
==============
string dateString = "2018-4-19";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static long Np(long p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }
}
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 63 instances of String {
  0: SessionName
  1: DGdegree:Velocity*
  2: DGdegree:Pressure
  3: DGdegree:PhiDG
  4: DGdegree:Phi
  5: Bndtype:Velocity_inlet
  6: Bndtype:Wall
  7: GeneratedFromCode
  8: ControlFileText_Index
  9: dtFixed
  10: NoOfMultigridLevels
  11: AdvancedDiscretizationOptions.ContiSign
  12: AdvancedDiscretizationOptions.RescaleConti
  13: AdvancedDiscretizationOptions.LFFA
  14: AdvancedDiscretizationOptions.LFFB
  15: AdvancedDiscretizationOptions.PenaltySafety
  16: AdvancedDiscretizationOptions.CellAgglomerationThreshold
  17: MaxKrylovDim
  18: MaxSolverIterations
  19: MinSolverIterations
  20: Solver_ConvergenceCriterion
  21: VelocityBlockPrecondMode
  22: LevelSetSmoothing
  23: PhysicalParameters.IncludeConvection
  24: PhysicalParameters.rho_A
  25: PhysicalParameters.mu_A
  26: PhysicalParameters.Material
  27: particleRadius
  28: MeshFactor
  29: Timestepper_Scheme
  30: FixedStreamwisePeriodicBC
  31: Timestepper_Init
  32: NonlinearSolve
  33: LinearSolve
  34: GridPartType
  35: ProjectName
  36: NoOfTimesteps
  37: Endtime
  38: saveperiod
  39: dtMin
  40: dtMax
  41: CompMode
  42: ImmediatePlotPeriod
  43: SuperSampling
  44: savetodb
  45: logFileDirectory
  46: Paramstudy_ContinueOnError
  47: DynamicLoadBalancing_RedistributeAtStartup
  48: DynamicLoadBalancing_Period
  49: DynamicLoadBalancing_ImbalanceThreshold
  50: DynamicLoadBalancing_On
  51: AdaptiveMeshRefinement
  52: CutCellQuadratureType
  53: ContinueOnIoError
  54: Grid:NoOfCells
  55: Grid:hMax
  56: Grid:hMin
  57: UsedNoOfMultigridLevels
  58: C_Drag
  59: C_Lift
  60: RegularTerminated
  61: SlvIter_excl
  62: Processors
}
==============
var SubTab_1 = SessTab.ExtractColumns("Grid:NoOfCells","SlvIter_excl","NonlinearSolve","LinearSolve","NoOfMultigridLevels","DGdegree:Velocity*","RegularTerminated");
**************
==============
// Add columns to DataTable
SubTab_1.Columns.Add("TotalDoFs",typeof(double));
long[] cells = ((long[]) SubTab_1.GetColumn("Grid:NoOfCells"));
long[] k = ((long[]) SubTab_1.GetColumn("DGdegree:Velocity*"));
int i     = 0;
foreach (DataRow row in SubTab_1.Rows) {
    row["TotalDoFs"] = (3*Utils.Np(k[i])+Utils.Np(k[i]-1))*cells[i];
    i++;
}
**************
TotalDoFs
==============
SubTab_1.Print();
**************
    Grid:NoOfCells SlvIter_excl  NonlinearSolve LinearSolve NoOfMultigridLevels DGdegree:Velocity* RegularTerminated TotalDoFs 
0:  125            18.0998877    2              1           1                   2                  True              4250      
1:  4913           0             2              1           1                   2                  False             167042    
2:  125            11.0463558    1              1           1                   2                  True              4250      
3:  4913           0             1              1           1                   2                  False             167042    
4:  2197           33359.2824963 0              6           2                   2                  True              74698     
5:  1000           30100.7405066 1              9           2                   2                  True              34000     
6:  1000           11822.4844524 0              6           2                   2                  True              34000     
7:  343            6452.9507251  1              9           2                   2                  True              11662     
8:  343            1821.4391509  0              6           2                   2                  True              11662     
9:  2197           0             1              9           2                   2                  False             74698     
10: 2197           1420.1873243  2              1           1                   2                  True              74698     
11: 2197           1247.0726146  1              1           1                   2                  True              74698     
12: 1000           413.6526049   2              1           1                   2                  True              34000     
13: 1000           311.1200562   1              1           1                   2                  True              34000     
14: 343            55.4536228    1              1           1                   2                  True              11662     
15: 343            85.9412329    2              1           1                   2                  True              11662     
==============
**************
==============
static public class Formats {
static public void getFormat(int iTabRow,IDictionary<string, object> Row, 
                 out string Nmn, out PlotFormat Fmt){
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
         
           NonlinearSolverCodes Nonlin_solver_name = (NonlinearSolverCodes) Convert.ToInt32(Row["NonlinearSolve"]);
           LinearSolverCodes solver_name = (LinearSolverCodes) Convert.ToInt32(Row["LinearSolve"]);
           int MGLevels                  = Convert.ToInt32(Row["NoOfMultigridLevels"]);
           Fmt                           = new PlotFormat();
           
           switch(Nonlin_solver_name) {
           case NonlinearSolverCodes.Picard: 
               Nmn = "Picard "; 
               break;  
           case NonlinearSolverCodes.Newton: 
               Nmn = "Newton "; 
               break; 
           case NonlinearSolverCodes.NewtonGMRES: 
               Nmn = "NewtonGmres "; 
               break;          
           default:
               Console.WriteLine("unknown: " + Nonlin_solver_name); 
               Nmn = "unknown"; 
               break;
           } 

          
           switch(solver_name) {
           case LinearSolverCodes.automatic: 
               Nmn           = Nmn+"Automatic"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.classic_mumps: 
               Nmn           = Nmn+"Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.classic_pardiso: 
               Nmn           = Nmn+"Pardiso"; 
               Fmt.PointType = PointTypes.Asterisk;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           case LinearSolverCodes.exp_schwarz_directcoarse: 
               Nmn           = Nmn+"Swz w Coarse"; 
               Fmt.PointType = PointTypes.UpperTriangle;
               Fmt.DashType  = DashTypes.DotDashed;
               break;
           case LinearSolverCodes.exp_schwarz_Kcycle_directcoarse_overlap: 
               Nmn           = Nmn+"Swz Kcycle w Coarse Overlap"; 
               Fmt.PointType = PointTypes.Plus;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           case LinearSolverCodes.exp_schwarz_directcoarse_overlap: 
               Nmn           = Nmn+"Swz w Coarse Overlap"; 
               Fmt.PointType = PointTypes.OpenBox;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.exp_schwarz_Kcycle_directcoarse: 
               Nmn           = Nmn+"Swz Kcycle w Coarse"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               Fmt.DashType  = DashTypes.DotDotDashed;
               break;
           case LinearSolverCodes.exp_softgmres: 
               Nmn           = Nmn+"SoftGMRES"; 
               Fmt.PointType = PointTypes.Box;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.exp_softgmres_schwarz_directcoarse: 
               Nmn           = Nmn+"SoftGMRES Swz w Coarse"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dashed;
               break;
          case LinearSolverCodes.exp_softgmres_schwarz_directcoarse_overlap: 
               Nmn           = Nmn+"SoftGMRES Swz w Coarse Overlap"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dashed;
               break;
          case LinearSolverCodes.exp_softgmres_schwarz_Kcycle_directcoarse_overlap: 
               Nmn           = Nmn+"SoftGMRES Swz Kcycle w Coarse Overlap"; 
               Fmt.PointType = PointTypes.Times;
               Fmt.DashType  = DashTypes.DotDashed;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = Nmn+"unknown"; 
               break;
           } 
           Nmn           = Nmn+" MGLevels"+MGLevels;
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       }
}
**************
==============
var plotSlvIterTime = SubTab_1.ToPlot("TotalDoFs", "SlvIter_excl", // column for x- and y
                                  Formats.getFormat); // column for group
//var plotSlvIterSpeedup = SubTab_1.ToPlot("Grid:NoOfCells", "SlvIter_speedup", // column for x- and y
  //                                Formats.getFormat); // column for group
//var plotSlvInit = SubTab_1.ToPlot("Processors", "SlvInit_excl", // column for x- and y
//                                  Formats.getFormat); // column for group
Plot2Ddata[,] multiplots = new Plot2Ddata[1,1];
//plotSlvIterTime.Title     = "Exclusiveb_1.ToPlot("Grid:NoOfCells", "SlvIter_excl", // column for x- and ytimes";
plotSlvIterTime.Ylabel = "Time [s]";
plotSlvIterTime.Xlabel = "TotalDoFs";


plotSlvIterTime.XrangeMin = 1000;
plotSlvIterTime.XrangeMax = 1000000;
plotSlvIterTime.LogX      = true;
plotSlvIterTime.LogY      = true;
plotSlvIterTime.LogBaseX  = 10;
plotSlvIterTime.LogBaseY  = 10;

multiplots[0,0] = plotSlvIterTime;
//multiplots[1,0] = plotSlvIterSpeedup;

multiplots[0,0].bmargin = 4;
//multiplots[1,0].tmargin = 1;
multiplots[0,0].tmargin = 4;
multiplots.PlotNow();
**************
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
LastError
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:22, ySize:10);
**************
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
CL.SaveTo(Path.Combine(CurrentDocDir+"/plots/", "NodePerformance.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS-experimental\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS-experimental\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 311.
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
