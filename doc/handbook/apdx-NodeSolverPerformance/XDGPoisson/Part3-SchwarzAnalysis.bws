restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("Xdg_SingleNodePerformance_0_1");
**************
Project name is set to 'Xdg_SingleNodePerformance_0_1'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2020-2-21";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
LinearSolverCode[] Solvers = new LinearSolverCode[] {
LinearSolverCode.exp_Kcycle_schwarz,
LinearSolverCode.exp_gmres_levelpmg
};
**************
==============
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 76 instances of String {
  0: SessionName
  1: DGdegree:Phi
  2: DGdegree:u
  3: NoOfMultigridLevels
  4: GeneratedFromCode
  5: ControlFileText_Index
  6: dtFixed
  7: TimesteppingMode
  8: SetDefaultDiriBndCnd
  9: ViscosityMode
  10: MU_A
  11: MU_B
  12: ExcactSolSupported
  13: PrePreCond
  14: AgglomerationThreshold
  15: penalty_multiplyer
  16: pOff
  17: SuppressExceptionPrompt
  18: LinearSolver.verbose
  19: LinearSolver.MaxKrylovDim
  20: LinearSolver.MaxSolverIterations
  21: LinearSolver.MinSolverIterations
  22: LinearSolver.ConvergenceCriterion
  23: LinearSolver.SolverCode
  24: LinearSolver.NoOfMultigridLevels
  25: LinearSolver.exp_localPrec_muA
  26: LinearSolver.exp_localPrec_Min_dt
  27: LinearSolver.TargetBlockSize
  28: NonLinearSolver.verbose
  29: NonLinearSolver.MaxSolverIterations
  30: NonLinearSolver.MinSolverIterations
  31: NonLinearSolver.ConvergenceCriterion
  32: NonLinearSolver.UnderRelax
  33: NonLinearSolver.SolverCode
  34: NonLinearSolver.constantNewtonIterations
  35: NonLinearSolver.UsePresRefPoint
  36: GridPartType
  37: ProjectName
  38: NoOfTimesteps
  39: Endtime
  40: saveperiod
  41: rollingSaves
  42: dtMin
  43: dtMax
  44: ImmediatePlotPeriod
  45: SuperSampling
  46: savetodb
  47: logFileDirectory
  48: Paramstudy_ContinueOnError
  49: DynamicLoadBalancing_RedistributeAtStartup
  50: DynamicLoadBalancing_Period
  51: DynamicLoadBalancing_ImbalanceThreshold
  52: DynamicLoadBalancing_On
  53: AdaptiveMeshRefinement
  54: AMR_startUpSweeps
  55: CutCellQuadratureType
  56: ContinueOnIoError
  57: Grid:NoOfCells
  58: Grid:hMax
  59: Grid:hMin
  60: UsedNoOfMultigridLevels
  61: maxBlkSize
  62: minBlkSize
  63: NumberOfMatrixBlox
  64: NoOfCutCellBlocks
  65: DOFs
  66: minSolRunT
  67: maxSolRunT
  68: Conv
  69: NoIter
  70: maxMultigridlvl
  71: RegularTerminated
  72: XdgMatrixAssembly
  73: Aggregation_basis_init_time
  74: Solver_Init_time
  75: Solver_Run_time
}
==============
Func<IDictionary<string,object>,bool> solverselection = delegate(IDictionary<string,object> row){
bool selectsolver = false;
foreach(var solver in Solvers)
    selectsolver |= (Convert.ToInt32(row["LinearSolver.SolverCode"]) == (int)solver);
return selectsolver;
}
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (  solverselection(row) && (Convert.ToInt32(row["Conv"]) != 0));
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", 
              "minSolRunT", "maxSolRunT", "UsedNoOfMultigridLevels",
              "XdgMatrixAssembly", "Aggregation_basis_init_time", "Solver_Init_time", "Solver_Run_time");
**************
==============
SubTab.Print();
**************
    DGdegree:u Grid:NoOfCells LinearSolver.SolverCode DOFs    minSolRunT   maxSolRunT   UsedNoOfMultigridLevels XdgMatrixAssembly Aggregation_basis_init_time Solver_Init_time Solver_Run_time 
0:  2          64             47                      880     25.7175066   25.7175066   3                       1.3114784         0.879236                    0.0437942        25.0805334      
1:  2          512            47                      5920    32.0602831   32.0602831   4                       3.1364168         0.4879245                   0.0619168        31.3026205      
2:  3          64             47                      1760    31.27841     31.27841     3                       1.9368788         0.1601037                   0.0449402        31.0401885      
3:  3          512            47                      11840   23.8826258   23.8826258   4                       6.0805936         0.3478924                   0.0644234        22.3033314      
4:  2          64             41                      880     2.1363041    2.1363041    3                       1.1639211         0.0876062                   0.1970269        1.7801896       
5:  2          4096           47                      43840   23.5232354   23.5232354   5                       12.2287346        1.0416658                   0.2033549        21.6217857      
6:  3          64             41                      1760    5.7434076    5.7434076    3                       1.9439435         0.0732987                   0.146882         5.4222297       
7:  2          512            41                      5920    4.8242926    4.8242926    4                       3.3026794         0.2165046                   0.4262438        3.9523207       
8:  3          512            41                      11840   5.061362     5.061362     4                       5.6317151         0.3103085                   0.3853338        4.201468        
9:  2          4096           41                      43840   10.7902301   10.7902301   5                       11.2004099        0.8424909                   1.0597236        8.4515359       
10: 3          4096           47                      87680   20.0814622   20.0814622   5                       28.0884008        2.292961                    0.2709997        17.0203766      
11: 3          4096           41                      87680   19.2012064   19.2012064   5                       28.0771111        3.0296295                   2.3671501        13.3757492      
12: 2          13824          47                      145200  35.5144824   35.5144824   5                       29.1298086        4.39884                     0.7905363        30.7551187      
13: 2          32768          47                      339040  104.121417   104.121417   5                       59.9116698        16.939849                   2.1676971        93.1650751      
14: 2          13824          41                      145200  33.6645327   33.6645327   5                       28.8687587        4.3651598                   4.4976475        25.5047786      
15: 3          13824          47                      290400  122.9893308  122.9893308  5                       68.8623599        9.5701448                   1.2581144        112.4624822     
16: 2          32768          41                      339040  65.1106244   65.1106244   5                       58.3696114        16.9428459                  9.2102958        47.1543156      
17: 3          13824          41                      290400  176.8141851  176.8141851  5                       68.4892672        9.0143679                   10.0583158       158.4591548     
18: 3          32768          47                      678080  244.442917   244.442917   5                       139.6975811       31.6961727                  2.9179922        222.0614824     
19: 3          32768          41                      678080  178.369078   178.369078   5                       132.7047889       29.3069293                  19.3096057       139.4765268     
20: 2          110592         41                      1134560 350.5918706  350.5918706  5                       168.9345289       147.3486703                 50.8004685       263.3361055     
21: 2          110592         47                      1134560 666.2888669  666.2888669  5                       160.5175848       138.6551441                 15.6926638       621.2535902     
22: 3          110592         41                      2269120 970.164654   970.164654   5                       327.5864773       174.5976683                 91.4005299       816.0779238     
23: 3          110592         47                      2269120 1175.8050148 1175.8050148 5                       367.0439292       180.5919324                 16.6782747       1094.3965419    
24: 2          262144         41                      2671600 966.9243286  966.9243286  5                       367.5797601       694.9736463                 99.6010137       799.6159532     
25: 2          262144         47                      2671600 3004.1115221 3004.1115221 5                       366.5940173       693.5064679                 69.4149842       2863.0391344    
26: 5          64             47                      3584    24.5342943   24.5342943   3                       13.6100944        0.6049387                   0.0718561        24.0342062      
27: 5          512            47                      30016   21.2763356   21.2763356   4                       41.8535538        4.5720994                   0.1106005        18.7418492      
28: 5          64             41                      3584    15.1929325   15.1929325   3                       13.770869         0.5879245                   0.4234396        14.3349047      
29: 5          512            41                      30016   54.2580141   54.2580141   4                       41.6540351        4.8069123                   1.8707384        49.9467256      
30: 5          4096           47                      238784  166.9443475  166.9443475  5                       204.3739811       34.1127397                  0.7678725        151.5602272     
31: 5          4096           41                      238784  252.819361   252.819361   5                       211.6635717       38.3318569                  15.0964017       221.5876487     
32: 5          13824          47                      790272  457.8119156  457.8119156  6                       546.0315196       157.6931786                 2.6253892        408.1009548     
==============
**************
==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:u";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
(1,39): error CS0426: The nested type `Code' does not exist in the type `BoSSS.Solution.Control.LinearSolverConfig'
(1,16): error CS0622: Can only use array initializer expressions to assign to array types. Try using a new expression instead
No. of errors|warnings: 2|0.

==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = DGdegrees.Length;
int columns = 1;

Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
AllMultiplots[iPlot] = multiplots;
int pDegree = 0;

for(int iRow = 0; iRow < rows; iRow++) {
int iCol = 0; 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k                        = Convert.ToInt32(Row["DGdegree:u"]);
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
      
           if(    k != DGdegrees[pDegree] 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           double mtxAssi  = Convert.ToDouble(Row["XdgMatrixAssembly"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", DGdegrees[pDegree]);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 1e-2;
    multiplots[iRow,0].YrangeMax = 1e+4;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    
    pDegree++;                       
}
}
;
AllMultiplots[1].PlotNow()
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
System.Drawing.Bitmap
==============
//var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
//CL.PlotNow();
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
//CL.WriteMinimalCompileableExample(
//    Path.Combine(CurrentDocDir, "plots", "MainXdgPoisson_Schwarz.tex"),
//    "XdgPoisson_Schwarz.tex");
**************
==============
//CL.WriteMinimalCompileableExample("C:\\tmp\\Schwarz" + dateString + ".tex");
**************
==============
**************
==============
**************
==============
// ================
// Loop it
// ==============
for(int i =0; i< Solvers.Length;i++){
string problem = "XdgPoisson";
string name    = problem + Solvers[i];
var CL         = AllMultiplots[i].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "Main"+name+".tex"),
    name+".tex");
}
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 

==============
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 322.
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
