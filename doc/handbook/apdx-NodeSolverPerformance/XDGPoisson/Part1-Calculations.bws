restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 8 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 144; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 0; Grid Count = 6; Path = P:\Performance_DB }
  3: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  4: { Session Count = 112; Grid Count = 6; Path = E:\Performance_oldLibs_DB }
  5: { Session Count = 0; Grid Count = 3; Path = E:\db_2delete }
  6: { Session Count = 112; Grid Count = 136; Path = E:\bosss_db_performance }
  7: { Session Count = 144; Grid Count = 139; Path = Z:\weber\Performance_Kram\bosss_db_performance }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XdgPoisson3;
**************
==============
**************
==============
string WFlowName = "XdgPoissonSolverPerformance_5";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.AllJobs;
**************
Project name is set to 'XdgPoissonSolverPerformance_5'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
//var tempDB = OpenOrCreateDatabase(@"\\dc1\userspace\weber\Performance_oldLibs_DB");
var tempDB = OpenOrCreateDatabase(@"E:\XdgPerformance");
**************
Opening existing database 'E:\XdgPerformance'.

==============
var myBatch = new MiniBatchProcessorClient(@"G:\deploy-Mini");
//var myBatch = new MsHPC2012Client(@"\\dc1\userspace\weber\deploy","hpccluster",ComputeNodes : new[] {"hpccluster"});
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Starting mini batch processor in external process...
Started mini batch processor on local machine, process id is 7340.

==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 9 instances of IGridInfo {
  0: { Guid = f83b41cd-c719-42ce-95f5-7058a9852aa8; Name = XdgPoissonSolverPerformance_5_J262144; Cell Count = 262144; Dim = 3 }
  1: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }
  2: { Guid = 8bb54556-623c-4e38-a66d-b6423a69378d; Name = XdgPoissonSolverPerformance_4_J512; Cell Count = 512; Dim = 3 }
  3: { Guid = a296cde2-4587-42a0-9b2f-99ca84c703fc; Name = XdgPoissonSolverPerformance_J1310720; Cell Count = 1310720; Dim = 3 }
  4: { Guid = 129e008f-66d5-466c-a886-436974448400; Name = XdgPoissonSolverPerformance_J163840; Cell Count = 163840; Dim = 3 }
  5: { Guid = ef97313d-349a-4e2a-81f1-5568f131e45f; Name = XdgPoissonSolverPerformance_J20480; Cell Count = 20480; Dim = 3 }
  6: { Guid = cbea7b20-b9c4-4dbb-be44-e485d6263287; Name = XdgPoissonSolverPerformance_J2560; Cell Count = 2560; Dim = 3 }
  7: { Guid = a50388ea-5ec7-4d96-806f-c6db63da5750; Name = XdgPoissonSolverPerformance_J320; Cell Count = 320; Dim = 3 }
  8: { Guid = 09d431c6-b4c7-4337-9145-d77d7ed2c6bf; Name = XdgPoissonSolverPerformance_J40; Cell Count = 40; Dim = 3 }
}
==============
int[] Resolutions_3D = new int[] { 16 };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    //double[] xNodes = GenericBlas.Linspace(0, 10, Res*5 + 1);
    //double[] yNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    //double[] zNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    double[] xNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    double[] yNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    double[] zNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.Name = GridName;
        
        g.EdgeTagNames.Add(1, "Dirichlet");
        g.EdgeTagNames.Add(2, "Neumann");
    
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            if(Math.Abs(X[0] - 0.0) <= 1.0e-6)
                ret = 1;
            else
                ret = 2;
            return ret;
        });
      
        tempDB.SaveGrid(ref g);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Found Grid: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }

==============
grids;
**************
List of 1 instances of IGridInfo {
  0: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }
}
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 1});
**************
-0.841470984807897
==============
**************
==============
**************
==============
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<XdgPoisson3Control> controls = new List<XdgPoisson3Control>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
int[] PolyDegS = new int[] {2}; // reduced options for dev.
**************
==============
// Solvers which we want to instrument:
LinearSolverConfig.Code[] solver_nameS = new LinearSolverConfig.Code[] {
    LinearSolverConfig.Code.classic_pardiso, 
    LinearSolverConfig.Code.classic_mumps, 
    LinearSolverConfig.Code.classic_cg,
    LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse,
    LinearSolverConfig.Code.exp_softpcg_mg
}; 
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
int MaxDof = 5000000;
**************
==============
using BoSSS.Solution.XNSECommon;
using BoSSS.Foundation.XDG;
**************
==============
controls.Clear();
foreach(LinearSolverConfig.Code solver_name in solver_nameS) {
foreach(int k in PolyDegS) {
int iGrd = 0;    
foreach(IGridInfo grd in grids) {
    iGrd ++;
    //if(k >= 3 && iGrd > 6)
    //    continue; 
    //if(k >= 4 && iGrd > 5)
    //    continue; 
    //if(k >= 5 && iGrd > 4)
    //    continue; 
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);

    var ctrl = new XdgPoisson3Control();
    controls.Add(ctrl);
    
    //ctrl.SessionName = caseName;
    
    ctrl.savetodb = true; //for debug's sake
    ctrl.SetDatabase(tempDB);
    ctrl.SetGrid(grd);
    ctrl.SetDGdegree(k);

    ctrl.PerformanceModeON                = true;
    ctrl.LinearSolver.SolverCode          = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels = 10;
    
    ctrl.ExcactSolSupported = false;
    ctrl.InitialValues.Add("Phi", new Formula("X => X[1]+0.001"));
    ctrl.MU_A = -1;
    ctrl.MU_B = -1;
    ctrl.InitialValues.Add("rhs#A", GetFormulaObject(InitialValues.RHS));
    ctrl.InitialValues.Add("rhs#B", GetFormulaObject(InitialValues.RHS));
    //ctrl.AddBoundaryValue("Dirichlet", "u#A",
    //    GetFormulaObject(InitialValues.DirichletBC));
    //ctrl.AddBoundaryValue("Dirichlet", "u#B",
    //    GetFormulaObject(InitialValues.DirichletBC));
    //ctrl.AddBoundaryValue("Neumann", "u#A",
    //    GetFormulaObject(InitialValues.NeumannBC));
    //ctrl.AddBoundaryValue("Neumann", "u#B",
    //    GetFormulaObject(InitialValues.NeumannBC));
    ctrl.CutCellQuadratureType = XQuadFactoryHelper.MomentFittingVariants.Classic;
    ctrl.SetDefaultDiriBndCnd = true;
    ctrl.ViscosityMode        = XLaplace_Interface.Mode.SIP;
    ctrl.SessionName          = "PoissonConstCoeff_"+caseName;
}
}
}
**************
setting up: J4096_k2_classic_pardiso
setting up: J4096_k2_classic_mumps
setting up: J4096_k2_classic_cg
setting up: J4096_k2_exp_softpcg_schwarz_directcoarse
setting up: J4096_k2_exp_softpcg_mg

==============
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
//var job = new Job("zwa", solver);
**************
==============
//myCtrl.GetType();
**************
==============
//job.SetControlObject(myCtrl);
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("softpcg") && s.Name.Contains("k2") && s.Name.Contains("mg"));//.ForEach(si => si.Delete(true));
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("exp_direct")).ForEach(si => si.Delete());
**************
==============
**************
==============
foreach(var ctrl in controls) {
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    ctrl.RunBatch(myBatch); 
}
**************
 Submitting: PoissonConstCoeff_J4096_k2_classic_pardiso
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\XdgPoisson32019Feb08_15-33-37
Source directory: C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release
   copied: XdgPoisson3.exe BoSSS.Solution.dll CommandLine.dll BoSSS.Foundation.dll ilPSP.dll MPI.Wrappers.dll log4net.dll nunit.framework.dll Newtonsoft.Json.dll ilPSP.LinSolvers.MUMPS.dll BoSSS.Platform.dll Renci.SshNet.dll ilPSP.LinSolvers.monkey.dll ilPSP.Connectors.Matlab.dll BoSSS.Foundation.XDG.dll Mono.CSharp.dll BoSSS.Foundation.Grid.dll MIConvexHull.dll MathNet.Numerics.dll BoSSS.Solution.XNSECommon.dll BoSSS.Solution.NSECommon.dll BoSSS.Solution.LevelSetTools.dll BoSSS.Foundation.SpecFEM.dll ilPSP.LinSolvers.PARDISO.dll BoSSS.Solution.Statistic.dll BoSSS.Solution.AdvancedSolvers.dll BoSSS.Solution.Gnuplot.dll BoSSS.Solution.Tecplot.dll    writing file: control.obj
deployment finished.
 Submitting: PoissonConstCoeff_J4096_k2_classic_mumps
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\XdgPoisson32019Feb08_15-33-37-1
Source directory: C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release
   copied: XdgPoisson3.exe BoSSS.Solution.dll CommandLine.dll BoSSS.Foundation.dll ilPSP.dll MPI.Wrappers.dll log4net.dll nunit.framework.dll Newtonsoft.Json.dll ilPSP.LinSolvers.MUMPS.dll BoSSS.Platform.dll Renci.SshNet.dll ilPSP.LinSolvers.monkey.dll ilPSP.Connectors.Matlab.dll BoSSS.Foundation.XDG.dll Mono.CSharp.dll BoSSS.Foundation.Grid.dll MIConvexHull.dll MathNet.Numerics.dll BoSSS.Solution.XNSECommon.dll BoSSS.Solution.NSECommon.dll BoSSS.Solution.LevelSetTools.dll BoSSS.Foundation.SpecFEM.dll ilPSP.LinSolvers.PARDISO.dll BoSSS.Solution.Statistic.dll BoSSS.Solution.AdvancedSolvers.dll BoSSS.Solution.Gnuplot.dll BoSSS.Solution.Tecplot.dll    writing file: control.obj
deployment finished.
 Submitting: PoissonConstCoeff_J4096_k2_classic_cg
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\XdgPoisson32019Feb08_15-33-37-2
Source directory: C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release
   copied: XdgPoisson3.exe BoSSS.Solution.dll CommandLine.dll BoSSS.Foundation.dll ilPSP.dll MPI.Wrappers.dll log4net.dll nunit.framework.dll Newtonsoft.Json.dll ilPSP.LinSolvers.MUMPS.dll BoSSS.Platform.dll Renci.SshNet.dll ilPSP.LinSolvers.monkey.dll ilPSP.Connectors.Matlab.dll BoSSS.Foundation.XDG.dll Mono.CSharp.dll BoSSS.Foundation.Grid.dll MIConvexHull.dll MathNet.Numerics.dll BoSSS.Solution.XNSECommon.dll BoSSS.Solution.NSECommon.dll BoSSS.Solution.LevelSetTools.dll BoSSS.Foundation.SpecFEM.dll ilPSP.LinSolvers.PARDISO.dll BoSSS.Solution.Statistic.dll BoSSS.Solution.AdvancedSolvers.dll BoSSS.Solution.Gnuplot.dll BoSSS.Solution.Tecplot.dll    writing file: control.obj
deployment finished.
 Submitting: PoissonConstCoeff_J4096_k2_exp_softpcg_schwarz_directcoarse
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\XdgPoisson32019Feb08_15-33-37-3
Source directory: C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release
   copied: XdgPoisson3.exe BoSSS.Solution.dll CommandLine.dll BoSSS.Foundation.dll ilPSP.dll MPI.Wrappers.dll log4net.dll nunit.framework.dll Newtonsoft.Json.dll ilPSP.LinSolvers.MUMPS.dll BoSSS.Platform.dll Renci.SshNet.dll ilPSP.LinSolvers.monkey.dll ilPSP.Connectors.Matlab.dll BoSSS.Foundation.XDG.dll Mono.CSharp.dll BoSSS.Foundation.Grid.dll MIConvexHull.dll MathNet.Numerics.dll BoSSS.Solution.XNSECommon.dll BoSSS.Solution.NSECommon.dll BoSSS.Solution.LevelSetTools.dll BoSSS.Foundation.SpecFEM.dll ilPSP.LinSolvers.PARDISO.dll BoSSS.Solution.Statistic.dll BoSSS.Solution.AdvancedSolvers.dll BoSSS.Solution.Gnuplot.dll BoSSS.Solution.Tecplot.dll    writing file: control.obj
deployment finished.
 Submitting: PoissonConstCoeff_J4096_k2_exp_softpcg_mg
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\XdgPoisson32019Feb08_15-33-37-4
Source directory: C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release
   copied: XdgPoisson3.exe BoSSS.Solution.dll CommandLine.dll BoSSS.Foundation.dll ilPSP.dll MPI.Wrappers.dll log4net.dll nunit.framework.dll Newtonsoft.Json.dll ilPSP.LinSolvers.MUMPS.dll BoSSS.Platform.dll Renci.SshNet.dll ilPSP.LinSolvers.monkey.dll ilPSP.Connectors.Matlab.dll BoSSS.Foundation.XDG.dll Mono.CSharp.dll BoSSS.Foundation.Grid.dll MIConvexHull.dll MathNet.Numerics.dll BoSSS.Solution.XNSECommon.dll BoSSS.Solution.NSECommon.dll BoSSS.Solution.LevelSetTools.dll BoSSS.Foundation.SpecFEM.dll ilPSP.LinSolvers.PARDISO.dll BoSSS.Solution.Statistic.dll BoSSS.Solution.AdvancedSolvers.dll BoSSS.Solution.Gnuplot.dll BoSSS.Solution.Tecplot.dll    writing file: control.obj
deployment finished.

==============
LastError
**************
==============
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value
**************
List of 7 instances of ISessionInfo {
  0: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J262144_k2_classic_mumps*	02/08/2019 15:17:24	cfcf52dc...
  1: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J262144_k2_classic_pardiso	02/08/2019 14:34:44	5042c7b8...
  2: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J512_k2_exp_softpcg_mg	02/08/2019 14:29:14	4b1bc36b...
  3: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J512_k2_exp_softpcg_schwarz_directcoarse	02/08/2019 14:28:14	ae055c6b...
  4: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J512_k2_classic_cg	02/08/2019 14:27:14	5564c713...
  5: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J512_k2_classic_mumps	02/08/2019 14:26:14	01a212f2...
  6: XdgPoissonSolverPerformance_5	PoissonConstCoeff_J512_k2_classic_pardiso	02/08/2019 14:25:14	23cbff38...
}
==============
**************
==============
WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
List of 5 instances of String {
  0: PoissonConstCoeff_J262144_k2_classic_pardiso: 	FinishedSuccessful
  1: PoissonConstCoeff_J262144_k2_classic_mumps: 	InProgress
  2: PoissonConstCoeff_J262144_k2_classic_cg: 	PendingInExecutionQueue
  3: PoissonConstCoeff_J262144_k2_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  4: PoissonConstCoeff_J262144_k2_exp_softpcg_mg: 	PendingInExecutionQueue
}
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
5
==============
**************
==============
**************
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
**************
==============
static class AddCols {
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("SipMatrixAssembly");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Aggregation_basis_init");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Init");
        var nd  = ndS.ElementAt(0);
        //Console.WriteLine("Number of nodes: " + ndS.Count() + " cc " + nd.CallCount );
        return nd.TimeSpentInMethod.TotalSeconds / nd.CallCount;
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Run");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
}
**************
==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SipMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Aggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Run_time", AddCols.Solver_Run_time);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
**************
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
LastError;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
