restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 11 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 144; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 0; Grid Count = 6; Path = P:\Performance_DB }
  3: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  4: { Session Count = 112; Grid Count = 6; Path = E:\Performance_oldLibs_DB }
  5: { Session Count = 0; Grid Count = 4; Path = E:\db_2delete }
  6: { Session Count = 193; Grid Count = 12; Path = E:\XdgPerformance }
  7: { Session Count = 112; Grid Count = 136; Path = E:\bosss_db_performance }
  8: { Session Count = 19; Grid Count = 3; Path = F:\test_db }
  9: { Session Count = 144; Grid Count = 139; Path = Z:\weber\Performance_Kram\bosss_db_performance }
  10: { Session Count = 200; Grid Count = 6; Path = E:\Performance_newLibs_DB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XdgPoisson3;
**************
==============
**************
==============
string WFlowName = "Xdg_SingleNodePerformance_0_1";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.AllJobs;
**************
Project name is set to 'Xdg_SingleNodePerformance_0_1'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
//var tempDB = OpenOrCreateDatabase(@"\\dc1\userspace\weber\Performance_oldLibs_DB");
var tempDB = OpenOrCreateDatabase(@"E:\XdgPerformance");
**************
Opening existing database 'E:\XdgPerformance'.

==============
var myBatch = new MiniBatchProcessorClient(@"G:\deploy-Mini");
//var myBatch = new MsHPC2012Client(@"\\dc1\userspace\weber\deploy","hpccluster",ComputeNodes : new[] {"hpccluster"});
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Mini batch processor is already running.

==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 12 instances of IGridInfo {
  0: { Guid = 1c51dd5f-320d-4777-932b-73cf4dc10da0; Name = XdgPoissonSolverPerformance_1_J32768; Cell Count = 32768; Dim = 3 }
  1: { Guid = 717d9fbe-016a-4ce2-82eb-3b99484fc91e; Name = XdgPoissonSolverPerformance_1_J64; Cell Count = 64; Dim = 3 }
  2: { Guid = 183b4254-4a9c-44c5-9d10-85ae244906ad; Name = XdgPoissonSolverPerformance_1_J8; Cell Count = 8; Dim = 3 }
  3: { Guid = f83b41cd-c719-42ce-95f5-7058a9852aa8; Name = XdgPoissonSolverPerformance_5_J262144; Cell Count = 262144; Dim = 3 }
  4: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }
  5: { Guid = 8bb54556-623c-4e38-a66d-b6423a69378d; Name = XdgPoissonSolverPerformance_4_J512; Cell Count = 512; Dim = 3 }
  6: { Guid = a296cde2-4587-42a0-9b2f-99ca84c703fc; Name = XdgPoissonSolverPerformance_J1310720; Cell Count = 1310720; Dim = 3 }
  7: { Guid = 129e008f-66d5-466c-a886-436974448400; Name = XdgPoissonSolverPerformance_J163840; Cell Count = 163840; Dim = 3 }
  8: { Guid = ef97313d-349a-4e2a-81f1-5568f131e45f; Name = XdgPoissonSolverPerformance_J20480; Cell Count = 20480; Dim = 3 }
  9: { Guid = cbea7b20-b9c4-4dbb-be44-e485d6263287; Name = XdgPoissonSolverPerformance_J2560; Cell Count = 2560; Dim = 3 }
  10: { Guid = a50388ea-5ec7-4d96-806f-c6db63da5750; Name = XdgPoissonSolverPerformance_J320; Cell Count = 320; Dim = 3 }
  11: { Guid = 09d431c6-b4c7-4337-9145-d77d7ed2c6bf; Name = XdgPoissonSolverPerformance_J40; Cell Count = 40; Dim = 3 }
}
==============
int[] Resolutions_3D = new int[] { 2 ,4,8,16,32,64 };
//int[] Resolutions_3D = new int[] { 2 };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    //double[] xNodes = GenericBlas.Linspace(0, 10, Res*5 + 1);
    //double[] yNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    //double[] zNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    double[] xNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    double[] yNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    double[] zNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt]=null;
    foreach(IGridInfo grd in tempDB.Grids){
        bool check = grd.Name.Contains(string.Format("_J"+ J));
        if(check){
          grids[cnt]=grd;
        }
    }
    
    //grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.Name = GridName;
        
        g.EdgeTagNames.Add(1, "Dirichlet");
        //g.EdgeTagNames.Add(2, "Neumann");
    
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
//            if(Math.Abs(X[0] - 0.0) <= 1.0e-6)
                ret = 1;
//            else
//                ret = 2;
            return ret;
        });
      
        tempDB.SaveGrid(ref g);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Found Grid: { Guid = 183b4254-4a9c-44c5-9d10-85ae244906ad; Name = XdgPoissonSolverPerformance_1_J8; Cell Count = 8; Dim = 3 }
Found Grid: { Guid = 717d9fbe-016a-4ce2-82eb-3b99484fc91e; Name = XdgPoissonSolverPerformance_1_J64; Cell Count = 64; Dim = 3 }
Found Grid: { Guid = 8bb54556-623c-4e38-a66d-b6423a69378d; Name = XdgPoissonSolverPerformance_4_J512; Cell Count = 512; Dim = 3 }
Found Grid: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }
Found Grid: { Guid = 1c51dd5f-320d-4777-932b-73cf4dc10da0; Name = XdgPoissonSolverPerformance_1_J32768; Cell Count = 32768; Dim = 3 }
Found Grid: { Guid = f83b41cd-c719-42ce-95f5-7058a9852aa8; Name = XdgPoissonSolverPerformance_5_J262144; Cell Count = 262144; Dim = 3 }

==============
grids;
**************
List of 6 instances of IGridInfo {
  0: { Guid = 183b4254-4a9c-44c5-9d10-85ae244906ad; Name = XdgPoissonSolverPerformance_1_J8; Cell Count = 8; Dim = 3 }
  1: { Guid = 717d9fbe-016a-4ce2-82eb-3b99484fc91e; Name = XdgPoissonSolverPerformance_1_J64; Cell Count = 64; Dim = 3 }
  2: { Guid = 8bb54556-623c-4e38-a66d-b6423a69378d; Name = XdgPoissonSolverPerformance_4_J512; Cell Count = 512; Dim = 3 }
  3: { Guid = 584e9a28-7e92-43c1-88d4-965ff6530b30; Name = XdgPoissonSolverPerformance_5_J4096; Cell Count = 4096; Dim = 3 }
  4: { Guid = 1c51dd5f-320d-4777-932b-73cf4dc10da0; Name = XdgPoissonSolverPerformance_1_J32768; Cell Count = 32768; Dim = 3 }
  5: { Guid = f83b41cd-c719-42ce-95f5-7058a9852aa8; Name = XdgPoissonSolverPerformance_5_J262144; Cell Count = 262144; Dim = 3 }
}
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
//InitialValues.RHS(new double[]{ 1,1});
**************
==============
**************
==============
**************
==============
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<XdgPoisson3Control> controls = new List<XdgPoisson3Control>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
int[] PolyDegS = new int[] {2, 3 ,5};
//int[] PolyDegS = new int[] {3};
**************
==============
// Solvers which we want to instrument:
LinearSolverConfig.Code[] solver_nameS = new LinearSolverConfig.Code[] {
    //LinearSolverConfig.Code.classic_pardiso, 
    LinearSolverConfig.Code.classic_mumps, 
    //LinearSolverConfig.Code.classic_cg,
    LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse,
    LinearSolverConfig.Code.exp_softpcg_mg
}; 
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
int MaxDof = 5000000;
**************
==============
using BoSSS.Solution.XNSECommon;
using BoSSS.Foundation.XDG;
**************
==============
controls.Clear();
foreach(LinearSolverConfig.Code solver_name in solver_nameS) {
foreach(int k in PolyDegS) {
int iGrd = 0;    
foreach(IGridInfo grd in grids) {
    iGrd ++;
    //if(k >= 3 && iGrd > 6)
    //    continue; 
    //if(k >= 4 && iGrd > 5)
    //    continue; 
    //if(k >= 5 && iGrd > 4)
    //    continue; 
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);

    var ctrl = new XdgPoisson3Control();
    
    
    //ctrl.SessionName = caseName;
    
    ctrl.savetodb = true; //for debug's sake
    ctrl.SetDatabase(tempDB);
    ctrl.SetGrid(grd);
    //ctrl.SetDGdegree(k);
    
    ctrl.FieldOptions.Add("Phi", new FieldOpts() {
         Degree = 2,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });
    ctrl.FieldOptions.Add("u", new FieldOpts() {
         Degree = k,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });

    ctrl.SuppressExceptionPrompt           = true;
    ctrl.LinearSolver.SolverCode           = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels  = 10;
    ctrl.LinearSolver.ConvergenceCriterion = 1e-6;
    
    double radius           = 0.7;
    ctrl.ExcactSolSupported = false;
    ctrl.InitialValues.Add("Phi", new Formula("X => X[0].Pow2()+X[1].Pow2()+X[2].Pow2()-"+radius+".Pow2()"));
    ctrl.MU_A = -1;
    ctrl.MU_B = -1000;
    ctrl.InitialValues.Add("rhs#A", new Formula("X => 1"));
    ctrl.InitialValues.Add("rhs#B", new Formula("X => 1"));
    ctrl.InitialValues.Add("u#A", new Formula ("X => 0"));
    ctrl.InitialValues.Add("u#B", new Formula ("X => 0"));
    //ctrl.AddBoundaryValue("Dirichlet", "u#A",
    //    GetFormulaObject(InitialValues.DirichletBC));
    //ctrl.AddBoundaryValue("Dirichlet", "u#B",
    //    GetFormulaObject(InitialValues.DirichletBC));
    //ctrl.AddBoundaryValue("Neumann", "u#A",
    //    GetFormulaObject(InitialValues.NeumannBC));
    //ctrl.AddBoundaryValue("Neumann", "u#B",
    //    GetFormulaObject(InitialValues.NeumannBC));
    ctrl.CutCellQuadratureType = XQuadFactoryHelper.MomentFittingVariants.Classic;
    ctrl.SetDefaultDiriBndCnd  = true;
    ctrl.ViscosityMode         = XLaplace_Interface.Mode.SIP;
    ctrl.SessionName           = "XdgPoissonVelocity_"+caseName;
    ctrl.ProjectName           = WFlowName;
    
    ctrl.AgglomerationThreshold = 0.1;
    
    controls.Add(ctrl);
}
}
}
**************
setting up: J8_k2_classic_mumps
setting up: J64_k2_classic_mumps
setting up: J512_k2_classic_mumps
setting up: J4096_k2_classic_mumps
setting up: J32768_k2_classic_mumps
setting up: J262144_k2_classic_mumps
setting up: J8_k3_classic_mumps
setting up: J64_k3_classic_mumps
setting up: J512_k3_classic_mumps
setting up: J4096_k3_classic_mumps
setting up: J32768_k3_classic_mumps
setting up: J8_k5_classic_mumps
setting up: J64_k5_classic_mumps
setting up: J512_k5_classic_mumps
setting up: J4096_k5_classic_mumps
setting up: J32768_k5_classic_mumps
setting up: J8_k2_exp_softpcg_schwarz_directcoarse
setting up: J64_k2_exp_softpcg_schwarz_directcoarse
setting up: J512_k2_exp_softpcg_schwarz_directcoarse
setting up: J4096_k2_exp_softpcg_schwarz_directcoarse
setting up: J32768_k2_exp_softpcg_schwarz_directcoarse
setting up: J262144_k2_exp_softpcg_schwarz_directcoarse
setting up: J8_k3_exp_softpcg_schwarz_directcoarse
setting up: J64_k3_exp_softpcg_schwarz_directcoarse
setting up: J512_k3_exp_softpcg_schwarz_directcoarse
setting up: J4096_k3_exp_softpcg_schwarz_directcoarse
setting up: J32768_k3_exp_softpcg_schwarz_directcoarse
setting up: J8_k5_exp_softpcg_schwarz_directcoarse
setting up: J64_k5_exp_softpcg_schwarz_directcoarse
setting up: J512_k5_exp_softpcg_schwarz_directcoarse
setting up: J4096_k5_exp_softpcg_schwarz_directcoarse
setting up: J32768_k5_exp_softpcg_schwarz_directcoarse
setting up: J8_k2_exp_softpcg_mg
setting up: J64_k2_exp_softpcg_mg
setting up: J512_k2_exp_softpcg_mg
setting up: J4096_k2_exp_softpcg_mg
setting up: J32768_k2_exp_softpcg_mg
setting up: J262144_k2_exp_softpcg_mg
setting up: J8_k3_exp_softpcg_mg
setting up: J64_k3_exp_softpcg_mg
setting up: J512_k3_exp_softpcg_mg
setting up: J4096_k3_exp_softpcg_mg
setting up: J32768_k3_exp_softpcg_mg
setting up: J8_k5_exp_softpcg_mg
setting up: J64_k5_exp_softpcg_mg
setting up: J512_k5_exp_softpcg_mg
setting up: J4096_k5_exp_softpcg_mg
setting up: J32768_k5_exp_softpcg_mg

==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
//var solver = new XdgPoisson3Main();
//solver.Init(controls[0]);
//solver.RunSolverMode();
//solver.Dispose();
**************
Session ID: 5e16f168-7eb7-4f88-91bc-6d739937a592, DB path: 'E:\XdgPerformance'.
  Species A: no of agglomerated cells: 0
  Species B: no of agglomerated cells: 0
Matrix norm: 3079639.4271331
Symm. diff: 4.59294824395329E-10
Steady solve ...
Setting up multigrid operator...
Solver: SparseSolver, converged? True, 1 iterations.
   System size:                 160
   No of blocks:                8
   No of blocks in matrix:      32
   DG coordinates per cell:     20
   Non-zeros per matrix block:  400
   Total non-zeros in matrix:   12800
   maximal matrix storage (MB): 0.146484375
DOF: 160
min Blocksize: 10
max Blocksize: 20
done.
Removing tag: NotTerminated

==============
//WorkflowMgm.AllJobs.Pick(0);
//WorkflowMgm.AllJobs.Pick(0).Value.Stdout;
//WorkflowMgm.AllJobs.Pick(0).Value.Stderr;
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("softpcg") && s.Name.Contains("k2") && s.Name.Contains("mg"));//.ForEach(si => si.Delete(true));
//tempDB.Sessions.Where(s => s.Name.Contains("exp_direct")).ForEach(si => si.Delete());
**************
==============
foreach(var ctrl in controls) {
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    ctrl.RunBatch(myBatch);
}
**************
 Submitting: XdgPoissonVelocity_J8_k2_classic_mumps
System.ArgumentException occurred: Job with name 'XdgPoissonVelocity_J8_k2_classic_mumps' is already defined in the workflow management.. Type 'LastError' for details.

==============
**************
==============
WorkflowMgm.AllJobs;
**************
List of 0 instances of KeyValuePair{String,Job} {
}
==============
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value;
**************
List of 38 instances of ISessionInfo {
  0: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k5_exp_softpcg_mg	02/24/2019 23:57:39	f5b89613...
  1: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k5_exp_softpcg_mg	02/24/2019 23:55:59	73ae5f55...
  2: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J32768_k3_exp_softpcg_mg	02/24/2019 23:32:57	91d51318...
  3: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k3_exp_softpcg_mg	02/24/2019 23:27:56	d2b72fc3...
  4: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k3_exp_softpcg_mg	02/24/2019 23:26:16	11a1e0ab...
  5: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k3_exp_softpcg_mg	02/24/2019 23:25:16	421ba714...
  6: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k3_exp_softpcg_mg	02/24/2019 23:24:36	37a488dc...
  7: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J262144_k2_exp_softpcg_mg	02/24/2019 22:32:11	beb05c1f...
  8: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J32768_k2_exp_softpcg_mg	02/24/2019 22:24:31	15779374...
  9: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k2_exp_softpcg_mg	02/24/2019 22:22:30	7be56ac8...
  10: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k2_exp_softpcg_mg	02/24/2019 22:21:30	3b0ba784...
  11: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k2_exp_softpcg_mg	02/24/2019 22:20:50	6826dd10...
  12: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k2_exp_softpcg_mg	02/24/2019 22:20:10	662b0fad...
  13: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k5_exp_softpcg_schwarz_directcoarse	02/23/2019 01:52:03	aa95cfc0...
  14: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k5_exp_softpcg_schwarz_directcoarse	02/23/2019 01:50:23	8cf2420e...
  15: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J32768_k3_exp_softpcg_schwarz_directcoarse	02/23/2019 01:17:39	052874d0...
  16: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k3_exp_softpcg_schwarz_directcoarse	02/23/2019 01:11:19	2fe09cce...
  17: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k3_exp_softpcg_schwarz_directcoarse	02/23/2019 01:09:39	5990123b...
  18: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k3_exp_softpcg_schwarz_directcoarse	02/23/2019 01:08:39	0b698172...
  19: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k3_exp_softpcg_schwarz_directcoarse	02/23/2019 01:07:59	9ab46098...
  20: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J262144_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:24:39	ea385620...
  21: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J32768_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:12:38	dc601052...
  22: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:10:18	17f465cc...
  23: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:09:18	5533729d...
  24: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:08:38	1c5bcca2...
  25: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k2_exp_softpcg_schwarz_directcoarse	02/22/2019 23:07:58	f0ef68f7...
  26: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k5_classic_mumps	02/22/2019 20:12:12	a85c1c72...
  27: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k5_classic_mumps	02/22/2019 20:08:21	e0ba9265...
  28: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k5_classic_mumps	02/22/2019 20:06:41	e31a5c56...
  29: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k3_classic_mumps	02/22/2019 19:45:19	3a18c449...
  30: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k3_classic_mumps	02/22/2019 19:43:49	3d29bcf8...
  31: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k3_classic_mumps	02/22/2019 19:42:49	f14975b7...
  32: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k3_classic_mumps	02/22/2019 19:42:09	2862bd6b...
  33: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J32768_k2_classic_mumps	02/22/2019 18:54:24	931dd96c...
  34: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J4096_k2_classic_mumps	02/22/2019 18:52:34	c1334446...
  35: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J512_k2_classic_mumps	02/22/2019 18:51:34	7a71d8be...
  36: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J64_k2_classic_mumps	02/22/2019 18:50:54	d13031ce...
  37: XdgPoissonSolverPerformance_3_2	XdgPoissonVelocity_J8_k2_classic_mumps	02/22/2019 18:50:14	f291e5dd...
}
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed().ForEach(s=>Console.WriteLine(s.Name));
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed();
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed().DeleteAll();
//WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
List of 0 instances of ISessionInfo {
}
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
76
==============
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4);
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4).OpenSessionDirectory();
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4).Timesteps.Last().Fields.Pick(1).Coordinates.NoOfCols;
**************
40
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
tempDB.Projects.Pick(0).Value.Pick(0).KeysAndQueries;
**************
List of 74 instances of KeyValuePair{String,Object} {
  0: [SessionName, XdgPoissonVelocity_J64_k5_exp_softpcg_mg]
  1: [DGdegree:Phi, 2]
  2: [DGdegree:u, 5]
  3: [GeneratedFromCode, False]
  4: [ControlFileText_Index, 0]
  5: [dtFixed, -1]
  6: [SetDefaultDiriBndCnd, True]
  7: [PerformanceModeON, True]
  8: [ViscosityMode, 1]
  9: [MU_A, -1]
  10: [MU_B, -1]
  11: [ExcactSolSupported, False]
  12: [PrePreCond, 4]
  13: [AgglomerationThreshold, 0.1]
  14: [penalty_multiplyer, 2]
  15: [timeDependent, False]
  16: [pOff, 2]
  17: [SuppressExceptionPrompt, True]
  18: [GridPartType, 5]
  19: [ProjectName, XdgPoissonSolverPerformance_3_2]
  20: [NoOfTimesteps, -1]
  21: [Endtime, 1.79769313486232E+308]
  22: [saveperiod, 1]
  23: [rollingSaves, 0]
  24: [dtMin, -1]
  25: [dtMax, -1]
  26: [CompMode, 0]
  27: [ImmediatePlotPeriod, -1]
  28: [SuperSampling, 0]
  29: [savetodb, True]
  30: [logFileDirectory, .]
  31: [Paramstudy_ContinueOnError, True]
  32: [LinearSolver.MaxKrylovDim, 30]
  33: [LinearSolver.MaxSolverIterations, 2000]
  34: [LinearSolver.MinSolverIterations, 2]
  35: [LinearSolver.ConvergenceCriterion, 1E-06]
  36: [LinearSolver.SolverCode, 42]
  37: [LinearSolver.NoOfMultigridLevels, 10]
  38: [LinearSolver.exp_localPrec_muA, 1]
  39: [LinearSolver.exp_localPrec_Min_dt, 0]
  40: [LinearSolver.TargetBlockSize, 10000]
  41: [NonLinearSolver.PrecondSolver.MaxKrylovDim, 30]
  42: [NonLinearSolver.PrecondSolver.MaxSolverIterations, 2000]
  43: [NonLinearSolver.PrecondSolver.MinSolverIterations, 2]
  44: [NonLinearSolver.PrecondSolver.ConvergenceCriterion, 1E-08]
  45: [NonLinearSolver.PrecondSolver.SolverCode, 1]
  46: [NonLinearSolver.PrecondSolver.NoOfMultigridLevels, 1]
  47: [NonLinearSolver.PrecondSolver.exp_localPrec_muA, 1]
  48: [NonLinearSolver.PrecondSolver.exp_localPrec_Min_dt, 0]
  49: [NonLinearSolver.PrecondSolver.TargetBlockSize, 10000]
  50: [NonLinearSolver.MaxSolverIterations, 2000]
  51: [NonLinearSolver.MinSolverIterations, 2]
  52: [NonLinearSolver.ConvergenceCriterion, 1E-08]
  53: [NonLinearSolver.UnderRelax, 1]
  54: [NonLinearSolver.SolverCode, 1]
  55: [DynamicLoadBalancing_RedistributeAtStartup, False]
  56: [DynamicLoadBalancing_Period, -1]
  57: [DynamicLoadBalancing_ImbalanceThreshold, 0.12]
  58: [DynamicLoadBalancing_On, False]
  59: [AdaptiveMeshRefinement, False]
  60: [CutCellQuadratureType, 0]
  61: [ContinueOnIoError, True]
  62: [Grid:NoOfCells, 64]
  63: [Grid:hMax, 0.866025403784439]
  64: [Grid:hMin, 0.5]
  65: [UsedNoOfMultigridLevels, 3]
  66: [maxBlkSize, 112]
  67: [minBlkSize, 56]
  68: [NumberOfMatrixBlox, 352]
  69: [DOFs, 3584]
  70: [minSolRunT, 2.0174618]
  71: [maxSolRunT, 2.0174618]
  72: [Conv, 1]
  73: [NoIter, 5]
}
==============
static class AddCols {
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("SipMatrixAssembly");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Aggregation_basis_init");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Init");
        var nd  = ndS.ElementAt(0);
        //Console.WriteLine("Number of nodes: " + ndS.Count() + " cc " + nd.CallCount );
        return nd.TimeSpentInMethod.TotalSeconds / nd.CallCount;
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Run");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
}
**************
==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SipMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Aggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Run_time", AddCols.Solver_Run_time);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
SessTab.Rows.Count;
**************
76
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
(1,2): warning CS0105: The using directive for `System.IO' appeared previously in this namespace
No. of errors|warnings: 0|1.

==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
LastError;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
