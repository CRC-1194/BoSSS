restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XdgPoisson3;
**************
==============
var myBatch = (SlurmClient)ExecutionQueues[1];
ExecutionQueues[1].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
//myBatch.MonoDebug = true;
**************
==============
string WFlowName = "Xdg_Poisson_scaling";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.AllJobs;
**************
Project name is set to 'Xdg_Poisson_scaling'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
**************
==============
//on HHLR path has to be something, which linux can work with e.g. /work/scratch/...
string dirname = "DB_XDGPoisson_pLow";
string linpath = @"/work/scratch/jw52xeqa/"+dirname;
string winpath = @"W:\work\scratch\jw52xeqa\"+dirname;
**************
==============
var tempDB = OpenOrCreateDatabase(winpath);
**************
==============
tempDB.Sessions
**************
List of 72 instances of ISessionInfo {
  0: Xdg_Poisson_scaling	J262144_k2_exp_gmres_levelpmg	11/11/2020 22:53:00	b052003e...
  1: Xdg_Poisson_scaling	J32768_k3_classic_pardiso	11/11/2020 22:37:50	143c576d...
  2: Xdg_Poisson_scaling	J262144_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:37:44	9c82f65e...
  3: Xdg_Poisson_scaling	J110592_k3_exp_gmres_levelpmg	11/11/2020 22:53:03	4c33952f...
  4: Xdg_Poisson_scaling	J110592_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:42:54	f00ae1b4...
  5: Xdg_Poisson_scaling	J13824_k5_exp_Kcycle_schwarz_p1	11/11/2020 22:47:51	2949e104...
  6: Xdg_Poisson_scaling	J13824_k5_exp_gmres_levelpmg	11/11/2020 22:58:00	7e86ffc4...
  7: Xdg_Poisson_scaling	J110592_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:03	4ddbc11b...
  8: Xdg_Poisson_scaling	J110592_k2_exp_gmres_levelpmg	11/11/2020 22:53:01	d9114350...
  9: Xdg_Poisson_scaling	J4096_k5_exp_Kcycle_schwarz_p5	11/11/2020 23:08:05	5a6db82d...
  10: Xdg_Poisson_scaling	J32768_k3_exp_Kcycle_schwarz_p3	11/11/2020 23:03:10	21e476e5...
  11: Xdg_Poisson_scaling	J32768_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:09	d77d01f0...
  12: Xdg_Poisson_scaling	J512_k5_exp_Kcycle_schwarz_p5	11/11/2020 23:08:13	9fe2851e...
  13: Xdg_Poisson_scaling	J13824_k3_exp_Kcycle_schwarz_p3	11/11/2020 23:03:06	4db88446...
  14: Xdg_Poisson_scaling	J4096_k5_exp_gmres_levelpmg	11/11/2020 22:58:02	1e18f8e3...
  15: Xdg_Poisson_scaling	J32768_k5_exp_Kcycle_schwarz_p5*	11/11/2020 23:08:06	304ba182...
  16: Xdg_Poisson_scaling	J64_k5_exp_Kcycle_schwarz_p5	11/11/2020 23:08:10	498a0f38...
  17: Xdg_Poisson_scaling	J13824_k5_exp_Kcycle_schwarz_p5*	11/11/2020 23:08:12	8cb2b8c4...
  18: Xdg_Poisson_scaling	J512_k3_exp_Kcycle_schwarz_p3	11/11/2020 23:08:04	8157b6f2...
  19: Xdg_Poisson_scaling	J262144_k2_exp_Kcycle_schwarz_p2*	11/11/2020 23:03:03	12340b60...
  20: Xdg_Poisson_scaling	J64_k3_exp_Kcycle_schwarz_p3	11/11/2020 23:08:06	c4c540af...
  21: Xdg_Poisson_scaling	J32768_k3_exp_gmres_levelpmg	11/11/2020 22:52:57	c266ef73...
  22: Xdg_Poisson_scaling	J110592_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:37:50	371a16de...
  23: Xdg_Poisson_scaling	J13824_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:03	bf52ba79...
  24: Xdg_Poisson_scaling	J110592_k3_exp_Kcycle_schwarz_p3*	11/11/2020 23:03:11	9b623dc2...
  25: Xdg_Poisson_scaling	J4096_k3_exp_Kcycle_schwarz_p3	11/11/2020 23:03:02	bc1061e0...
  26: Xdg_Poisson_scaling	J512_k5_exp_gmres_levelpmg	11/11/2020 23:03:08	83d99301...
  27: Xdg_Poisson_scaling	J4096_k5_exp_Kcycle_schwarz_p1	11/11/2020 22:52:56	8878d9bd...
  28: Xdg_Poisson_scaling	J4096_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:03	adffe52d...
  29: Xdg_Poisson_scaling	J64_k5_exp_gmres_levelpmg	11/11/2020 23:03:06	a0528633...
  30: Xdg_Poisson_scaling	J4096_k5_classic_pardiso	11/11/2020 22:37:46	5ce14a2c...
  31: Xdg_Poisson_scaling	J512_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:09	2f7213dd...
  32: Xdg_Poisson_scaling	J64_k2_exp_Kcycle_schwarz_p2	11/11/2020 23:03:03	300b2a13...
  33: Xdg_Poisson_scaling	J32768_k2_exp_gmres_levelpmg	11/11/2020 22:52:59	18c77868...
  34: Xdg_Poisson_scaling	J4096_k3_exp_gmres_levelpmg	11/11/2020 22:58:01	358d1189...
  35: Xdg_Poisson_scaling	J32768_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:42:49	bc1d93ba...
  36: Xdg_Poisson_scaling	J13824_k3_exp_gmres_levelpmg	11/11/2020 22:52:58	49bbbff4...
  37: Xdg_Poisson_scaling	J32768_k5_exp_gmres_levelpmg*	11/11/2020 22:57:59	16f46510...
  38: Xdg_Poisson_scaling	J13824_k3_classic_pardiso	11/11/2020 22:42:54	6b00553f...
  39: Xdg_Poisson_scaling	J512_k3_exp_gmres_levelpmg	11/11/2020 22:57:58	63ce7d2f...
  40: Xdg_Poisson_scaling	J64_k3_exp_gmres_levelpmg	11/11/2020 22:58:05	8af5dee9...
  41: Xdg_Poisson_scaling	J13824_k2_exp_gmres_levelpmg	11/11/2020 22:52:58	2eb51322...
  42: Xdg_Poisson_scaling	J512_k5_exp_Kcycle_schwarz_p1	11/11/2020 22:53:01	8dfb8456...
  43: Xdg_Poisson_scaling	J4096_k2_exp_gmres_levelpmg	11/11/2020 22:52:57	db5cff36...
  44: Xdg_Poisson_scaling	J64_k5_exp_Kcycle_schwarz_p1	11/11/2020 22:52:58	7d6bcdbb...
  45: Xdg_Poisson_scaling	J512_k2_exp_gmres_levelpmg	11/11/2020 22:52:59	1f779afa...
  46: Xdg_Poisson_scaling	J64_k2_exp_gmres_levelpmg	11/11/2020 22:52:57	82ef5a81...
  47: Xdg_Poisson_scaling	J4096_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:47:55	c8abd99c...
  48: Xdg_Poisson_scaling	J13824_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:42:49	234cfe5b...
  49: Xdg_Poisson_scaling	J512_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:47:58	a075f358...
  50: Xdg_Poisson_scaling	J32768_k5_exp_Kcycle_schwarz_p1*	11/11/2020 22:47:50	fd7dbc93...
  51: Xdg_Poisson_scaling	J64_k3_exp_Kcycle_schwarz_p1	11/11/2020 22:47:56	8e6c7f71...
  52: Xdg_Poisson_scaling	J32768_k2_classic_pardiso	11/11/2020 22:32:50	f1f2ab41...
  53: Xdg_Poisson_scaling	J13824_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:42:47	b124196a...
  54: Xdg_Poisson_scaling	J32768_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:37:50	f7dab90d...
  55: Xdg_Poisson_scaling	J4096_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:42:47	6ec25ae4...
  56: Xdg_Poisson_scaling	J512_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:42:46	6ee7ea5d...
  57: Xdg_Poisson_scaling	J64_k2_exp_Kcycle_schwarz_p1	11/11/2020 22:42:51	9ec8db9e...
  58: Xdg_Poisson_scaling	J110592_k3_classic_pardiso*	11/11/2020 22:37:48	27aeed14...
  59: Xdg_Poisson_scaling	J4096_k3_classic_pardiso	11/11/2020 22:37:45	a29e17d3...
  60: Xdg_Poisson_scaling	J512_k5_classic_pardiso	11/11/2020 22:37:54	49c1fc66...
  61: Xdg_Poisson_scaling	J32768_k5_classic_pardiso*	11/11/2020 22:37:51	9bcb68c5...
  62: Xdg_Poisson_scaling	J512_k3_classic_pardiso	11/11/2020 22:37:50	ae1ae655...
  63: Xdg_Poisson_scaling	J262144_k2_classic_pardiso*	11/11/2020 22:32:50	08d4715f...
  64: Xdg_Poisson_scaling	J64_k5_classic_pardiso	11/11/2020 22:37:46	7fdb786e...
  65: Xdg_Poisson_scaling	J13824_k5_classic_pardiso*	11/11/2020 22:37:52	c0002167...
  66: Xdg_Poisson_scaling	J512_k2_classic_pardiso	11/11/2020 22:37:54	78ba3404...
  67: Xdg_Poisson_scaling	J64_k3_classic_pardiso	11/11/2020 22:37:46	5c42ee42...
  68: Xdg_Poisson_scaling	J13824_k2_classic_pardiso	11/11/2020 22:32:46	63c8e45f...
  69: Xdg_Poisson_scaling	J110592_k2_classic_pardiso*	11/11/2020 22:32:46	348645b4...
  70: Xdg_Poisson_scaling	J4096_k2_classic_pardiso	11/11/2020 22:32:46	4aaacd10...
  71: Xdg_Poisson_scaling	J64_k2_classic_pardiso	11/11/2020 22:32:50	49b44f2c...
}
==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 9 instances of IGridInfo {
  0: { Guid = 815c2449-5d68-474a-8553-56eee003ef4e; Name = Xdg_Poisson_scaling_J262144; Cell Count = 262144; Dim = 3 }
  1: { Guid = b36cb0e0-581d-4517-a051-260744607d8c; Name = Xdg_Poisson_scaling_J110592; Cell Count = 110592; Dim = 3 }
  2: { Guid = 1a0b83a4-14c8-480d-a807-44ef4b31969c; Name = Xdg_Poisson_scaling_J32768; Cell Count = 32768; Dim = 3 }
  3: { Guid = 56896b71-d068-4c9c-af6e-0a490e72c960; Name = Xdg_Poisson_scaling_J13824; Cell Count = 13824; Dim = 3 }
  4: { Guid = d9c4e32e-01a2-4538-89c3-3df94687a80c; Name = Xdg_Poisson_scaling_J4096; Cell Count = 4096; Dim = 3 }
  5: { Guid = b08dbdf4-e7dd-4762-a9a9-65c08c1bd031; Name = Xdg_Poisson_scaling_J512; Cell Count = 512; Dim = 3 }
  6: { Guid = cd18e3fd-0adf-4a83-a592-168e46d80a29; Name = Xdg_Poisson_scaling_J64; Cell Count = 64; Dim = 3 }
  7: { Guid = 4197351a-c11d-4ade-813a-249e3eef03f4; Name = Xdg_pLow_study_J4096; Cell Count = 4096; Dim = 3 }
  8: { Guid = 529dc7dc-7f52-4754-a746-dac78663f6aa; Name = Xdg_pLow_study_J512; Cell Count = 512; Dim = 3 }
}
==============
double xMax = 1.0, yMax = 1.0, zMax=1.0;
double xMin = -1.0, yMin = -1.0,zMin = -1.0;
**************
==============
**************
==============
**************
==============
var res = new int[] { 8,16};
**************
==============
int[] Resolutions_3D = res;
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    double[] xNodes = GenericBlas.Linspace(xMin, xMax, Res + 1);
    double[] yNodes = GenericBlas.Linspace(yMin, yMax, Res + 1);
    double[] zNodes = GenericBlas.Linspace(zMin, zMax, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt]=null;
    foreach(IGridInfo grd in tempDB.Grids){
        bool check = grd.Name.Contains(string.Format("_J"+ J));
        if(check){
          //grids[cnt]=grd;
        }
    }
    
    //grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.Name = GridName;
        g.EdgeTagNames.Add(1, "Dirichlet");   
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            ret = 1;
            return ret;
        });
      
        tempDB.SaveGrid(ref g, true);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Creating grid with 512 cells.
Grid Edge Tags changed.
Creating grid with 4096 cells.
Grid Edge Tags changed.

==============
tempDB.Grids;
**************
List of 2 instances of IGridInfo {
  0: { Guid = 4197351a-c11d-4ade-813a-249e3eef03f4; Name = Xdg_pLow_study_J4096; Cell Count = 4096; Dim = 3 }
  1: { Guid = 529dc7dc-7f52-4754-a746-dac78663f6aa; Name = Xdg_pLow_study_J512; Cell Count = 512; Dim = 3 }
}
==============
// Overwrite Selection
//var ListOfgrids = new List<IGridInfo>();
//ListOfgrids.AddRange(tempDB.Grids.Pick(2));
//IGridInfo[] grids = ListOfgrids.ToArray();
**************
==============
grids;
**************
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0,0});
**************
0
==============
**************
==============
**************
==============
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<XdgPoisson3Control> controls = new List<XdgPoisson3Control>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
int[] PolyDegS = new int[] {2,3,5};
int[] NoOfSblocks = new int[]{2,4,8,16,32};
**************
==============
// Solvers which we want to instrument:
LinearSolverCode[] solver_nameS = new LinearSolverCode[] {
    //LinearSolverCode.classic_pardiso, 
    //LinearSolverCode.classic_mumps, 
    LinearSolverCode.exp_Kcycle_schwarz, 
    //LinearSolverCode.exp_gmres_levelpmg, 
}; 
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
int MaxDof = 3000000;
**************
==============
using BoSSS.Solution.XNSECommon;
using BoSSS.Foundation.XDG;
**************
(1,2): warning CS0105: The using directive for `BoSSS.Solution.XNSECommon' appeared previously in this namespace
(2,1): warning CS0105: The using directive for `BoSSS.Foundation.XDG' appeared previously in this namespace
No. of errors|warnings: 0|2.

==============
controls.Clear();
foreach(LinearSolverCode solver_name in solver_nameS) {
foreach(int k in PolyDegS) {    
foreach(IGridInfo grd in grids) {
foreach(int nsb in NoOfSblocks){
for(int pLow=0;pLow<=k;pLow++){
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    int sBlocksize  = J*Np/nsb;
    string caseName = string.Format("J{0}_k{1}_{2}_pLow{3}_sBlocks{4}", J, k, solver_name,pLow,nsb);
    Console.WriteLine("setting up: " + caseName);
    Console.WriteLine("based on grid: "+grd.Name);

    var ctrl = new XdgPoisson3Control();
    
    
    ctrl.AlternateDbPaths = new[]{
        new ValueTuple<string,string>(linpath, ""),
        new ValueTuple<string,string>(winpath, "pcmit32")
    };
    ctrl.savetodb = true;
    ctrl.GridGuid = grd.ID;
    
    ctrl.FieldOptions.Add("Phi", new FieldOpts() {
         Degree = 2,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });
    ctrl.FieldOptions.Add("u", new FieldOpts() {
         Degree = k,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });

    ctrl.LinearSolver.SolverCode           = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels  = 10;
    ctrl.LinearSolver.TargetBlockSize      = sBlocksize;
    ctrl.LinearSolver.ConvergenceCriterion = 1e-8;
    
    double radius           = 0.7;
    ctrl.ExcactSolSupported = false;
    ctrl.InitialValues.Add("Phi", new Formula("X => X[0].Pow2()+X[1].Pow2()+X[2].Pow2()-"+radius+".Pow2()"));
    ctrl.MU_A = -1;
    ctrl.MU_B = -1000;
    ctrl.InitialValues.Add("rhs#A", new Formula("X => 1"));
    ctrl.InitialValues.Add("rhs#B", new Formula("X => 1"));
    ctrl.InitialValues.Add("u#A", new Formula ("X => 0"));
    ctrl.InitialValues.Add("u#B", new Formula ("X => 0"));
    ctrl.CutCellQuadratureType = XQuadFactoryHelper.MomentFittingVariants.Saye;
    ctrl.SetDefaultDiriBndCnd  = true;
    //ctrl.TracingNamespaces     = "*";
    
    ctrl.ViscosityMode = XLaplace_Interface.Mode.SIP;
    ctrl.SessionName   = caseName;
    ctrl.ProjectName   = WFlowName;
    ctrl.GridPartType  = BoSSS.Foundation.Grid.GridPartType.METIS;
    
    ctrl.AgglomerationThreshold = 0.1;
    
    controls.Add(ctrl);
}
}
}
}
}
**************
System.NullReferenceException occurred: Object reference not set to an instance of an object.. Type 'LastError' for details.

==============
//controls[0].SessionName+="_METIS";
//controls[1].GridPartType = BoSSS.Foundation.Grid.GridPartType.Predefined;
//controls[1].GridPartOptions = "hallo";
//controls[1].SessionName+="_predef";
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
//var solver = new XdgPoisson3Main();
//solver.Init(controls[0]);
//solver.RunSolverMode();
//solver.Dispose();
**************
==============
//WorkflowMgm.AllJobs.Pick(0);
//WorkflowMgm.AllJobs.Pick(0).Value.Stdout;
//WorkflowMgm.AllJobs.Pick(0).Value.Stderr;
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("softpcg") && s.Name.Contains("k2") && s.Name.Contains("mg"));//.ForEach(si => si.Delete(true));
//tempDB.Sessions.Where(s => s.Name.Contains("exp_direct")).ForEach(si => si.Delete());
**************
==============
LastError
**************
System.NullReferenceException: Object reference not set to an instance of an object.
   at <InteractiveExpressionClass>.Host(Object& $retval)
   at Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   at BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:line 353
==============
**************
==============
foreach(var ctrl in controls) {
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    var aJob = new Job(ctrl.SessionName, typeof(XdgPoisson3Main));
    aJob.SetControlObject(ctrl);
    ((SlurmClient)ExecutionQueues[1]).SlurmAccount = "project01217";  // Jens 
    aJob.NumberOfMPIProcs         = 1;
    aJob.ExecutionTime            = "02:00:00";
    aJob.MemPerCPU                = "2500";
    aJob.UseComputeNodesExclusive = true;
    aJob.Activate(myBatch);
}
**************
 Submitting: J4096_k5_classic_pardiso
Job not submitted yet, or no result session is known - starting submission.

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_single_test-XdgPoisson32020Sep21_184929
copied 30 files.
   written file: control.obj
deployment finished.

15691774
 Submitting: J4096_k5_exp_Kcycle_schwarz
Job not submitted yet, or no result session is known - starting submission.

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_single_test-XdgPoisson32020Sep21_184936
copied 30 files.
   written file: control.obj
deployment finished.

15691775
 Submitting: J4096_k5_exp_gmres_levelpmg
Job not submitted yet, or no result session is known - starting submission.

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_single_test-XdgPoisson32020Sep21_184939
copied 30 files.
   written file: control.obj
deployment finished.

15691776

==============
**************
==============
LastError
**************
==============
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(s=>Console.WriteLine(s.Value.Name +"Status: "+s.Value.Status));
//somelist.ForEach(s=>Console.WriteLine(s.Value.Name));
**************
==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed))
**************
(1,63): error CS0117: `BoSSS.Application.BoSSSpad.JobStatus' does not contain a definition for `Failed'
B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\bin\Release\BoSSSpad.exe (Location of the symbol related to previous error)
No. of errors|warnings: 1|0.

==============
using System.IO
**************
==============
//write out stout
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
//var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.FinishedSuccess));
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stderr.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stderr_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed))
**************
(1,63): error CS0117: `BoSSS.Application.BoSSSpad.JobStatus' does not contain a definition for `Failed'
B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\bin\Release\BoSSSpad.exe (Location of the symbol related to previous error)
No. of errors|warnings: 1|0.

==============
//write out stdout of Failed Jobs
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed));
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stdout.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stout_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
Renci.SshNet.Common.SshConnectionException occurred: Client not connected.. Type 'LastError' for details.

==============
//tempDB.Projects.Where(p=>p.Key.Equals(WFlowName)).Pick(0).Value;
tempDB.Projects.Pick(0).Value.RunningOrCrashed().ForEach(s=>s.Delete(true));
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed().ForEach(s=>s.ProjectName=WFlowName+"_failed");
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName+"_failed")).Pick(0).Value
**************
System.ArgumentOutOfRangeException occurred: Specified argument was out of the range of valid values.
Parameter name: index. Type 'LastError' for details.

==============
tempDB.Projects.Where(p=>p.Key.Equals(WFlowName)).Pick(0).Value
**************
System.ArgumentOutOfRangeException occurred: Specified argument was out of the range of valid values.
Parameter name: index. Type 'LastError' for details.

==============
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed();
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.RunningOrCrashed().DeleteAll();
//WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
//WorkflowMgm.AllJobs.Where(s => s.Value.Status.Equals(JobStatus.InProgress)).Pick(0).Value.Stdout;
//WorkflowMgm.AllJobs.Pick(0).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
72
==============
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4);
//tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4).OpenSessionDirectory();
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value.Pick(4).Timesteps.Last().Fields.Pick(1).Coordinates.NoOfCols;
**************
40
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
//tempDB.Projects.Pick(0).Value.Pick(0).KeysAndQueries;
//tempDB.Projects.Where(p=>p.Key.Equals(WFlowName)).Pick(0).Value.Pick(0).KeysAndQueries;
**************
==============
using ilPSP.Tracing;
**************
(1,2): warning CS0105: The using directive for `ilPSP.Tracing' appeared previously in this namespace
No. of errors|warnings: 0|1.

==============
static class AddCols {
    static public double _getMaxTime(ISessionInfo SI, string method, bool exclusive) {
         double maxTime = 0.0;
         var mcr        = SI.GetProfiling();
                // Iterate over MPIs
                for (int j = 0; j < mcr.Count(); j++) {
                    MethodCallRecord value;
                    // Iterate over methods
                        // Get execution time of current method for current processor
                        double tempTime;
                        //double tempFractions;
                        int occurence        = 1;

                        value = mcr[j].FindChild(method);
                        if (value == null) {
                            value = mcr[j];
                        }
                        if (exclusive) {
                            tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeExclusive.TotalSeconds).Pick(occurence-1).TimeExclusive.TotalSeconds;
                             
                        } else {
                             tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeSpentInMethod.TotalSeconds).Pick(occurence-1).TimeSpentInMethod.TotalSeconds;
                               
         
                        }
                        // Only save execution time if it is the highest value of all processor times
                        if (tempTime > maxTime) {
                            maxTime = tempTime;
                        }
                    }
                    return maxTime;
    }
    static public double _getSumTime(ISessionInfo SI, string method, bool exclusive){
                    double sumoftime = 0.0;
                    var mcr          = SI.GetProfiling();
                    // Iterate over MPIs
                    //if(mcr.Count()!=4)
                    //    SI.Delete(true);
                    
                    for (int j = 0; j < mcr.Count(); j++) {
                        MethodCallRecord value;
                        // Iterate over methods
                        // Get execution time of current method for current processor
                        double tempTime = 0;
                        //double tempFractions;
                        int occurence        = 1;
                    
                    try{
                        value = mcr[j].FindChild(method);
                        if (value == null) {
                            value = mcr[j];
                        }
                        if (exclusive) {
                            tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeExclusive.TotalSeconds).Pick(occurence-1).TimeExclusive.TotalSeconds;
                        } else {
                            tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeSpentInMethod.TotalSeconds).Pick(occurence-1).TimeSpentInMethod.TotalSeconds;   
                        }
                    } catch(Exception e){
                        //Console.WriteLine("count: "+mcr.Count());
                        //Console.WriteLine(e);
                        Console.WriteLine(SI.Name);
                        Console.WriteLine(SI.ID);
                        SI.Delete(true);
                    }
                        sumoftime+=tempTime;
                    }
                    
        return sumoftime;
        
    }
    //Max of Times
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        return (double)_getMaxTime(SI,"XdgMatrixAssembly",false);
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        return (double)_getMaxTime(SI,"Aggregation_basis_init",false);
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        return (double)_getMaxTime(SI,"Solver_Init",false);
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        return (double)_getMaxTime(SI,"Solver_Run",false);
    }
    static public object ExperimentalSolve(ISessionInfo SI) {
        return (double)_getMaxTime(SI,"BoSSS.Application.XdgPoisson3.XdgPoisson3Main.ExperimentalSolver",false);
    }
    //Sum of times
    static public object SumOfSipMatrixAssembly_time(ISessionInfo SI){
        return (double)_getSumTime(SI,"XdgMatrixAssembly",false);
    }
     static public object SumOfAggregation_basis_init_time(ISessionInfo SI){
        return (double)_getSumTime(SI,"Aggregation_basis_init",false);
    }
     static public object SumOfSolver_Init_time(ISessionInfo SI){
        return (double)_getSumTime(SI,"Solver_Init",false);
    }
     static public object SumOfSolver_Run_time(ISessionInfo SI){
        return (double)_getSumTime(SI,"Solver_Run",false);
    }
    static public object SumExperimentalSolve(ISessionInfo SI) {
        return (double)_getSumTime(SI,"BoSSS.Application.XdgPoisson3.XdgPoisson3Main.ExperimentalSolver",false);
    }
}
**************
(58,39): warning CS0168: The variable `e' is declared but never used
No. of errors|warnings: 0|1.

==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
//Max Times
WorkflowMgm.AdditionalSessionTableColums.Add("MaxMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add("MaxAggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add("MaxSolver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add("MaxSolver_Run_time", AddCols.Solver_Run_time);
WorkflowMgm.AdditionalSessionTableColums.Add("MaxRunSolver",AddCols.ExperimentalSolve);
//Sum of times
WorkflowMgm.AdditionalSessionTableColums.Add("SumMatrixAssembly_time", AddCols.SumOfSipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add("SumAggregation_basis_init_time", AddCols.SumOfAggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add("SumSolver_Init_time", AddCols.SumOfSolver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add("SumSolver_Run_time", AddCols.SumOfSolver_Run_time);
WorkflowMgm.AdditionalSessionTableColums.Add("SumRunSolver",AddCols.SumExperimentalSolve);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
J32768_k5_exp_Kcycle_schwarz_p1
fd7dbc93-aef2-4ed6-8b44-1ebfa9817e61
Session fd7dbc93-aef2-4ed6-8b44-1ebfa9817e61 deleted.

==============
SessTab.Rows.Count;
**************
72
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
(1,2): warning CS0105: The using directive for `System.IO' appeared previously in this namespace
No. of errors|warnings: 0|1.

==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
LastError;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
