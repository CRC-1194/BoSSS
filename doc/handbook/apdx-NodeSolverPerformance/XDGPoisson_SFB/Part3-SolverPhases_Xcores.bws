restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 2 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  1: { Session Count = 0; Grid Count = 2; Path = V:\Test4Anne\DB_Rheology }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("Xdg_4cores_run0");
**************
Project name is set to 'Xdg_4cores_run0'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2019-12-9";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
int solver1 = ((int) LinearSolverCode.exp_Kcycle_schwarz);
**************
==============
int solver2 = ((int) LinearSolverCode.exp_gmres_levelpmg);
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 93 instances of String {
  0: SessionName
  1: DGdegree:Phi
  2: DGdegree:u
  3: GeneratedFromCode
  4: ControlFileText_Index
  5: dtFixed
  6: TimesteppingMode
  7: SetDefaultDiriBndCnd
  8: ViscosityMode
  9: MU_A
  10: MU_B
  11: ExcactSolSupported
  12: PrePreCond
  13: AgglomerationThreshold
  14: penalty_multiplyer
  15: pOff
  16: SuppressExceptionPrompt
  17: GridPartType
  18: ProjectName
  19: NoOfTimesteps
  20: Endtime
  21: saveperiod
  22: rollingSaves
  23: dtMin
  24: dtMax
  25: ImmediatePlotPeriod
  26: SuperSampling
  27: savetodb
  28: logFileDirectory
  29: Paramstudy_ContinueOnError
  30: LinearSolver.verbose
  31: LinearSolver.MaxKrylovDim
  32: LinearSolver.MaxSolverIterations
  33: LinearSolver.MinSolverIterations
  34: LinearSolver.ConvergenceCriterion
  35: LinearSolver.SolverCode
  36: LinearSolver.NoOfMultigridLevels
  37: LinearSolver.exp_localPrec_muA
  38: LinearSolver.exp_localPrec_Min_dt
  39: LinearSolver.TargetBlockSize
  40: LinearSolver.Parallelism
  41: NonLinearSolver.verbose
  42: NonLinearSolver.PrecondSolver.verbose
  43: NonLinearSolver.PrecondSolver.MaxKrylovDim
  44: NonLinearSolver.PrecondSolver.MaxSolverIterations
  45: NonLinearSolver.PrecondSolver.MinSolverIterations
  46: NonLinearSolver.PrecondSolver.ConvergenceCriterion
  47: NonLinearSolver.PrecondSolver.SolverCode
  48: NonLinearSolver.PrecondSolver.NoOfMultigridLevels
  49: NonLinearSolver.PrecondSolver.exp_localPrec_muA
  50: NonLinearSolver.PrecondSolver.exp_localPrec_Min_dt
  51: NonLinearSolver.PrecondSolver.TargetBlockSize
  52: NonLinearSolver.PrecondSolver.Parallelism
  53: NonLinearSolver.MaxSolverIterations
  54: NonLinearSolver.MinSolverIterations
  55: NonLinearSolver.ConvergenceCriterion
  56: NonLinearSolver.UnderRelax
  57: NonLinearSolver.SolverCode
  58: NonLinearSolver.constantNewtonIterations
  59: NonLinearSolver.UsePresRefPoint
  60: DynamicLoadBalancing_RedistributeAtStartup
  61: DynamicLoadBalancing_Period
  62: DynamicLoadBalancing_ImbalanceThreshold
  63: DynamicLoadBalancing_On
  64: AdaptiveMeshRefinement
  65: AMR_startUpSweeps
  66: CutCellQuadratureType
  67: ContinueOnIoError
  68: Grid:NoOfCells
  69: Grid:hMax
  70: Grid:hMin
  71: UsedNoOfMultigridLevels
  72: maxBlkSize
  73: minBlkSize
  74: NumberOfMatrixBlox
  75: NoOfCutCellBlocks
  76: DOFs
  77: minSolRunT
  78: maxSolRunT
  79: Conv
  80: NoIter
  81: maxMultigridlvl
  82: RegularTerminated
  83: MaxMatrixAssembly_time
  84: MaxAggregation_basis_init_time
  85: MaxSolver_Init_time
  86: MaxSolver_Run_time
  87: MaxRunSolver
  88: SumMatrixAssembly_time
  89: SumAggregation_basis_init_time
  90: SumSolver_Init_time
  91: SumSolver_Run_time
  92: SumRunSolver
}
==============
//var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (  (Convert.ToInt32(row["LinearSolver.SolverCode"]) ==  solver1)
          || (Convert.ToInt32(row["LinearSolver.SolverCode"]) ==  solver2))
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", 
              "minSolRunT", "UsedNoOfMultigridLevels",
              "MaxMatrixAssembly_time", "MaxAggregation_basis_init_time", "MaxSolver_Init_time", "MaxSolver_Run_time",
              "SumMatrixAssembly_time", "SumAggregation_basis_init_time", "SumSolver_Init_time", "SumSolver_Run_time"
              );
**************
==============
SubTab.Print();
**************
    DGdegree:u Grid:NoOfCells LinearSolver.SolverCode DOFs   minSolRunT   UsedNoOfMultigridLevels MaxMatrixAssembly_time MaxAggregation_basis_init_time MaxSolver_Init_time MaxSolver_Run_time SumMatrixAssembly_time SumAggregation_basis_init_time SumSolver_Init_time SumSolver_Run_time 
0:  3          32768          41                      678080 4311.2578927 6                       60.4903298             7.8588847                      6.9791841           4296.019252        239.4666483            30.740697                      27.9153012          17184.0615934      
1:  5          4096           41                      245504 2824.8744243 5                       64.6037965             11.3691675                     6.1216068           2813.0945929       256.5985798            45.2727936                     24.4765736          11252.3483575      
2:  2          32768          41                      339040 190.6200107  6                       29.1721114             3.481073                       3.9390504           182.2023237        116.0332583            13.784434                      15.755155           728.8051067        
3:  5          4096           47                      245504 264.1723571  5                       64.5558347             11.403268                      0.2565432           258.3618767        256.7202041            45.4796928                     1.0178163           1033.3593633       
4:  5          512            41                      33152  46.9964002   4                       12.2524324             1.8843994                      1.4874404           44.4690796         48.5671832             7.5371779                      5.9463508           177.8694273        
5:  3          32768          47                      678080 267.465625   6                       60.3478361             7.7532024                      1.3871874           257.7730134        239.5404954            30.5564331                     5.5059721           1031.0106657       
6:  5          64             41                      4928   28.141541    3                       3.4628047              0.1788986                      0.4175758           27.4757004         13.8066849             0.7124126                      1.661843            109.8781227        
7:  3          4096           41                      87680  46.5739332   5                       12.2556053             0.8332079                      1.2357658           44.1210178         48.5653302             3.3130305                      4.8904599           176.3264144        
8:  5          8              41                      896    1.6999191    2                       0.9514869              0.023729                       0.0787858           1.5361838          3.7920476              0.0948678                      0.3144089           6.1426726          
9:  3          512            41                      11840  4.6034876    4                       2.4353059              0.108333                       0.2647486           4.1223936          9.6474156              0.3876992                      1.0527312           16.4713076         
10: 3          64             41                      1760   1.8949427    3                       0.7394894              0.032972                       0.0611548           1.7788368          2.9497889              0.1309433                      0.244363            7.1148201          
11: 3          8              41                      320    0.2615684    2                       0.2817005              0.0224289                      0.0262871           0.1773172          1.1217508              0.0831794                      0.1050365           0.7092039          
12: 2          4096           41                      43840  9.2288334    5                       5.7578259              0.2625304                      0.7376985           7.8630303          22.7525673             1.0465608                      2.9502983           31.4515259         
13: 2          512            41                      5920   1.3611543    4                       1.221748               0.0368013                      0.129076            1.1290272          4.7899845              0.1453816                      0.5002712           4.4683149          
14: 2          64             41                      880    0.3700064    3                       0.4196371              0.0108638                      0.0427275           0.2825704          1.673795               0.043376                       0.17044             1.1295375          
15: 2          8              41                      160    0.1833122    2                       0.2172517              0.0088138                      0.0219427           0.0998847          0.8664586              0.0351453                      0.0871278           0.3991876          
16: 2          32768          47                      339040 105.6249796  6                       29.4885626             3.4528637                      1.1400683           99.9743937         116.5994437            13.6990833                     4.525568            399.8432103        
17: 5          512            47                      33152  14.1592872   4                       12.2487293             1.493207                       0.0466249           13.0618526         48.7429201             5.9552845                      0.1814792           52.2457274         
18: 3          4096           47                      87680  15.3541329   5                       12.2739846             0.8333842                      0.1299542           13.9718483         48.5889293             3.2995806                      0.4945234           55.8828087         
19: 5          8              47                      896    6.2585177    2                       0.9500914              0.0247703                      0.0131978           6.1627701          3.793994               0.0989505                      0.0506873           24.6510603         
20: 3          512            47                      11840  1.8296474    4                       2.4268651              0.0934152                      0.0289743           1.601783           9.5892285              0.3699213                      0.110973            6.4028518          
21: 3          64             47                      1760   11.7565141   3                       0.7329972              0.0342562                      0.0140766           11.6886993         2.9266577              0.1216649                      0.0559995           46.7546933         
22: 3          8              47                      320    0.153949     2                       0.2838099              0.0143149                      0.0123682           0.0857931          1.1307961              0.0570532                      0.0477837           0.343146           
23: 2          4096           47                      43840  7.1394411    5                       5.7890942              0.262464                       0.1029051           6.4263464          22.8709189             1.0458657                      0.3987015           25.6882274         
24: 2          512            47                      5920   0.750489     4                       1.2116705              0.0369202                      0.0238666           0.6184616          4.7553361              0.1442392                      0.0905309           2.4707341          
25: 2          64             47                      880    0.19683      3                       0.4286329              0.0109982                      0.0169112           0.1395293          1.7053401              0.0438221                      0.0639505           0.5567797          
26: 2          8              47                      160    0.1415001    2                       0.2149983              0.0088633                      0.0131982           0.0672402          0.8577281              0.035419                       0.0488619           0.2686791          
==============
SubTab.ToCSVFile(@"V:\ResHHLR\Xdg_4cores_run0\Results\Methods.txt");
**************
==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:u";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
var Solvers = new LinearSolverCode[] {
(LinearSolverCode)solver1,
(LinearSolverCode)solver2
};
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = DGdegrees.Length;
int columns = 1;

Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
AllMultiplots[iPlot] = multiplots;
int pDegree = 0;

for(int iRow = 0; iRow < rows; iRow++) {
int iCol = 0; 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k                        = Convert.ToInt32(Row["DGdegree:u"]);
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
      
           if(    k != DGdegrees[pDegree] 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           if(Convert.ToInt32(Row["Grid:NoOfCells"])==8){
               System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
                   xValue = 0;
                yValue = 0;
               return;
               }

           double mtxAssi  = Convert.ToDouble(Row["MaxMatrixAssembly_time"]);
           double aggBinit = Convert.ToDouble(Row["MaxAggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["MaxSolver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["MaxSolver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", DGdegrees[pDegree]);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 1e-2;
    multiplots[iRow,0].YrangeMax = 1e+5;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    multiplots[iRow,iCol].LegendFont=12;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    
    pDegree++;                       
}
}
;
AllMultiplots[0].PlotNow()
**************
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
Using gnuplot: V:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.Drawing.Bitmap
==============
var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.PlotNow();
**************
Using gnuplot: V:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "Main_Kcycle_Schwarz.tex"),
    "Kcycle_Schwarz.tex");
**************
==============
//CL.WriteMinimalCompileableExample("C:\\tmp\\Schwarz" + dateString + ".tex");
**************
==============
**************
==============
**************
==============
var CL = AllMultiplots[1].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.PlotNow();
**************
Using gnuplot: V:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
LastError;
**************
System.ComponentModel.Win32Exception (0x80004005): The system cannot find the file specified
   at System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   at BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in V:\BoSSS-HHLR\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:line 325
   at <InteractiveExpressionClass>.Host(Object& $retval)
   at Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   at BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in V:\BoSSS-HHLR\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:line 346
==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "Main_gmres_pMG.tex"),
    "gmres_pMG.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
