restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 3 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  1: { Session Count = 45; Grid Count = 132; Path = G:\DB_Cube }
  2: { Session Count = 4; Grid Count = 1; Path = G:\Performance_DB }
}

 Console ready for input. Type 'help' for help.

==============
string WFlowName = "Xdg_SingleNodePerformance_0_1";
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'Xdg_SingleNodePerformance_0_1'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2019-9-20";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 82 instances of String {
  0: SessionName
  1: DGdegree:Phi
  2: DGdegree:u
  3: GeneratedFromCode
  4: ControlFileText_Index
  5: dtFixed
  6: SetDefaultDiriBndCnd
  7: ViscosityMode
  8: MU_A
  9: MU_B
  10: ExcactSolSupported
  11: PrePreCond
  12: AgglomerationThreshold
  13: penalty_multiplyer
  14: pOff
  15: SuppressExceptionPrompt
  16: GridPartType
  17: ProjectName
  18: NoOfTimesteps
  19: Endtime
  20: saveperiod
  21: rollingSaves
  22: dtMin
  23: dtMax
  24: CompMode
  25: ImmediatePlotPeriod
  26: SuperSampling
  27: savetodb
  28: logFileDirectory
  29: Paramstudy_ContinueOnError
  30: LinearSolver.verbose
  31: LinearSolver.MaxKrylovDim
  32: LinearSolver.MaxSolverIterations
  33: LinearSolver.MinSolverIterations
  34: LinearSolver.ConvergenceCriterion
  35: LinearSolver.SolverCode
  36: LinearSolver.NoOfMultigridLevels
  37: LinearSolver.exp_localPrec_muA
  38: LinearSolver.exp_localPrec_Min_dt
  39: LinearSolver.TargetBlockSize
  40: NonLinearSolver.verbose
  41: NonLinearSolver.PrecondSolver.verbose
  42: NonLinearSolver.PrecondSolver.MaxKrylovDim
  43: NonLinearSolver.PrecondSolver.MaxSolverIterations
  44: NonLinearSolver.PrecondSolver.MinSolverIterations
  45: NonLinearSolver.PrecondSolver.ConvergenceCriterion
  46: NonLinearSolver.PrecondSolver.SolverCode
  47: NonLinearSolver.PrecondSolver.NoOfMultigridLevels
  48: NonLinearSolver.PrecondSolver.exp_localPrec_muA
  49: NonLinearSolver.PrecondSolver.exp_localPrec_Min_dt
  50: NonLinearSolver.PrecondSolver.TargetBlockSize
  51: NonLinearSolver.MaxSolverIterations
  52: NonLinearSolver.MinSolverIterations
  53: NonLinearSolver.ConvergenceCriterion
  54: NonLinearSolver.UnderRelax
  55: NonLinearSolver.SolverCode
  56: DynamicLoadBalancing_RedistributeAtStartup
  57: DynamicLoadBalancing_Period
  58: DynamicLoadBalancing_ImbalanceThreshold
  59: DynamicLoadBalancing_On
  60: AdaptiveMeshRefinement
  61: AMR_startUpSweeps
  62: CutCellQuadratureType
  63: ContinueOnIoError
  64: Grid:NoOfCells
  65: Grid:hMax
  66: Grid:hMin
  67: UsedNoOfMultigridLevels
  68: maxBlkSize
  69: minBlkSize
  70: NumberOfMatrixBlox
  71: DOFs
  72: minSolRunT
  73: maxSolRunT
  74: Conv
  75: NoIter
  76: maxMultigridlvl
  77: RegularTerminated
  78: SipMatrixAssembly_time
  79: Aggregation_basis_init_time
  80: Solver_Init_time
  81: Solver_Run_time
}
==============
var SubTab_1 = SessTab.ExtractColumns("SessionName","DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("SessionName","DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    SessionName                                     DGdegree:u Grid:NoOfCells LinearSolver.SolverCode DOFs   minSolRunT   maxSolRunT   NoIter 
0:  XdgPoissonVelocity_J32768_k3_classic_pardiso    3          32768          2                       678080 7474.7656433 7474.7656433 1      
1:  XdgPoissonVelocity_J32768_k2_exp_Kcycle_schwarz 2          32768          41                      339040 119.5412206  119.5412206  8      
2:  XdgPoissonVelocity_J64_k5_exp_Kcycle_schwarz    5          64             41                      4928   1.8388327    1.8388327    1      
3:  XdgPoissonVelocity_J8_k5_exp_Kcycle_schwarz     5          8              41                      896    0.5166903    0.5166903    1      
4:  XdgPoissonVelocity_J32768_k2_exp_gmres_levelpmg 2          32768          47                      339040 176.1591577  176.1591577  152    
5:  XdgPoissonVelocity_J64_k3_exp_Kcycle_schwarz    3          64             41                      1760   0.3325719    0.3325719    1      
6:  XdgPoissonVelocity_J32768_k2_classic_pardiso    2          32768          2                       339040 767.2806587  767.2806587  1      
7:  XdgPoissonVelocity_J8_k3_exp_Kcycle_schwarz     3          8              41                      320    0.2269022    0.2269022    1      
8:  XdgPoissonVelocity_J512_k2_exp_Kcycle_schwarz   2          512            41                      5920   0.6934921    0.6934921    1      
9:  XdgPoissonVelocity_J64_k2_exp_Kcycle_schwarz    2          64             41                      880    0.2247915    0.2247915    1      
10: XdgPoissonVelocity_J8_k2_exp_Kcycle_schwarz     2          8              41                      160    0.4661312    0.4661312    1      
11: XdgPoissonVelocity_J512_k5_exp_gmres_levelpmg   5          512            47                      33152  107.4395684  107.4395684  1185   
12: XdgPoissonVelocity_J4096_k3_exp_gmres_levelpmg  3          4096           47                      87680  50.4995927   50.4995927   306    
13: XdgPoissonVelocity_J512_k3_exp_gmres_levelpmg   3          512            47                      11840  3.0388523    3.0388523    95     
14: XdgPoissonVelocity_J8_k3_exp_gmres_levelpmg     3          8              47                      320    0.4753072    0.4753072    41     
15: XdgPoissonVelocity_J64_k2_exp_gmres_levelpmg    2          64             47                      880    0.5074377    0.5074377    35     
16: XdgPoissonVelocity_J8_k2_exp_gmres_levelpmg     2          8              47                      160    0.4584302    0.4584302    14     
17: XdgPoissonVelocity_J512_k5_classic_pardiso      5          512            2                       33152  26.9058707   26.9058707   1      
18: XdgPoissonVelocity_J4096_k3_classic_pardiso     3          4096           2                       87680  85.6159709   85.6159709   1      
19: XdgPoissonVelocity_J64_k5_classic_pardiso       5          64             2                       4928   1.8014944    1.8014944    1      
20: XdgPoissonVelocity_J8_k5_classic_pardiso        5          8              2                       896    0.4364679    0.4364679    1      
21: XdgPoissonVelocity_J512_k3_classic_pardiso      3          512            2                       11840  2.1267044    2.1267044    1      
22: XdgPoissonVelocity_J64_k3_classic_pardiso       3          64             2                       1760   0.3109482    0.3109482    1      
23: XdgPoissonVelocity_J8_k3_classic_pardiso        3          8              2                       320    0.2252675    0.2252675    1      
24: XdgPoissonVelocity_J4096_k2_classic_pardiso     2          4096           2                       43840  12.7883562   12.7883562   1      
25: XdgPoissonVelocity_J512_k2_classic_pardiso      2          512            2                       5920   0.8089553    0.8089553    1      
26: XdgPoissonVelocity_J64_k2_classic_pardiso       2          64             2                       880    0.230206     0.230206     1      
27: XdgPoissonVelocity_J8_k2_classic_pardiso        2          8              2                       160    0.3169032    0.3169032    1      
==============
//Extract to excel-File
//SubTab.ToCSVFile(WFlowName);
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "LinearSolver.SolverCode", "DGdegree:u"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:u";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = 3;
int columns = 1;
LinearSolverCode[] ignore_solvers = {LinearSolverCode.classic_cg, LinearSolverCode.exp_softpcg_schwarz, LinearSolverCode.exp_direct_lapack};

Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
int pDegree = 0;
for(int iRow = 0; iRow < rows; iRow++) {
for(int iCol = 0; iCol < columns; iCol++) {
    
    if(pDegree > rows*columns-1)
        continue;
    int tmpDG = -1;
    if(pDegree < DGdegrees.Length)
        tmpDG = DGdegrees[pDegree];
    
    //Create Graphs
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:u"]);
           if(k != tmpDG) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
           //ignore the solvers specified in ingore_solvers
           foreach(LinearSolverCode sc in ignore_solvers){
               if(solver_name==sc){
                   System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
               return;
               }
           }
           
           //process the other solvers
           Fmt = new PlotFormat();
           switch(solver_name) {
           case LinearSolverCode.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCode.exp_Kcycle_schwarz: 
               Nmn           = "Kcycle schwarz"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               //Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCode.exp_gmres_levelpmg: 
               Nmn           = "gmres levelpmg"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
//           case LinearSolverConfig.Code.exp_direct: 
//               Fmt.PointType = PointTypes.OpenBox;
//               Nmn           = "Pardiso w Blk PC"; 
//               break;
           case LinearSolverCode.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case LinearSolverCode.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case LinearSolverCode.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case LinearSolverCode.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown";
               break;
           } 
           Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    //all about axis
    string Title = string.Format("$k = {0}$", tmpDG);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
    //specify range of axis
    multiplots[iRow,iCol].YrangeMin = 1e-2;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
    
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    pDegree++;
}                        
}
;
//multiplots.AddDummyPlotsForLegend(3,0);
multiplots.PlotNow()
**************
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_gmres_levelpmg
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
Using gnuplot: G:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
System.Drawing.Bitmap
==============
LastError
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key inside top left Left reverse 

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "XdgPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 322.
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainXdgPoissonScaling.tex"),
   "XdgPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
