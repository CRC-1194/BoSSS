restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 2 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  1: { Session Count = 0; Grid Count = 2; Path = V:\Test4Anne\DB_Rheology }
}

 Console ready for input. Type 'help' for help.

==============
string WFlowName = "Xdg_SFB_Saye2";
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'Xdg_SFB_Saye2'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2020-2-21";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 76 instances of String {
  0: SessionName
  1: DGdegree:Phi
  2: DGdegree:u
  3: NoOfMultigridLevels
  4: GeneratedFromCode
  5: ControlFileText_Index
  6: dtFixed
  7: TimesteppingMode
  8: SetDefaultDiriBndCnd
  9: ViscosityMode
  10: MU_A
  11: MU_B
  12: ExcactSolSupported
  13: PrePreCond
  14: AgglomerationThreshold
  15: penalty_multiplyer
  16: pOff
  17: SuppressExceptionPrompt
  18: LinearSolver.verbose
  19: LinearSolver.MaxKrylovDim
  20: LinearSolver.MaxSolverIterations
  21: LinearSolver.MinSolverIterations
  22: LinearSolver.ConvergenceCriterion
  23: LinearSolver.SolverCode
  24: LinearSolver.NoOfMultigridLevels
  25: LinearSolver.exp_localPrec_muA
  26: LinearSolver.exp_localPrec_Min_dt
  27: LinearSolver.TargetBlockSize
  28: NonLinearSolver.verbose
  29: NonLinearSolver.MaxSolverIterations
  30: NonLinearSolver.MinSolverIterations
  31: NonLinearSolver.ConvergenceCriterion
  32: NonLinearSolver.UnderRelax
  33: NonLinearSolver.SolverCode
  34: NonLinearSolver.constantNewtonIterations
  35: NonLinearSolver.UsePresRefPoint
  36: GridPartType
  37: ProjectName
  38: NoOfTimesteps
  39: Endtime
  40: saveperiod
  41: rollingSaves
  42: dtMin
  43: dtMax
  44: ImmediatePlotPeriod
  45: SuperSampling
  46: savetodb
  47: logFileDirectory
  48: Paramstudy_ContinueOnError
  49: DynamicLoadBalancing_RedistributeAtStartup
  50: DynamicLoadBalancing_Period
  51: DynamicLoadBalancing_ImbalanceThreshold
  52: DynamicLoadBalancing_On
  53: AdaptiveMeshRefinement
  54: AMR_startUpSweeps
  55: CutCellQuadratureType
  56: ContinueOnIoError
  57: Grid:NoOfCells
  58: Grid:hMax
  59: Grid:hMin
  60: UsedNoOfMultigridLevels
  61: maxBlkSize
  62: minBlkSize
  63: NumberOfMatrixBlox
  64: NoOfCutCellBlocks
  65: DOFs
  66: minSolRunT
  67: maxSolRunT
  68: Conv
  69: NoIter
  70: maxMultigridlvl
  71: RegularTerminated
  72: XdgMatrixAssembly
  73: Aggregation_basis_init_time
  74: Solver_Init_time
  75: Solver_Run_time
}
==============
var SubTab_1 = SessTab.ExtractColumns("SessionName","DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("SessionName","DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    SessionName                                      DGdegree:u Grid:NoOfCells LinearSolver.SolverCode DOFs    minSolRunT    maxSolRunT    NoIter 
0:  XdgPoissonVelocity_J110592_k2_classic_pardiso    2          110592         2                       1134560 10778.1398167 10778.1398167 1      
1:  XdgPoissonVelocity_J13824_k5_exp_Kcycle_schwarz  5          13824          41                      813120  7157.4478371  7157.4478371  292    
2:  XdgPoissonVelocity_J32768_k3_classic_pardiso     3          32768          2                       678080  5476.8638087  5476.8638087  1      
3:  XdgPoissonVelocity_J13824_k5_exp_gmres_levelpmg  5          13824          47                      813120  3704.8258106  3704.8258106  2002   
4:  XdgPoissonVelocity_J110592_k3_exp_gmres_levelpmg 3          110592         47                      2269120 1175.8050148  1175.8050148  224    
5:  XdgPoissonVelocity_J110592_k3_exp_Kcycle_schwarz 3          110592         41                      2269120 970.164654    970.164654    23     
6:  XdgPoissonVelocity_J110592_k2_exp_gmres_levelpmg 2          110592         47                      1134560 666.2888669   666.2888669   103    
7:  XdgPoissonVelocity_J110592_k2_exp_Kcycle_schwarz 2          110592         41                      1134560 350.5918706   350.5918706   17     
8:  XdgPoissonVelocity_J13824_k3_classic_pardiso     3          13824          2                       290400  797.0201163   797.0201163   1      
9:  XdgPoissonVelocity_J32768_k2_classic_pardiso     2          32768          2                       339040  797.0550433   797.0550433   1      
10: XdgPoissonVelocity_J32768_k3_exp_Kcycle_schwarz  3          32768          41                      678080  178.369078    178.369078    24     
11: XdgPoissonVelocity_J32768_k3_exp_gmres_levelpmg  3          32768          47                      678080  244.442917    244.442917    195    
12: XdgPoissonVelocity_J13824_k3_exp_Kcycle_schwarz  3          13824          41                      290400  176.8141851   176.8141851   37     
13: XdgPoissonVelocity_J32768_k2_exp_Kcycle_schwarz  2          32768          41                      339040  65.1106244    65.1106244    14     
14: XdgPoissonVelocity_J4096_k5_classic_pardiso      5          4096           2                       245504  1393.7332191  1393.7332191  1      
15: XdgPoissonVelocity_J13824_k3_exp_gmres_levelpmg  3          13824          47                      290400  122.9893308   122.9893308   234    
16: XdgPoissonVelocity_J13824_k2_exp_Kcycle_schwarz  2          13824          41                      145200  33.6645327    33.6645327    15     
17: XdgPoissonVelocity_J32768_k2_exp_gmres_levelpmg  2          32768          47                      339040  104.121417    104.121417    89     
18: XdgPoissonVelocity_J13824_k2_classic_pardiso     2          13824          2                       145200  126.2233561   126.2233561   1      
19: XdgPoissonVelocity_J13824_k2_exp_gmres_levelpmg  2          13824          47                      145200  35.5144824    35.5144824    81     
20: XdgPoissonVelocity_J4096_k5_exp_gmres_levelpmg   5          4096           47                      245504  881.9601012   881.9601012   1552   
21: XdgPoissonVelocity_J4096_k5_exp_Kcycle_schwarz   5          4096           41                      245504  258.6153494   258.6153494   60     
22: XdgPoissonVelocity_J512_k5_exp_Kcycle_schwarz    5          512            41                      33152   47.3939565    47.3939565    28     
23: XdgPoissonVelocity_J4096_k3_exp_Kcycle_schwarz   3          4096           41                      87680   19.2012064    19.2012064    19     
24: XdgPoissonVelocity_J512_k5_exp_gmres_levelpmg    5          512            47                      33152   18.8637554    18.8637554    183    
25: XdgPoissonVelocity_J4096_k3_classic_pardiso      3          4096           2                       87680   99.7132489    99.7132489    1      
26: XdgPoissonVelocity_J4096_k3_exp_gmres_levelpmg   3          4096           47                      87680   20.0814622    20.0814622    114    
27: XdgPoissonVelocity_J64_k5_exp_Kcycle_schwarz     5          64             41                      4928    19.6944536    19.6944536    121    
28: XdgPoissonVelocity_J64_k5_exp_gmres_levelpmg     5          64             47                      4928    32.1118374    32.1118374    2002   
29: XdgPoissonVelocity_J4096_k2_exp_Kcycle_schwarz   2          4096           41                      43840   10.7902301    10.7902301    13     
30: XdgPoissonVelocity_J512_k5_classic_pardiso       5          512            2                       33152   28.4915166    28.4915166    1      
31: XdgPoissonVelocity_J512_k3_exp_Kcycle_schwarz    3          512            41                      11840   5.061362      5.061362      19     
32: XdgPoissonVelocity_J512_k2_exp_Kcycle_schwarz    2          512            41                      5920    4.8242926     4.8242926     14     
33: XdgPoissonVelocity_J64_k3_exp_Kcycle_schwarz     3          64             41                      1760    5.7434076     5.7434076     19     
34: XdgPoissonVelocity_J4096_k2_exp_gmres_levelpmg   2          4096           47                      43840   23.5232354    23.5232354    69     
35: XdgPoissonVelocity_J64_k2_exp_Kcycle_schwarz     2          64             41                      880     2.1363041     2.1363041     11     
36: XdgPoissonVelocity_J512_k3_exp_gmres_levelpmg    3          512            47                      11840   23.8826258    23.8826258    95     
37: XdgPoissonVelocity_J64_k3_exp_gmres_levelpmg     3          64             47                      1760    31.27841      31.27841      97     
38: XdgPoissonVelocity_J512_k2_exp_gmres_levelpmg    2          512            47                      5920    32.0602831    32.0602831    55     
39: XdgPoissonVelocity_J64_k2_exp_gmres_levelpmg     2          64             47                      880     25.7175066    25.7175066    44     
40: XdgPoissonVelocity_J64_k5_classic_pardiso        5          64             2                       4928    24.0305679    24.0305679    1      
41: XdgPoissonVelocity_J4096_k2_classic_pardiso      2          4096           2                       43840   38.5205302    38.5205302    1      
42: XdgPoissonVelocity_J512_k3_classic_pardiso       3          512            2                       11840   26.0216423    26.0216423    1      
43: XdgPoissonVelocity_J64_k3_classic_pardiso        3          64             2                       1760    11.8743193    11.8743193    1      
44: XdgPoissonVelocity_J512_k2_classic_pardiso       2          512            2                       5920    11.8634804    11.8634804    1      
45: XdgPoissonVelocity_J64_k2_classic_pardiso        2          64             2                       880     14.0350334    14.0350334    1      
==============
//Extract to excel-File
//SubTab.ToCSVFile(WFlowName+".txt");
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "LinearSolver.SolverCode", "DGdegree:u"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:u";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = 3;
int columns = 1;
LinearSolverCode[] ignore_solvers = { LinearSolverCode.classic_cg, LinearSolverCode.exp_softpcg_schwarz, LinearSolverCode.exp_direct_lapack};

Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
int pDegree = 0;
for(int iRow = 0; iRow < rows; iRow++) {
for(int iCol = 0; iCol < columns; iCol++) {
    
    if(pDegree > rows*columns-1)
        continue;
    int tmpDG = -1;
    if(pDegree < DGdegrees.Length)
        tmpDG = DGdegrees[pDegree];
    
    //Create Graphs
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:u"]);
           if(k != tmpDG) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
           //ignore the solvers specified in ingore_solvers
           foreach(LinearSolverCode sc in ignore_solvers){
               if(solver_name==sc){
                   System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
               return;
               }
           }
           
       
           //if(solver_name==LinearSolverCode.exp_Kcycle_schwarz&&Convert.ToInt32(Row["DGdegree:u"])==3&&Convert.ToInt32(Row["Grid:NoOfCells"])==13824){
           //    System.Console.WriteLine("skipped");
           //        Nmn = null;
           //        Fmt = null;
           //    return;
           //   }
           if(Convert.ToInt32(Row["Grid:NoOfCells"])==8){
               System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
               return;
               }
       
           //process the other solvers
           Fmt = new PlotFormat();
           switch(solver_name) {
           case LinearSolverCode.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCode.exp_Kcycle_schwarz: 
               Nmn           = "Kcycle w. add.-schwarz"; 
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case LinearSolverCode.exp_gmres_levelpmg: 
               Nmn           = "GMRES p-multigrid"; 
               Fmt.PointType = PointTypes.Box;
               break;
//           case LinearSolverConfig.Code.exp_direct: 
//               Fmt.PointType = PointTypes.OpenBox;
//               Nmn           = "Pardiso w Blk PC"; 
//               break;
           case LinearSolverCode.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case LinearSolverCode.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case LinearSolverCode.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case LinearSolverCode.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown";
               break;
           } 
           Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    //all about axis
    string Title = string.Format("$k = {0}$", tmpDG);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
    //specify range of axis
    multiplots[iRow,iCol].YrangeMin = 1e-1;
    multiplots[iRow,iCol].YrangeMax = 1e+5;
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
    
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    multiplots[iRow,iCol].LegendFont=12;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    pDegree++;
}                        
}
;
//multiplots.AddDummyPlotsForLegend(3,0);
multiplots.PlotNow()
**************
name is: classic_pardiso
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: exp_Kcycle_schwarz
name is: exp_gmres_levelpmg
name is: classic_pardiso
name is: classic_pardiso
Using gnuplot: V:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.Drawing.Bitmap
==============
LastError
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
**************
Using gnuplot: V:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "XdgPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
Path.Combine(CurrentDocDir, "plots", "MainXdgPoissonScaling.tex")
**************
V:\BoSSS-HHLR\public\doc\handbook\apdx-NodeSolverPerformance\XDGPoisson_SFB\plots\MainXdgPoissonScaling.tex
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainXdgPoissonScaling.tex"),
   "XdgPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
