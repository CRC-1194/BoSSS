restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
string WFlowName = "Xdg_Stokes_run0";
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'Xdg_Stokes_run0'.

==============
**************
Xdg_Stokes_run0_2020-10-8
==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
(1,2): warning CS0105: The using directive for `System.IO' appeared previously in this namespace
(2,1): warning CS0105: The using directive for `BoSSS.Application.SipPoisson' appeared previously in this namespace
No. of errors|warnings: 0|2.

==============
string dateString = "2019-9-28";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
System.IO.FileNotFoundException occurred: Could not find file 'B:\BoSSS-gitlab\public\doc\handbook\apdx-NodeSolverPerformance\XDGStokes\SolverRuns--2019-9-28.json'.. Type 'LastError' for details.

==============
string bla  = "Xdg_Stokes_run0_2020-10-8.json";
var SessTab = TableExtensions.LoadFromFile(bla);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 196 instances of String {
  0: ProjectName
  1: SessionName
  2: DGdegree:Velocity*
  3: DGdegree:Pressure
  4: DGdegree:GravityY
  5: DGdegree:PhiDG
  6: DGdegree:Phi
  7: DGdegree:Curvature
  8: NoOfMultigridLevels
  9: TimesteppingMode
  10: GeneratedFromCode
  11: ControlFileText_Index
  12: InitialValues_EvaluatorsVec[0].Key
  13: dtFixed
  14: UseSchurBlockPrec
  15: LS_TrackerWidth
  16: RefineStrategy
  17: BaseRefinementLevel
  18: RefinementLevel
  19: RefineNavierSlipBoundary
  20: ReInitPeriod
  21: AdvancedDiscretizationOptions.ViscosityMode
  22: AdvancedDiscretizationOptions.UseGhostPenalties
  23: AdvancedDiscretizationOptions.ContiSign
  24: AdvancedDiscretizationOptions.RescaleConti
  25: AdvancedDiscretizationOptions.LFFA
  26: AdvancedDiscretizationOptions.LFFB
  27: AdvancedDiscretizationOptions.PenaltySafety
  28: AdvancedDiscretizationOptions.CellAgglomerationThreshold
  29: AdvancedDiscretizationOptions.SurfStressTensor
  30: AdvancedDiscretizationOptions.UseLevelSetStabilization
  31: AdvancedDiscretizationOptions.UseWeightedAverages
  32: AdvancedDiscretizationOptions.SST_isotropicMode
  33: AdvancedDiscretizationOptions.CurvatureNeeded
  34: AdvancedDiscretizationOptions.FilterConfiguration.UseWholeField
  35: AdvancedDiscretizationOptions.FilterConfiguration.gradOpt
  36: AdvancedDiscretizationOptions.FilterConfiguration.hessOpt
  37: AdvancedDiscretizationOptions.FilterConfiguration.useFiltLevSetGrad
  38: AdvancedDiscretizationOptions.FilterConfiguration.useFiltLevSetHess
  39: AdvancedDiscretizationOptions.FilterConfiguration.FilterCurvatureCycles
  40: AdvancedDiscretizationOptions.FilterConfiguration.LevelSetSource
  41: AdvancedDiscretizationOptions.FilterConfiguration.PatchRecoveryDomWidth
  42: AdvancedDiscretizationOptions.FilterConfiguration.NoOfPatchRecoverySweeps
  43: AdvancedDiscretizationOptions.FilterConfiguration.CurvatureLimiting
  44: AdvancedDiscretizationOptions.GNBC_Localization
  45: AdvancedDiscretizationOptions.GNBC_SlipLength
  46: AdvancedDiscretizationOptions.ObjectiveParam
  47: AdvancedDiscretizationOptions.alpha
  48: AdvancedDiscretizationOptions.Penalty1[0]
  49: AdvancedDiscretizationOptions.Penalty1[1]
  50: AdvancedDiscretizationOptions.Penalty2
  51: AdvancedDiscretizationOptions.PresPenalty1[0]
  52: AdvancedDiscretizationOptions.PresPenalty1[1]
  53: AdvancedDiscretizationOptions.PresPenalty2
  54: AdvancedDiscretizationOptions.StressPenalty
  55: PhysicalParameters.IncludeConvection
  56: PhysicalParameters.rho_A
  57: PhysicalParameters.rho_B
  58: PhysicalParameters.mu_A
  59: PhysicalParameters.mu_B
  60: PhysicalParameters.reynolds_B
  61: PhysicalParameters.reynolds_A
  62: PhysicalParameters.Sigma
  63: PhysicalParameters.mu_I
  64: PhysicalParameters.lambda_I
  65: PhysicalParameters.lambdaI_tilde
  66: PhysicalParameters.betaS_A
  67: PhysicalParameters.betaS_B
  68: PhysicalParameters.betaL
  69: PhysicalParameters.theta_e
  70: PhysicalParameters.sliplength
  71: PhysicalParameters.beta_a
  72: PhysicalParameters.beta_b
  73: PhysicalParameters.Weissenberg_a
  74: PhysicalParameters.Weissenberg_b
  75: PhysicalParameters.giesekusfactor_a
  76: PhysicalParameters.giesekusfactor_b
  77: PhysicalParameters.Giesekus_a
  78: PhysicalParameters.Giesekus_b
  79: PhysicalParameters.Material
  80: PhysicalParameters.useArtificialSurfaceForce
  81: SkipSolveAndEvaluateResidual
  82: LogValues
  83: LogPeriod
  84: WriteInterfaceP
  85: TestMode
  86: Timestepper_BDFinit
  87: incrementTimesteps
  88: Timestepper_LevelSetHandling
  89: LSunderrelax
  90: Option_LevelSetEvolution
  91: LevelSet_ConvergenceCriterion
  92: LSContiProjectionMethod
  93: EnforceLevelSetConservation
  94: solveKineticEnergyEquation
  95: kinEViscousDiscretization
  96: kinEPressureDiscretization
  97: withDissipativePressure
  98: KineticEnergyeBlockPrecondMode
  99: ComputeEnergyProperties
  100: CheckJumpConditions
  101: CheckInterfaceProps
  102: RegisterUtilitiesToIOFields
  103: InterAverage
  104: ReInitControl.ConvergenceCriterion
  105: ReInitControl.MaxIt
  106: ReInitControl.Potential
  107: ReInitControl.FastMarchingPrecond
  108: ReInitControl.underrelaxation
  109: ReInitControl.Upwinding
  110: ReInitControl.PenaltyMultiplierFlux
  111: ReInitControl.PenaltyMultiplierInterface
  112: ReInitControl.PrintIterations
  113: EllipticExtVelAlgoControl.FluxVariant
  114: EllipticExtVelAlgoControl.subGridRestriction
  115: EllipticExtVelAlgoControl.PenaltyMultiplierFlux
  116: EllipticExtVelAlgoControl.PenaltyMultiplierInterface
  117: EllipticExtVelAlgoControl.IsotropicViscosity
  118: solveCoupledHeatEquation
  119: useSolutionParamUpdate
  120: conductMode
  121: TemperatureBlockPrecondMode
  122: ThermalParameters.IncludeConvection
  123: ThermalParameters.rho_A
  124: ThermalParameters.rho_B
  125: ThermalParameters.c_A
  126: ThermalParameters.c_B
  127: ThermalParameters.k_A
  128: ThermalParameters.k_B
  129: ThermalParameters.hVap
  130: ThermalParameters.T_sat
  131: ThermalParameters.p_sat
  132: ThermalParameters.fc
  133: ThermalParameters.Rc
  134: ThermalParameters.pc
  135: LinearSolver.verbose
  136: LinearSolver.MaxKrylovDim
  137: LinearSolver.MaxSolverIterations
  138: LinearSolver.MinSolverIterations
  139: LinearSolver.ConvergenceCriterion
  140: LinearSolver.SolverCode
  141: LinearSolver.NoOfMultigridLevels
  142: LinearSolver.SolverMode
  143: LinearSolver.exp_localPrec_muA
  144: LinearSolver.exp_localPrec_Min_dt
  145: LinearSolver.TargetBlockSize
  146: NonLinearSolver.verbose
  147: NonLinearSolver.MaxSolverIterations
  148: NonLinearSolver.MinSolverIterations
  149: NonLinearSolver.ConvergenceCriterion
  150: NonLinearSolver.UnderRelax
  151: NonLinearSolver.SolverCode
  152: NonLinearSolver.constantNewtonIterations
  153: NonLinearSolver.printLambda
  154: NonLinearSolver.Globalization
  155: AgglomerationThreshold
  156: MultiStepInit
  157: TimeSteppingScheme
  158: GridPartType
  159: NoOfTimesteps
  160: staticTimestep
  161: Endtime
  162: saveperiod
  163: rollingSaves
  164: dtMin
  165: dtMax
  166: ImmediatePlotPeriod
  167: SuperSampling
  168: savetodb
  169: AlternateDbPaths[0].Item1
  170: AlternateDbPaths[0].Item2
  171: AlternateDbPaths[1].Item1
  172: AlternateDbPaths[1].Item2
  173: logFileDirectory
  174: Paramstudy_ContinueOnError
  175: DynamicLoadBalancing_RedistributeAtStartup
  176: DynamicLoadBalancing_Period
  177: DynamicLoadBalancing_ImbalanceThreshold
  178: DynamicLoadBalancing_On
  179: AdaptiveMeshRefinement
  180: AMR_startUpSweeps
  181: CutCellQuadratureType
  182: ContinueOnIoError
  183: BurstSave
  184: Grid:NoOfCells
  185: Grid:SpatialDimension
  186: Grid:hMax
  187: Grid:hMin
  188: RegularTerminated
  189: XdgMatrixAssembly
  190: Aggregation_basis_init_time
  191: Solver_Init_time
  192: Solver_Run_time
  193: NoOfCores
  194: DOFs
  195: NoIter
}
==============
var SubTab = SessTab.ExtractColumns("SessionName","DGdegree:Velocity*", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "XdgMatrixAssembly",
"Aggregation_basis_init_time",
"Solver_Init_time",
"Solver_Run_time", "NoIter");
**************
==============
//var SubTab_2 = SubTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
//    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
//          && (Convert.ToInt32(row["Conv"]) != 0);
//    });
**************
==============
//var SubTab = SubTab_2.ExtractColumns("SessionName","DGdegree:u", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
   SessionName                 DGdegree:Velocity* Grid:NoOfCells LinearSolver.SolverCode DOFs   XdgMatrixAssembly Aggregation_basis_init_time Solver_Init_time Solver_Run_time NoIter 
0: J512_p3_exp_Kcycle_schwarz  3                  512            41                      71680  16.0629728        0.3345547                   5.3094744        6248.7751193    1528   
1: J13824_p2_classic_pardiso   2                  13824          2                       940032 112.1505878       5.7238134                   25.2363529       4796.9658146    1      
2: J4096_p3_classic_pardiso    3                  4096           2                       573440 103.4613754       2.8042084                   20.8770093       2341.5859196    1      
3: J4096_p2_exp_Kcycle_schwarz 2                  4096           41                      278528 37.6873518        1.0646712                   16.9992262       1056.768777     298    
4: J512_p5_classic_pardiso     5                  512            2                       207872 157.5178781       5.1108825                   22.8012036       692.7747814     1      
5: J4096_p2_classic_pardiso    2                  4096           2                       278528 37.7531976        1.0893064                   7.475476         248.8116871     1      
6: J512_p2_exp_Kcycle_schwarz  2                  512            41                      34816  6.239593          0.1102899                   2.1161228        34.2092565      94     
7: J512_p3_classic_pardiso     3                  512            2                       71680  16.2297513        0.33788                     2.6940423        20.8425555      1      
8: J512_p2_classic_pardiso     2                  512            2                       34816  6.2894708         0.1104408                   1.035706         4.4214412       1      
==============
//Extract to excel-File
//SubTab.ToCSVFile(WFlowName+".txt");
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "LinearSolver.SolverCode", "DGdegree:u"); // column for group
**************
Exception in the selection test of row 0: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 1: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 2: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 3: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 4: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 5: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 6: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 7: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..
Exception in the selection test of row 8: ArgumentException, Message: Column 'DGdegree:u' does not belong to table ..

==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:Velocity*";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = 3;
int columns = 1;
LinearSolverCode[] ignore_solvers = { };

Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
int pDegree = 0;
for(int iRow = 0; iRow < rows; iRow++) {
for(int iCol = 0; iCol < columns; iCol++) {
    
    if(pDegree > rows*columns-1)
        continue;
    int tmpDG = -1;
    if(pDegree < DGdegrees.Length)
        tmpDG = DGdegrees[pDegree];
    
    //Create Graphs
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "Solver_Run_time", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:Velocity*"]);
           if(k != tmpDG) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
           //ignore the solvers specified in ingore_solvers
           foreach(LinearSolverCode sc in ignore_solvers){
               if(solver_name==sc){
                   System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
               return;
               }
           }
           
       
           //if(solver_name==LinearSolverCode.exp_Kcycle_schwarz&&Convert.ToInt32(Row["DGdegree:u"])==3&&Convert.ToInt32(Row["Grid:NoOfCells"])==13824){
           //    System.Console.WriteLine("skipped");
           //        Nmn = null;
           //        Fmt = null;
           //    return;
           //   }
           //if(Convert.ToInt32(Row["Grid:NoOfCells"])==8){
           //    System.Console.WriteLine("skipped");
           //        Nmn = null;
           //        Fmt = null;
           //    return;
           //    }
       
           //process the other solvers
           Fmt = new PlotFormat();
           switch(solver_name) {
           case LinearSolverCode.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCode.exp_Kcycle_schwarz: 
               Nmn           = "Kcycle w. add.-schwarz"; 
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case LinearSolverCode.exp_gmres_levelpmg: 
               Nmn           = "GMRES p-multigrid"; 
               Fmt.PointType = PointTypes.Box;
               break;
           case LinearSolverCode.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case LinearSolverCode.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown";
               break;
           } 
           Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    //all about axis
    string Title = string.Format("$k = {0}$", tmpDG);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
    //specify range of axis
    multiplots[iRow,iCol].YrangeMin = 1e-1;
    multiplots[iRow,iCol].YrangeMax = 1e+5;
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
    
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    multiplots[iRow,iCol].LegendFont=12;
    }

    //and i am special ...
    if(iRow == rows-1){
        multiplots[iRow,iCol].ShowXtics=true;
        multiplots[iRow,iCol].bmargin = 2;
    }
    pDegree++;
}                        
}
;
//multiplots.AddDummyPlotsForLegend(3,0);
multiplots.PlotNow()
**************
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: exp_Kcycle_schwarz
name is: classic_pardiso
name is: classic_pardiso
name is: classic_pardiso
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.Drawing.Bitmap
==============
LastError
**************
==============
DirectoryInfo dir = Directory.CreateDirectory(CurrentDocDir+@"\"+"plots");
string dirpath    = dir.FullName;
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "XdgPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
Path.Combine(dirpath, "MainXdgPoissonScaling.tex")
**************
B:\BoSSS-gitlab\public\doc\handbook\apdx-NodeSolverPerformance\XDGStokes\plots\MainXdgPoissonScaling.tex
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(dirpath, "MainXdgPoissonScaling.tex"),
   "XdgPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
