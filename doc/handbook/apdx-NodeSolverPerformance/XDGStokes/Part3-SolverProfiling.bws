restart
**************
(18,7): error CS0246: The type or namespace name `Renci' could not be found. Are you missing an assembly reference?

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("Xdg_SFB_Performance_r3");
**************
Project name is set to 'Xdg_SFB_Performance_r3'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
(1,2): warning CS0105: The using directive for `System.IO' appeared previously in this namespace
(2,1): warning CS0105: The using directive for `BoSSS.Application.SipPoisson' appeared previously in this namespace
No. of errors|warnings: 0|2.

==============
string dateString = "2020-10-8";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
LinearSolverCode[] Solvers = new LinearSolverCode[] {
LinearSolverCode.exp_Kcycle_schwarz,
LinearSolverCode.exp_gmres_levelpmg
};
**************
==============
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
//SessTab.GetColumnNames().Where(s=>s.Contains("Conv"));
SessTab.GetColumnNames().OrderBy(s=>s);
**************
List of 197 instances of String {
  0: AdaptiveMeshRefinement
  1: AdvancedDiscretizationOptions.alpha
  2: AdvancedDiscretizationOptions.CellAgglomerationThreshold
  3: AdvancedDiscretizationOptions.ContiSign
  4: AdvancedDiscretizationOptions.CurvatureNeeded
  5: AdvancedDiscretizationOptions.FilterConfiguration.CurvatureLimiting
  6: AdvancedDiscretizationOptions.FilterConfiguration.FilterCurvatureCycles
  7: AdvancedDiscretizationOptions.FilterConfiguration.gradOpt
  8: AdvancedDiscretizationOptions.FilterConfiguration.hessOpt
  9: AdvancedDiscretizationOptions.FilterConfiguration.LevelSetSource
  10: AdvancedDiscretizationOptions.FilterConfiguration.NoOfPatchRecoverySweeps
  11: AdvancedDiscretizationOptions.FilterConfiguration.PatchRecoveryDomWidth
  12: AdvancedDiscretizationOptions.FilterConfiguration.useFiltLevSetGrad
  13: AdvancedDiscretizationOptions.FilterConfiguration.useFiltLevSetHess
  14: AdvancedDiscretizationOptions.FilterConfiguration.UseWholeField
  15: AdvancedDiscretizationOptions.GNBC_Localization
  16: AdvancedDiscretizationOptions.GNBC_SlipLength
  17: AdvancedDiscretizationOptions.LFFA
  18: AdvancedDiscretizationOptions.LFFB
  19: AdvancedDiscretizationOptions.ObjectiveParam
  20: AdvancedDiscretizationOptions.Penalty1[0]
  21: AdvancedDiscretizationOptions.Penalty1[1]
  22: AdvancedDiscretizationOptions.Penalty2
  23: AdvancedDiscretizationOptions.PenaltySafety
  24: AdvancedDiscretizationOptions.PresPenalty1[0]
  25: AdvancedDiscretizationOptions.PresPenalty1[1]
  26: AdvancedDiscretizationOptions.PresPenalty2
  27: AdvancedDiscretizationOptions.RescaleConti
  28: AdvancedDiscretizationOptions.SST_isotropicMode
  29: AdvancedDiscretizationOptions.StressPenalty
  30: AdvancedDiscretizationOptions.SurfStressTensor
  31: AdvancedDiscretizationOptions.UseGhostPenalties
  32: AdvancedDiscretizationOptions.UseLevelSetStabilization
  33: AdvancedDiscretizationOptions.UseWeightedAverages
  34: AdvancedDiscretizationOptions.ViscosityMode
  35: AgglomerationThreshold
  36: Aggregation_basis_init_time
  37: AlternateDbPaths[0].Item1
  38: AlternateDbPaths[0].Item2
  39: AlternateDbPaths[1].Item1
  40: AlternateDbPaths[1].Item2
  41: AMR_startUpSweeps
  42: BaseRefinementLevel
  43: BurstSave
  44: CheckInterfaceProps
  45: CheckJumpConditions
  46: ComputeEnergyProperties
  47: conductMode
  48: ContinueOnIoError
  49: ControlFileText_Index
  50: CutCellQuadratureType
  51: DGdegree:Curvature
  52: DGdegree:GravityY
  53: DGdegree:Phi
  54: DGdegree:PhiDG
  55: DGdegree:Pressure
  56: DGdegree:Velocity*
  57: DOFs
  58: dtFixed
  59: dtMax
  60: dtMin
  61: DynamicLoadBalancing_ImbalanceThreshold
  62: DynamicLoadBalancing_On
  63: DynamicLoadBalancing_Period
  64: DynamicLoadBalancing_RedistributeAtStartup
  65: EllipticExtVelAlgoControl.FluxVariant
  66: EllipticExtVelAlgoControl.IsotropicViscosity
  67: EllipticExtVelAlgoControl.PenaltyMultiplierFlux
  68: EllipticExtVelAlgoControl.PenaltyMultiplierInterface
  69: EllipticExtVelAlgoControl.subGridRestriction
  70: Endtime
  71: EnforceLevelSetConservation
  72: GeneratedFromCode
  73: Grid:hMax
  74: Grid:hMin
  75: Grid:NoOfCells
  76: Grid:SpatialDimension
  77: GridPartType
  78: ImmediatePlotPeriod
  79: incrementTimesteps
  80: InitialValues_EvaluatorsVec[0].Key
  81: InterAverage
  82: kinEPressureDiscretization
  83: KineticEnergyeBlockPrecondMode
  84: kinEViscousDiscretization
  85: LevelSet_ConvergenceCriterion
  86: LinearSolver.ConvergenceCriterion
  87: LinearSolver.exp_localPrec_Min_dt
  88: LinearSolver.exp_localPrec_muA
  89: LinearSolver.MaxKrylovDim
  90: LinearSolver.MaxSolverIterations
  91: LinearSolver.MinSolverIterations
  92: LinearSolver.NoOfMultigridLevels
  93: LinearSolver.SolverCode
  94: LinearSolver.SolverMode
  95: LinearSolver.TargetBlockSize
  96: LinearSolver.verbose
  97: logFileDirectory
  98: LogPeriod
  99: LogValues
  100: LS_TrackerWidth
  101: LSContiProjectionMethod
  102: LSunderrelax
  103: minSolRunT
  104: MultiStepInit
  105: NoIter
  106: NonLinearSolver.constantNewtonIterations
  107: NonLinearSolver.ConvergenceCriterion
  108: NonLinearSolver.Globalization
  109: NonLinearSolver.MaxSolverIterations
  110: NonLinearSolver.MinSolverIterations
  111: NonLinearSolver.printLambda
  112: NonLinearSolver.SolverCode
  113: NonLinearSolver.UnderRelax
  114: NonLinearSolver.verbose
  115: NoOfCores
  116: NoOfMultigridLevels
  117: NoOfTimesteps
  118: Option_LevelSetEvolution
  119: Paramstudy_ContinueOnError
  120: PhysicalParameters.beta_a
  121: PhysicalParameters.beta_b
  122: PhysicalParameters.betaL
  123: PhysicalParameters.betaS_A
  124: PhysicalParameters.betaS_B
  125: PhysicalParameters.Giesekus_a
  126: PhysicalParameters.Giesekus_b
  127: PhysicalParameters.giesekusfactor_a
  128: PhysicalParameters.giesekusfactor_b
  129: PhysicalParameters.IncludeConvection
  130: PhysicalParameters.lambda_I
  131: PhysicalParameters.lambdaI_tilde
  132: PhysicalParameters.Material
  133: PhysicalParameters.mu_A
  134: PhysicalParameters.mu_B
  135: PhysicalParameters.mu_I
  136: PhysicalParameters.reynolds_A
  137: PhysicalParameters.reynolds_B
  138: PhysicalParameters.rho_A
  139: PhysicalParameters.rho_B
  140: PhysicalParameters.Sigma
  141: PhysicalParameters.sliplength
  142: PhysicalParameters.theta_e
  143: PhysicalParameters.useArtificialSurfaceForce
  144: PhysicalParameters.Weissenberg_a
  145: PhysicalParameters.Weissenberg_b
  146: ProjectName
  147: RefinementLevel
  148: RefineNavierSlipBoundary
  149: RefineStrategy
  150: RegisterUtilitiesToIOFields
  151: RegularTerminated
  152: ReInitControl.ConvergenceCriterion
  153: ReInitControl.FastMarchingPrecond
  154: ReInitControl.MaxIt
  155: ReInitControl.PenaltyMultiplierFlux
  156: ReInitControl.PenaltyMultiplierInterface
  157: ReInitControl.Potential
  158: ReInitControl.PrintIterations
  159: ReInitControl.underrelaxation
  160: ReInitControl.Upwinding
  161: ReInitPeriod
  162: rollingSaves
  163: saveperiod
  164: savetodb
  165: SessionName
  166: SkipSolveAndEvaluateResidual
  167: solveCoupledHeatEquation
  168: solveKineticEnergyEquation
  169: Solver_Init_time
  170: Solver_Run_time
  171: staticTimestep
  172: SuperSampling
  173: TemperatureBlockPrecondMode
  174: TestMode
  175: ThermalParameters.c_A
  176: ThermalParameters.c_B
  177: ThermalParameters.fc
  178: ThermalParameters.hVap
  179: ThermalParameters.IncludeConvection
  180: ThermalParameters.k_A
  181: ThermalParameters.k_B
  182: ThermalParameters.p_sat
  183: ThermalParameters.pc
  184: ThermalParameters.Rc
  185: ThermalParameters.rho_A
  186: ThermalParameters.rho_B
  187: ThermalParameters.T_sat
  188: Timestepper_BDFinit
  189: Timestepper_LevelSetHandling
  190: TimesteppingMode
  191: TimeSteppingScheme
  192: UseSchurBlockPrec
  193: useSolutionParamUpdate
  194: withDissipativePressure
  195: WriteInterfaceP
  196: XdgMatrixAssembly
}
==============
Func<IDictionary<string,object>,bool> solverselection = delegate(IDictionary<string,object> row){
bool selectsolver = false;
foreach(var solver in Solvers)
    selectsolver |= (Convert.ToInt32(row["LinearSolver.SolverCode"]) == (int)solver);
return selectsolver;
}
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    //return (  solverselection(row) && (Convert.ToInt32(row["Conv"]) != 0));
    return  solverselection(row);
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:Velocity*", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", 
              "minSolRunT",
              "XdgMatrixAssembly", "Aggregation_basis_init_time", "Solver_Init_time", "Solver_Run_time");
**************
==============
SubTab.Print();
**************
   DGdegree:Velocity* Grid:NoOfCells LinearSolver.SolverCode DOFs   minSolRunT   XdgMatrixAssembly Aggregation_basis_init_time Solver_Init_time Solver_Run_time 
0: 3                  512            41                      35910  6270.4821212 16.0629728        0.3345547                   5.3094744        6248.7751193    
1: 2                  4096           41                      139298 1112.5200262 37.6873518        1.0646712                   16.9992262       1056.768777     
2: 2                  512            41                      17442  42.6752622   6.239593          0.1102899                   2.1161228        34.2092565      
==============
**************
==============
//extract all Degrees and put them into array
int rowcount          = SubTab.Rows.Count;
string selectedcolumn = "DGdegree:Velocity*";
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 2 instances of Int32 {
  0: 2
  1: 3
}
==============
**************
==============
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = DGdegrees.Length;
int columns = 1;

Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
AllMultiplots[iPlot] = multiplots;
int pDegree = 0;

for(int iRow = 0; iRow < rows; iRow++) {
int iCol = 0; 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k                        = Convert.ToInt32(Row["DGdegree:Velocity*"]);
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
      
           if(    k != DGdegrees[pDegree] 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           if(Convert.ToInt32(Row["Grid:NoOfCells"])==8){
               System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
                   xValue = 0;
                yValue = 0;
               return;
               }

            
           double mtxAssi  = Convert.ToDouble(Row["XdgMatrixAssembly"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", DGdegrees[pDegree]);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 1e-2;
    multiplots[iRow,0].YrangeMax = 1e+5;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    multiplots[iRow,iCol].LegendFont=12;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    
    pDegree++;                       
}
}
;
AllMultiplots[0].PlotNow()
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 
System.Drawing.Bitmap
==============
//var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
//CL.PlotNow();
**************
==============
//CL.WriteMinimalCompileableExample(
//    Path.Combine(CurrentDocDir, "plots", "Main_Kcycle_Schwarz.tex"),
//    "Kcycle_Schwarz.tex");
**************
==============
//CL.WriteMinimalCompileableExample("C:\\tmp\\Schwarz" + dateString + ".tex");
**************
==============
**************
==============
**************
==============
Func<int,bool> TableContainsSolver = delegate(int i){
bool bla = false;
foreach(System.Data.DataRow row in SubTab.Rows){

    bla |= (Convert.ToInt32(row["LinearSolver.SolverCode"])==(int)Solvers[i]);
    
}
return bla;
}
**************
==============
// ================
// Loop it
// ==============
for(int i =0; i< Solvers.Length;i++){
if(!TableContainsSolver(i))
    continue;
string problem = "XdgStokes";
string name    = problem + Solvers[i];
var CL         = AllMultiplots[i].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "Main"+name+".tex"),
    name+".tex");
}
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",12"inside top left Left reverse 

==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
