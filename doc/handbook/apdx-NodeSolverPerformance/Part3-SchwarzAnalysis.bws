restart
**************

  Database Explorer v2
  ____________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 30; Grid Count = 9; Path = \\dc1\userspace\degenhardt\bosss_db }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2018-2-11";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
((int) SolverCodes.exp_softpcg_schwarz_directcoarse);
**************
6
==============
((int) SolverCodes.exp_softpcg_mg);
**************
4
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 49 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: TargetBlockSize
  12: NoOfSolverRuns
  13: ExactSolution_provided
  14: GridPartType
  15: ProjectName
  16: NoOfTimesteps
  17: Endtime
  18: saveperiod
  19: dtMin
  20: dtMax
  21: CompMode
  22: ImmediatePlotPeriod
  23: SuperSampling
  24: savetodb
  25: logFileDirectory
  26: Paramstudy_ContinueOnError
  27: DynamicLoadBalancing_RedistributeAtStartup
  28: DynamicLoadBalancing_Period
  29: DynamicLoadBalancing_ImbalanceThreshold
  30: AdaptiveMeshRefinement
  31: CutCellQuadratureType
  32: ContinueOnIoError
  33: Grid:NoOfCells
  34: Grid:hMax
  35: Grid:hMin
  36: RegularTerminated
  37: SipMatrixAssembly_time
  38: Aggregation_basis_init_time
  39: Solver_Init_time
  40: Solver_Run_time
  41: UsedNoOfMultigridLevels
  42: minSolRunT
  43: maxSolRunT
  44: Conv
  45: NoIter
  46: NoOfCells
  47: DOFs
  48: BlockSize
}
==============
//var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (  (Convert.ToInt32(row["solver_name"]) ==  ((int) SolverCodes.exp_softpcg_schwarz_directcoarse))
          || (Convert.ToInt32(row["solver_name"]) ==  ((int) SolverCodes.exp_softpcg_schwarz))
          || (Convert.ToInt32(row["solver_name"]) ==  ((int) SolverCodes.exp_softpcg_mg)))
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", 
              "minSolRunT", "maxSolRunT", "UsedNoOfMultigridLevels",
              "SipMatrixAssembly_time", "Aggregation_basis_init_time", "Solver_Init_time", "Solver_Run_time");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT  maxSolRunT  UsedNoOfMultigridLevels SipMatrixAssembly_time Aggregation_basis_init_time Solver_Init_time Solver_Run_time 
0:  4          2560           4           89600   63.9040395  63.9040395  13                      9.004841               128.3296647                 12.810268        51.055132       
1:  4          320            4           11200   7.9399755   7.9399755   10                      1.641103               10.5640296                  1.5035994        6.403309        
2:  4          40             4           1400    0.8247747   0.8247747   7                       0.6917598              0.8775897                   0.2078957        0.5841074       
3:  3          20480          4           409600  198.1232817 198.1232817 17                      19.2882322             722.2035113                 29.0274441       169.0394765     
4:  3          2560           4           51200   25.872553   25.872553   13                      2.901566               61.0054629                  3.4870585        22.3510265      
5:  3          320            4           6400    2.0830731   2.0830731   10                      0.9317641              6.0240039                   0.3235555        1.7246107       
6:  3          40             4           800     0.5642212   0.5642212   7                       0.6017011              0.4726522                   0.1453933        0.3845412       
7:  2          163840         4           1638400 718.7637763 718.7637763 19                      52.1393295             9434.2042271                112.7994974      605.8446289     
8:  2          20480          4           204800  78.1297121  78.1297121  17                      7.0395895              590.8788566                 11.5904963       66.4958787      
9:  2          2560           4           25600   10.176333   10.176333   13                      1.3704651              48.726767                   1.0669692        9.0732582       
10: 2          320            4           3200    0.8673359   0.8673359   10                      0.6724598              4.4110178                   0.172907         0.6599379       
11: 2          40             4           400     0.4746757   0.4746757   7                       0.5621123              0.38937                     0.1376304        0.3016082       
12: 3          20480          6           409600  390.3218718 393.5016035 17                      17.7667034             669.5929173                 63.21979115      328.65436955    
13: 3          2560           6           51200   27.210639   27.6054704  13                      2.7357368              56.3735972                  7.78967205       19.60290185     
14: 3          320            6           6400    4.707644    5.2670534   10                      0.8089003              5.1424521                   1.1017856        3.87265025      
15: 3          40             6           800     2.5469665   2.8956922   7                       0.5618062              0.4292369                   0.3244349        2.3841398       
16: 2          20480          6           204800  94.6536695  94.7905943  17                      6.4902633              545.7509009                 17.28302395      77.41473495     
17: 2          2560           6           25600   9.6737434   9.8025789   13                      1.4462802              48.617592                   2.3691387        7.3557623       
18: 2          320            6           3200    3.061871    3.525212    10                      0.6250326              4.1457639                   0.45723825       2.8248578       
19: 2          40             6           400     2.4709977   2.8666587   7                       0.5400817              0.3679988                   0.2583267        2.3991332       
20: 2          2560           5           25600   749.3842617 750.960602  3                       1.3581869              5.6785293                   21.3580158       728.80093615    
21: 2          320            5           3200    39.0187606  39.0274362  3                       0.6901283              0.7779678                   1.06727205       37.94337105     
22: 2          40             5           400     1.4043004   1.9798036   3                       0.5587462              0.1304635                   0.20593605       1.47307745      
==============
**************
==============
**************
==============
**************
==============
var Solvers = new SolverCodes[] {
SolverCodes.exp_softpcg_schwarz_directcoarse,
SolverCodes.exp_softpcg_mg
};
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[2,1];
AllMultiplots[iPlot] = multiplots;
int pDegree = 2;
for(int iRow = 0; iRow < 2; iRow++) {
 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           
           if(    k != pDegree 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           double mtxAssi  = Convert.ToDouble(Row["SipMatrixAssembly_time"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", pDegree);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 0.1;
    multiplots[iRow,0].YrangeMax = 1e+4;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    //multiplots[iRow,iCol].XrangeMin = 1e2;
    //multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //if(iRow == 2) {
    //    multiplots[iRow,iCol].ShowLegend = true;
    //    multiplots[iRow,iCol].LegendPosition = new double[] {1e12,1e4};
    //} else {
    //    multiplots[iRow,iCol].ShowLegend = false;
    //}
 
    //if(iCol == 1) {
    //    multiplots[iRow,iCol].SwapYaxes();
    //    multiplots[iRow,iCol].lmargin = 1;
    //    multiplots[iRow,iCol].rmargin = 10;
    //} else {
    //    multiplots[iRow,iCol].lmargin = 10;
    //    multiplots[iRow,iCol].rmargin = 1;
    //}
    //multiplots[iRow,iCol].tmargin = 1;
    //multiplots[iRow,iCol].bmargin = 1;
    
    pDegree++;                       
}
}
**************
aggBinit/slvRun = 9434.2042271/605.8446289	 + case: 0 + yValue = 605.8446289
aggBinit/slvRun = 9434.2042271/605.8446289	 + case: 1 + yValue = 112.7994974
aggBinit/slvRun = 9434.2042271/605.8446289	 + case: 2 + yValue = 9434.2042271
aggBinit/slvRun = 9434.2042271/605.8446289	 + case: 3 + yValue = 52.1393295
aggBinit/slvRun = 722.2035113/169.0394765	 + case: 0 + yValue = 169.0394765
aggBinit/slvRun = 722.2035113/169.0394765	 + case: 1 + yValue = 29.0274441
aggBinit/slvRun = 722.2035113/169.0394765	 + case: 2 + yValue = 722.2035113
aggBinit/slvRun = 722.2035113/169.0394765	 + case: 3 + yValue = 19.2882322

==============
var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:16, ySize:12);
CL.PlotNow();
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoisson_Schwarz.tex"),
    "ConstCoeffPoisson_Schwarz.tex");
**************
==============
//CL.WriteMinimalCompileableExample("C:\\tmp\\Schwarz" + dateString + ".tex");
**************
==============
**************
==============
**************
==============
var CL = AllMultiplots[1].ToGnuplot().PlotCairolatex(xSize:16, ySize:12);
CL.PlotNow();
**************
Using gnuplot: C:\Program Files\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoisson_MG.tex"),
    "ConstCoeffPoisson_MG.tex");
**************
==============
**************
==============
**************
==============
