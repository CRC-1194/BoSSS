restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2018-11-7";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 50 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: TargetBlockSize
  12: NoOfSolverRuns
  13: ExactSolution_provided
  14: GridPartType
  15: ProjectName
  16: NoOfTimesteps
  17: Endtime
  18: saveperiod
  19: dtMin
  20: dtMax
  21: CompMode
  22: ImmediatePlotPeriod
  23: SuperSampling
  24: savetodb
  25: logFileDirectory
  26: Paramstudy_ContinueOnError
  27: DynamicLoadBalancing_RedistributeAtStartup
  28: DynamicLoadBalancing_Period
  29: DynamicLoadBalancing_ImbalanceThreshold
  30: DynamicLoadBalancing_On
  31: AdaptiveMeshRefinement
  32: CutCellQuadratureType
  33: ContinueOnIoError
  34: Grid:NoOfCells
  35: Grid:hMax
  36: Grid:hMin
  37: UsedNoOfMultigridLevels
  38: minSolRunT
  39: maxSolRunT
  40: Conv
  41: NoIter
  42: NoOfCells
  43: DOFs
  44: BlockSize
  45: RegularTerminated
  46: SipMatrixAssembly_time
  47: Aggregation_basis_init_time
  48: Solver_Init_time
  49: Solver_Run_time
}
==============
var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
   DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT   maxSolRunT   NoIter 
0: 2          163840         4           1638400 768.206441   768.206441   67     
1: 2          20480          4           204800  87.5742284   87.5742284   66     
2: 2          2560           4           25600   10.2581241   10.2581241   77     
3: 2          320            4           3200    0.6203332    0.6203332    5      
4: 2          40             4           400     0.3336844    0.3336844    5      
5: 2          163840         6           1638400 2969.0162684 2969.0162684 39     
6: 2          20480          6           204800  285.9048549  285.9048549  36     
7: 2          2560           6           25600   14.2846454   14.2846454   21     
8: 2          320            6           3200    0.6953308    0.6953308    5      
9: 2          40             6           400     0.8118458    0.8118458    5      
==============
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "solver_name", "DGdegree:T"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
**************
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
Plot2Ddata[,] multiplots = new Plot2Ddata[3,2];
int pDegree = 2;
for(int iRow = 0; iRow < 3; iRow++) {
//var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
//                        "solver_name", "DGdegree:T"); // column for group
for(int iCol = 0; iCol < 2; iCol++) {
    if(pDegree > 6)
        continue;
 
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           if(k != pDegree) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           Fmt                     = new PlotFormat();
           switch(solver_name) {
           case SolverCodes.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_mumps: 
               Nmn           = "Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_cg: 
               Nmn           = "CG"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
           case SolverCodes.exp_direct: 
               Fmt.PointType = PointTypes.OpenBox;
               Nmn           = "Pardiso w Blk PC"; 
               break;
           case SolverCodes.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case SolverCodes.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case SolverCodes.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case SolverCodes.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown"; 
               break;
           } 
           //Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    string Title = string.Format("$k = {0}$", pDegree);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
 
    multiplots[iRow,iCol].YrangeMin = 1e-3;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e2;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    multiplots[iRow,iCol].X2rangeMin = 1e2;
    multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    if(iRow == 2) {
        multiplots[iRow,iCol].ShowLegend = true;
        multiplots[iRow,iCol].LegendPosition = new double[] {1e12,1e4};
    } else {
        multiplots[iRow,iCol].ShowLegend = false;
    }
 
    if(iCol == 1) {
        multiplots[iRow,iCol].SwapYaxes();
        multiplots[iRow,iCol].lmargin = 1;
        multiplots[iRow,iCol].rmargin = 10;
    } else {
        multiplots[iRow,iCol].lmargin = 10;
        multiplots[iRow,iCol].rmargin = 1;
    }
    multiplots[iRow,iCol].tmargin = 1;
    multiplots[iRow,iCol].bmargin = 1;
    if(iRow == 0) {
        multiplots[iRow,iCol].SwapXaxes();
    }
    if(iRow == 1 && iCol == 0) {  
        multiplots[iRow,iCol].ShowXtics = false;
    }
    pDegree++;
}                        
}
//multiplots.PlotNow();
multiplots.AddDummyPlotsForLegend(2,0);
**************
==============
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
**************
Using gnuplot: C:\Program Files\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "ConstCoeffPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoissonScaling.tex"),
   "ConstCoeffPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
