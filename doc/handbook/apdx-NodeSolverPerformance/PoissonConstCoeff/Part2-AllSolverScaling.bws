restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 4 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 224; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 197; Grid Count = 6; Path = P:\Performance_DB }
  3: { Session Count = 112; Grid Count = 6; Path = E:\Performance_oldLibs_DB }
}

 Console ready for input. Type 'help' for help.

==============
string WFlowName = "PoissonSolverPerformance_0_1";
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'PoissonSolverPerformance_0_1'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2018-11-27";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 50 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: TargetBlockSize
  12: NoOfSolverRuns
  13: ExactSolution_provided
  14: GridPartType
  15: ProjectName
  16: NoOfTimesteps
  17: Endtime
  18: saveperiod
  19: dtMin
  20: dtMax
  21: CompMode
  22: ImmediatePlotPeriod
  23: SuperSampling
  24: savetodb
  25: logFileDirectory
  26: Paramstudy_ContinueOnError
  27: DynamicLoadBalancing_RedistributeAtStartup
  28: DynamicLoadBalancing_Period
  29: DynamicLoadBalancing_ImbalanceThreshold
  30: DynamicLoadBalancing_On
  31: AdaptiveMeshRefinement
  32: CutCellQuadratureType
  33: ContinueOnIoError
  34: Grid:NoOfCells
  35: Grid:hMax
  36: Grid:hMin
  37: RegularTerminated
  38: SipMatrixAssembly_time
  39: Aggregation_basis_init_time
  40: Solver_Init_time
  41: Solver_Run_time
  42: UsedNoOfMultigridLevels
  43: minSolRunT
  44: maxSolRunT
  45: Conv
  46: NoIter
  47: NoOfCells
  48: DOFs
  49: BlockSize
}
==============
var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT    maxSolRunT    NoIter 
0:  5          2560           4           143360  497.1330584   497.1330584   84     
1:  5          320            4           17920   28.3973134    28.3973134    73     
2:  5          40             4           2240    1.1212961     1.1212961     5      
3:  3          20480          4           409600  704.9570708   704.9570708   113    
4:  3          2560           4           51200   31.6771171    31.6771171    72     
5:  3          320            4           6400    1.557986      1.557986      5      
6:  3          40             4           800     0.4036891     0.4036891     5      
7:  2          163840         4           1638400 951.588482    951.588482    67     
8:  2          20480          4           204800  103.7714009   103.7714009   66     
9:  2          2560           4           25600   9.908968      9.908968      77     
10: 2          320            4           3200    0.6306171     0.6306171     5      
11: 2          40             4           400     0.3780025     0.3780025     5      
12: 5          40             7           2240    0.6837155     0.6837155     1      
13: 3          320            7           6400    4.7405743     4.7405743     1      
14: 3          40             7           800     0.1814843     0.1814843     1      
15: 2          320            7           3200    0.8796455     0.8796455     1      
16: 2          40             7           400     0.1693735     0.1693735     1      
17: 5          2560           5           143360  2645.6874397  2645.6874397  73     
18: 5          320            5           17920   28.779916     28.779916     10     
19: 5          40             5           2240    1.7173307     1.7173307     5      
20: 3          20480          5           409600  5357.7172523  5357.7172523  122    
21: 3          2560           5           51200   128.0570934   128.0570934   29     
22: 3          320            5           6400    2.024904      2.024904      5      
23: 3          40             5           800     0.5379994     0.5379994     5      
24: 2          163840         5           1638400 25132.5672957 25132.5672957 242    
25: 2          20480          5           204800  1106.5892615  1106.5892615  98     
26: 2          2560           5           25600   24.1967331    24.1967331    23     
27: 2          320            5           3200    0.6839544     0.6839544     5      
28: 2          40             5           400     0.4598177     0.4598177     5      
29: 5          2560           3           143360  138.2808266   138.2808266   1      
30: 5          320            3           17920   4.3140273     4.3140273     1      
31: 5          40             3           2240    0.6238355     0.6238355     1      
32: 3          20480          3           409600  497.9328873   497.9328873   1      
33: 3          2560           3           51200   7.890124      7.890124      1      
34: 3          320            3           6400    0.6302231     0.6302231     1      
35: 3          40             3           800     0.3001581     0.3001581     1      
36: 2          163840         3           1638400 154.3554152   154.3554152   1      
37: 2          20480          3           204800  102.8835388   102.8835388   1      
38: 2          2560           3           25600   1.7608332     1.7608332     1      
39: 2          320            3           3200    0.3768541     0.3768541     1      
40: 2          40             3           400     0.3029201     0.3029201     1      
41: 5          2560           6           143360  935.7729459   935.7729459   24     
42: 5          320            6           17920   41.5323656    41.5323656    14     
43: 5          40             6           2240    1.9254439     1.9254439     5      
44: 3          20480          6           409600  1421.0780502  1421.0780502  30     
45: 3          2560           6           51200   78.0868387    78.0868387    17     
46: 3          320            6           6400    2.2752466     2.2752466     5      
47: 3          40             6           800     0.578944      0.578944      5      
48: 2          163840         6           1638400 4494.0690912  4494.0690912  39     
49: 2          20480          6           204800  434.8776575   434.8776575   36     
50: 2          2560           6           25600   23.7388973    23.7388973    21     
51: 2          320            6           3200    0.8816629     0.8816629     5      
52: 2          40             6           400     0.5294159     0.5294159     5      
53: 3          20480          2           409600  335.3554683   335.3554683   4496   
54: 3          2560           2           51200   18.0872109    18.0872109    1907   
55: 3          320            2           6400    1.0274752     1.0274752     772    
56: 3          40             2           800     0.0982016     0.0982016     282    
57: 2          163840         2           1638400 828.2878655   828.2878655   6364   
58: 2          20480          2           204800  49.2264378    49.2264378    2834   
59: 2          2560           2           25600   2.8354138     2.8354138     1209   
60: 2          320            2           3200    0.2271032     0.2271032     488    
61: 2          40             2           400     0.0891242     0.0891242     140    
62: 5          2560           1           143360  63.0882592    63.0882592    1      
63: 5          320            1           17920   2.1434934     2.1434934     1      
64: 5          40             1           2240    0.0833976     0.0833976     1      
65: 3          2560           1           51200   4.6903745     4.6903745     1      
66: 3          320            1           6400    0.2144427     0.2144427     1      
67: 3          40             1           800     0.0327781     0.0327781     1      
68: 2          20480          1           204800  34.9567318    34.9567318    1      
69: 2          2560           1           25600   1.0037422     1.0037422     1      
70: 2          320            1           3200    0.0562819     0.0562819     1      
71: 2          40             1           400     0.3445748     0.3445748     1      
72: 5          2560           0           143360  112.3881988   112.3881988   1      
73: 5          320            0           17920   2.3178092     2.3178092     1      
74: 5          40             0           2240    0.2650369     0.2650369     1      
75: 3          20480          0           409600  457.4925002   457.4925002   1      
76: 3          2560           0           51200   6.7603457     6.7603457     1      
77: 3          320            0           6400    0.3894396     0.3894396     1      
78: 3          40             0           800     0.1515316     0.1515316     1      
79: 2          20480          0           204800  78.808448     78.808448     1      
80: 2          2560           0           25600   1.5792638     1.5792638     1      
81: 2          320            0           3200    0.1964491     0.1964491     1      
82: 2          40             0           400     0.167278      0.167278      1      
==============
//Extract to excel-File
SubTab.ToCSVFile(WFlowName);
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "solver_name", "DGdegree:T"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//extract all Degrees and put them into array
int rowcount       = SubTab.Rows.Count;
int selectedcolumn = 0;
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows    = 3;
int columns = 1;
SolverCodes[] ignore_solvers = {SolverCodes.classic_pardiso, SolverCodes.classic_cg, SolverCodes.exp_direct, SolverCodes.exp_softpcg_schwarz, SolverCodes.exp_direct_lapack};

Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
int pDegree = 0;
for(int iRow = 0; iRow < rows; iRow++) {
for(int iCol = 0; iCol < columns; iCol++) {
    
    if(pDegree > rows*columns-1)
        continue;
    int tmpDG = -1;
    if(pDegree < DGdegrees.Length)
        tmpDG = DGdegrees[pDegree];
    
    //Create Graphs
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           if(k != tmpDG) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           //ignore the solvers specified in ingore_solvers
           foreach(SolverCodes sc in ignore_solvers){
               if(solver_name==sc){
                   System.Console.WriteLine("skipped");
                   Nmn = null;
                   Fmt = null;
               return;
               }
           }
           //process the other solvers
           Fmt = new PlotFormat();
           switch(solver_name) {
           case SolverCodes.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_mumps: 
               Nmn           = "Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_cg: 
               Nmn           = "CG"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
           case SolverCodes.exp_direct: 
               Fmt.PointType = PointTypes.OpenBox;
               Nmn           = "Pardiso w Blk PC"; 
               break;
           case SolverCodes.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case SolverCodes.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case SolverCodes.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case SolverCodes.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown";
               break;
           } 
           Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    //all about axis
    string Title = string.Format("$k = {0}$", tmpDG);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
    //specify range of axis
    multiplots[iRow,iCol].YrangeMin = 1e-2;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
    
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    pDegree++;
}                        
}
;
//multiplots.AddDummyPlotsForLegend(3,0);
multiplots.PlotNow()
**************
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
skipped
skipped
skipped
skipped
skipped
name is: classic_mumps
name is: classic_mumps
name is: classic_mumps
name is: classic_mumps
skipped
skipped
skipped
skipped
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
skipped
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
skipped
skipped
skipped
skipped
name is: classic_mumps
name is: classic_mumps
name is: classic_mumps
skipped
skipped
skipped
skipped
name is: exp_softpcg_mg
name is: exp_softpcg_mg
name is: exp_softpcg_mg
skipped
skipped
skipped
skipped
skipped
skipped
skipped
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: exp_softpcg_schwarz_directcoarse
name is: classic_mumps
name is: classic_mumps
name is: classic_mumps
skipped
skipped
skipped
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key inside top left Left reverse 
System.Drawing.Bitmap
==============
LastError
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key inside top left Left reverse 

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "ConstCoeffPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 318.
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoissonScaling.tex"),
   "ConstCoeffPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
