restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 3 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 80; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 36; Grid Count = 6; Path = P:\Performance_DB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2018-11-13";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 50 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: TargetBlockSize
  12: NoOfSolverRuns
  13: ExactSolution_provided
  14: GridPartType
  15: ProjectName
  16: NoOfTimesteps
  17: Endtime
  18: saveperiod
  19: dtMin
  20: dtMax
  21: CompMode
  22: ImmediatePlotPeriod
  23: SuperSampling
  24: savetodb
  25: logFileDirectory
  26: Paramstudy_ContinueOnError
  27: DynamicLoadBalancing_RedistributeAtStartup
  28: DynamicLoadBalancing_Period
  29: DynamicLoadBalancing_ImbalanceThreshold
  30: DynamicLoadBalancing_On
  31: AdaptiveMeshRefinement
  32: CutCellQuadratureType
  33: ContinueOnIoError
  34: Grid:NoOfCells
  35: Grid:hMax
  36: Grid:hMin
  37: UsedNoOfMultigridLevels
  38: minSolRunT
  39: maxSolRunT
  40: Conv
  41: NoIter
  42: NoOfCells
  43: DOFs
  44: BlockSize
  45: RegularTerminated
  46: SipMatrixAssembly_time
  47: Aggregation_basis_init_time
  48: Solver_Init_time
  49: Solver_Run_time
}
==============
var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT   maxSolRunT   NoIter 
0:  3          320            3           6400    0.6630391    0.6630391    1      
1:  3          40             3           800     0.3180686    0.3180686    1      
2:  2          20480          3           204800  103.9352247  103.9352247  1      
3:  2          2560           3           25600   1.8138219    1.8138219    1      
4:  2          320            3           3200    0.3856737    0.3856737    1      
5:  2          40             3           400     0.3188107    0.3188107    1      
6:  5          2560           6           143360  745.9701467  745.9701467  24     
7:  5          320            6           17920   29.6009367   29.6009367   14     
8:  5          40             6           2240    1.3172529    1.3172529    5      
9:  3          20480          6           409600  978.173381   978.173381   30     
10: 3          2560           6           51200   51.4506551   51.4506551   17     
11: 3          320            6           6400    1.5539292    1.5539292    5      
12: 3          40             6           800     0.5456465    0.5456465    5      
13: 2          163840         6           1638400 3041.2554003 3041.2554003 39     
14: 2          20480          6           204800  280.9989682  280.9989682  36     
15: 2          2560           6           25600   14.0090913   14.0090913   21     
16: 2          320            6           3200    0.6995531    0.6995531    5      
17: 2          40             6           400     0.8195228    0.8195228    5      
18: 3          20480          2           409600  300.7775069  300.7775069  4496   
19: 3          2560           2           51200   16.2753465   16.2753465   1907   
20: 3          320            2           6400    0.9725268    0.9725268    772    
21: 3          40             2           800     0.1259513    0.1259513    282    
22: 2          163840         2           1638400 802.1119429  802.1119429  6364   
23: 2          20480          2           204800  44.1541618   44.1541618   2834   
24: 2          2560           2           25600   2.6158589    2.6158589    1209   
25: 2          320            2           3200    0.2461983    0.2461983    488    
26: 2          40             2           400     0.0814964    0.0814964    140    
27: 5          2560           1           143360  62.343227    62.343227    1      
28: 5          320            1           17920   2.1058585    2.1058585    1      
29: 5          40             1           2240    0.0803845    0.0803845    1      
30: 3          2560           1           51200   4.6008129    4.6008129    1      
31: 3          320            1           6400    0.2174756    0.2174756    1      
32: 3          40             1           800     0.0309357    0.0309357    1      
33: 2          20480          1           204800  33.8600544   33.8600544   1      
34: 2          2560           1           25600   0.9700324    0.9700324    1      
35: 2          320            1           3200    0.0539627    0.0539627    1      
36: 2          40             1           400     0.337557     0.337557     1      
37: 5          2560           0           143360  110.9574367  110.9574367  1      
38: 5          320            0           17920   2.2701388    2.2701388    1      
39: 5          40             0           2240    0.2613452    0.2613452    1      
40: 3          20480          0           409600  464.1284485  464.1284485  1      
41: 3          2560           0           51200   6.4626242    6.4626242    1      
42: 3          320            0           6400    0.378776     0.378776     1      
43: 3          40             0           800     0.1478624    0.1478624    1      
44: 2          20480          0           204800  78.369234    78.369234    1      
45: 2          2560           0           25600   1.5872584    1.5872584    1      
46: 2          320            0           3200    0.1950518    0.1950518    1      
47: 2          40             0           400     0.3042771    0.3042771    1      
48: 5          2560           4           143360  522.5265008  522.5265008  84     
49: 3          20480          4           409600  737.0268793  737.0268793  113    
50: 5          320            4           17920   36.375969    36.375969    73     
51: 5          40             4           2240    1.8393759    1.8393759    5      
52: 5          2560           6           143360  1262.8511345 1262.8511345 24     
53: 3          20480          6           409600  1556.1256888 1556.1256888 30     
54: 3          2560           4           51200   38.5478257   38.5478257   72     
55: 3          320            4           6400    2.3006768    2.3006768    5      
56: 3          40             4           800     0.6021896    0.6021896    5      
57: 5          320            6           17920   48.075456    48.075456    14     
58: 5          40             6           2240    2.1373618    2.1373618    5      
59: 3          2560           6           51200   81.3303042   81.3303042   17     
60: 3          320            6           6400    2.255887     2.255887     5      
61: 3          40             6           800     0.8860619    0.8860619    5      
62: 2          163840         6           1638400 4680.1770368 4680.1770368 39     
63: 2          163840         4           1638400 1011.686184  1011.686184  67     
64: 2          20480          4           204800  107.0599399  107.0599399  66     
65: 2          20480          6           204800  448.4341211  448.4341211  36     
66: 2          2560           4           25600   12.2427857   12.2427857   77     
67: 2          320            4           3200    0.9510909    0.9510909    5      
68: 2          40             4           400     0.5870666    0.5870666    5      
69: 2          2560           6           25600   21.8992796   21.8992796   21     
70: 2          320            6           3200    1.1326499    1.1326499    5      
71: 2          40             6           400     0.844895     0.844895     5      
72: 5          2560           4           143360  522.5265008  522.5265008  84     
73: 3          20480          4           409600  737.0268793  737.0268793  113    
74: 5          320            4           17920   36.375969    36.375969    73     
75: 5          40             4           2240    1.8393759    1.8393759    5      
76: 5          2560           6           143360  1262.8511345 1262.8511345 24     
77: 3          20480          6           409600  1556.1256888 1556.1256888 30     
78: 3          2560           4           51200   38.5478257   38.5478257   72     
79: 3          320            4           6400    2.3006768    2.3006768    5      
80: 3          40             4           800     0.6021896    0.6021896    5      
81: 5          320            6           17920   48.075456    48.075456    14     
82: 5          40             6           2240    2.1373618    2.1373618    5      
83: 3          2560           6           51200   81.3303042   81.3303042   17     
84: 3          320            6           6400    2.255887     2.255887     5      
85: 3          40             6           800     0.8860619    0.8860619    5      
86: 2          163840         6           1638400 4680.1770368 4680.1770368 39     
87: 2          163840         4           1638400 1011.686184  1011.686184  67     
88: 2          20480          4           204800  107.0599399  107.0599399  66     
89: 2          20480          6           204800  448.4341211  448.4341211  36     
90: 2          2560           4           25600   12.2427857   12.2427857   77     
91: 2          320            4           3200    0.9510909    0.9510909    5      
92: 2          40             4           400     0.5870666    0.5870666    5      
93: 2          2560           6           25600   21.8992796   21.8992796   21     
94: 2          320            6           3200    1.1326499    1.1326499    5      
95: 2          40             6           400     0.844895     0.844895     5      
==============
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "solver_name", "DGdegree:T"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//extract all Degrees and put them into array
int rowcount       = SubTab.Rows.Count;
int selectedcolumn = 0;
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
Plot2Ddata[,] multiplots = new Plot2Ddata[3,2];
int pDegree = 0;

for(int iRow = 0; iRow < 3; iRow++) {
//var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
//                        "solver_name", "DGdegree:T"); // column for group
for(int iCol = 0; iCol < 2; iCol++) {
    //Space of 2*3 Multiplots is exceeded
    if(pDegree > 6)
        continue;
    int tmpDG = 0;
    if(pDegree < DGdegrees.Length)
        tmpDG = DGdegrees[pDegree];
    
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           if(k != tmpDG) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           Fmt                     = new PlotFormat();
           switch(solver_name) {
           case SolverCodes.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_mumps: 
               Nmn           = "Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_cg: 
               Nmn           = "CG"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
           case SolverCodes.exp_direct: 
               Fmt.PointType = PointTypes.OpenBox;
               Nmn           = "Pardiso w Blk PC"; 
               break;
           case SolverCodes.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case SolverCodes.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case SolverCodes.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case SolverCodes.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown"; 
               break;
           } 
           //Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       });
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,iCol].dataGroups);
 
    string Title = string.Format("$k = {0}$", tmpDG);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
 
    multiplots[iRow,iCol].YrangeMin = 1e-3;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e2;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    multiplots[iRow,iCol].X2rangeMin = 1e2;
    multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    if(iRow == 2) {
        multiplots[iRow,iCol].ShowLegend = true;
        multiplots[iRow,iCol].LegendPosition = new double[] {1e12,1e4};
    } else {
        multiplots[iRow,iCol].ShowLegend = false;
    }
 
    if(iCol == 1) {
        multiplots[iRow,iCol].SwapYaxes();
        multiplots[iRow,iCol].lmargin = 1;
        multiplots[iRow,iCol].rmargin = 10;
    } else {
        multiplots[iRow,iCol].lmargin = 10;
        multiplots[iRow,iCol].rmargin = 1;
    }
    multiplots[iRow,iCol].tmargin = 1;
    multiplots[iRow,iCol].bmargin = 1;
    if(iRow == 0) {
        multiplots[iRow,iCol].SwapXaxes();
    }
    if(iRow == 1 && iCol == 0) {  
        multiplots[iRow,iCol].ShowXtics = false;
    }
    pDegree++;
}                        
}
//multiplots.PlotNow();
multiplots.AddDummyPlotsForLegend(2,0);
**************
==============
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
**************
Using gnuplot: C:\Program Files\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "ConstCoeffPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS\BoSSS-experimental\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS\BoSSS-experimental\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 318.
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoissonScaling.tex"),
   "ConstCoeffPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
