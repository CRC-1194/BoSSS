restart
**************
  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 11 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 144; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 0; Grid Count = 6; Path = P:\Performance_DB }
  3: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  4: { Session Count = 112; Grid Count = 6; Path = E:\Performance_oldLibs_DB }
  5: { Session Count = 0; Grid Count = 3; Path = E:\db_2delete }
  6: { Session Count = 32; Grid Count = 12; Path = E:\XdgPerformance }
  7: { Session Count = 112; Grid Count = 136; Path = E:\bosss_db_performance }
  8: { Session Count = 19; Grid Count = 3; Path = F:\test_db }
  9: { Session Count = 144; Grid Count = 139; Path = Z:\weber\Performance_Kram\bosss_db_performance }
  10: { Session Count = 165; Grid Count = 6; Path = E:\Performance_newLibs_DB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("SIP_SingleNodePerformance_0");
**************
Project name is set to 'SIP_SingleNodePerformance_0'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
No. of errors|warnings: 0|2.

==============
string dateString = "2019-3-7";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
((int) LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse);
**************
44
==============
((int) LinearSolverConfig.Code.exp_softpcg_mg);
**************
42
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 76 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: penalty_poisson
  9: NoOfSolverRuns
  10: ExactSolution_provided
  11: SuppressExceptionPrompt
  12: GridPartType
  13: ProjectName
  14: NoOfTimesteps
  15: Endtime
  16: saveperiod
  17: rollingSaves
  18: dtMin
  19: dtMax
  20: CompMode
  21: ImmediatePlotPeriod
  22: SuperSampling
  23: savetodb
  24: logFileDirectory
  25: Paramstudy_ContinueOnError
  26: LinearSolver.MaxKrylovDim
  27: LinearSolver.MaxSolverIterations
  28: LinearSolver.MinSolverIterations
  29: LinearSolver.ConvergenceCriterion
  30: LinearSolver.SolverCode
  31: LinearSolver.NoOfMultigridLevels
  32: LinearSolver.exp_localPrec_muA
  33: LinearSolver.exp_localPrec_Min_dt
  34: LinearSolver.TargetBlockSize
  35: NonLinearSolver.PrecondSolver.MaxKrylovDim
  36: NonLinearSolver.PrecondSolver.MaxSolverIterations
  37: NonLinearSolver.PrecondSolver.MinSolverIterations
  38: NonLinearSolver.PrecondSolver.ConvergenceCriterion
  39: NonLinearSolver.PrecondSolver.SolverCode
  40: NonLinearSolver.PrecondSolver.NoOfMultigridLevels
  41: NonLinearSolver.PrecondSolver.exp_localPrec_muA
  42: NonLinearSolver.PrecondSolver.exp_localPrec_Min_dt
  43: NonLinearSolver.PrecondSolver.TargetBlockSize
  44: NonLinearSolver.MaxSolverIterations
  45: NonLinearSolver.MinSolverIterations
  46: NonLinearSolver.ConvergenceCriterion
  47: NonLinearSolver.UnderRelax
  48: NonLinearSolver.SolverCode
  49: DynamicLoadBalancing_RedistributeAtStartup
  50: DynamicLoadBalancing_Period
  51: DynamicLoadBalancing_ImbalanceThreshold
  52: DynamicLoadBalancing_On
  53: AdaptiveMeshRefinement
  54: CutCellQuadratureType
  55: ContinueOnIoError
  56: Grid:NoOfCells
  57: Grid:hMax
  58: Grid:hMin
  59: UsedNoOfMultigridLevels
  60: MtxBlkSz
  61: NNZMtx
  62: NNZblk
  63: MtxMB
  64: minSolRunT
  65: maxSolRunT
  66: Conv
  67: NoIter
  68: NoOfCells
  69: DOFs
  70: BlockSize
  71: RegularTerminated
  72: SipMatrixAssembly_time
  73: Aggregation_basis_init_time
  74: Solver_Init_time
  75: Solver_Run_time
}
==============
//var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (  (Convert.ToInt32(row["LinearSolver.SolverCode"]) ==  ((int) LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse))
          || (Convert.ToInt32(row["LinearSolver.SolverCode"]) ==  ((int) LinearSolverConfig.Code.exp_softpcg_mg)))
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", 
              "minSolRunT", "maxSolRunT", "UsedNoOfMultigridLevels",
              "SipMatrixAssembly_time", "Aggregation_basis_init_time", "Solver_Init_time", "Solver_Run_time");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells LinearSolver.SolverCode DOFs    minSolRunT   maxSolRunT   UsedNoOfMultigridLevels SipMatrixAssembly_time Aggregation_basis_init_time Solver_Init_time Solver_Run_time 
0:  5          2560           42                      143360  344.121727   344.121727   5                       16.3820991             13.8949742                  33.7317858       310.3542833     
1:  5          320            42                      17920   20.578554    20.578554    4                       2.4053354              1.7961679                   3.5245473        17.0215154      
2:  5          40             42                      2240    1.0420923    1.0420923    3                       0.6504721              0.2757243                   0.4186568        0.5912829       
3:  3          20480          42                      409600  383.3659385  383.3659385  7                       12.9468412             11.1578929                  25.2254906       358.0953793     
4:  3          2560           42                      51200   22.1801145   22.1801145   5                       1.9512177              1.0467363                   2.6781933        19.4687105      
5:  3          320            42                      6400    1.2762808    1.2762808    4                       0.6353381              0.1634087                   0.3449009        0.8978198       
6:  3          40             42                      800     0.4121277    0.4121277    3                       0.4149924              0.054085                    0.1332778        0.2472013       
7:  2          163840         42                      1638400 662.836025   662.836025   7                       37.5061714             228.0619783                 61.0394517       601.7025743     
8:  2          20480          42                      204800  74.7504545   74.7504545   7                       5.1045992              5.6209702                   6.7831655        67.9263287      
9:  2          2560           42                      25600   7.8007765    7.8007765    5                       0.9984881              0.3675128                   0.7831576        6.9836862       
10: 2          320            42                      3200    0.603772     0.603772     4                       0.472968               0.0737205                   0.1762594        0.3960691       
11: 2          40             42                      400     0.3909079    0.3909079    3                       0.3942099              0.0395395                   0.1128329        0.2472105       
12: 5          2560           44                      143360  883.4780154  883.4780154  5                       16.315704              13.8476845                  31.4741018       851.9706625     
13: 5          320            44                      17920   36.8502552   36.8502552   4                       2.393585               1.7954887                   3.6849217        33.1350118      
14: 5          40             44                      2240    1.7592764    1.7592764    3                       0.6590793              0.274193                    0.5487256        1.1808412       
15: 3          20480          44                      409600  1173.8560738 1173.8560738 7                       12.8388631             11.0822117                  27.8834068       1145.9292784    
16: 3          2560           44                      51200   65.455485    65.455485    5                       1.9643965              1.0386793                   3.124231         62.2988662      
17: 3          320            44                      6400    2.3520518    2.3520518    4                       0.5903971              0.1629514                   0.5078994        1.8139949       
18: 3          40             44                      800     0.6258266    0.6258266    3                       0.4142662              0.0541845                   0.2079315        0.3884084       
19: 2          163840         44                      1638400 3695.0171414 3695.0171414 7                       37.8321342             228.1394993                 157.4524467      3537.4696214    
20: 2          20480          44                      204800  369.6726581  369.6726581  7                       5.0194096              5.6443998                   9.0248841        360.6097087     
21: 2          2560           44                      25600   20.6302302   20.6302302   5                       0.9710374              0.3699786                   1.0122379        19.586441       
22: 2          320            44                      3200    0.8978939    0.8978939    4                       0.4628072              0.0765573                   0.2604887        0.607273        
23: 2          40             44                      400     0.4721976    0.4721976    3                       0.396249               0.0401236                   0.1758981        0.2669047       
24: 5          2560           42                      143360  344.121727   344.121727   5                       16.3820991             13.8949742                  33.7317858       310.3542833     
25: 5          320            42                      17920   20.578554    20.578554    4                       2.4053354              1.7961679                   3.5245473        17.0215154      
26: 5          40             42                      2240    1.0420923    1.0420923    3                       0.6504721              0.2757243                   0.4186568        0.5912829       
27: 3          20480          42                      409600  383.3659385  383.3659385  7                       12.9468412             11.1578929                  25.2254906       358.0953793     
28: 3          2560           42                      51200   22.1801145   22.1801145   5                       1.9512177              1.0467363                   2.6781933        19.4687105      
29: 3          320            42                      6400    1.2762808    1.2762808    4                       0.6353381              0.1634087                   0.3449009        0.8978198       
30: 3          40             42                      800     0.4121277    0.4121277    3                       0.4149924              0.054085                    0.1332778        0.2472013       
31: 2          163840         42                      1638400 662.836025   662.836025   7                       37.5061714             228.0619783                 61.0394517       601.7025743     
32: 2          20480          42                      204800  74.7504545   74.7504545   7                       5.1045992              5.6209702                   6.7831655        67.9263287      
33: 2          2560           42                      25600   7.8007765    7.8007765    5                       0.9984881              0.3675128                   0.7831576        6.9836862       
34: 2          320            42                      3200    0.603772     0.603772     4                       0.472968               0.0737205                   0.1762594        0.3960691       
35: 2          40             42                      400     0.3909079    0.3909079    3                       0.3942099              0.0395395                   0.1128329        0.2472105       
36: 5          2560           44                      143360  883.4780154  883.4780154  5                       16.315704              13.8476845                  31.4741018       851.9706625     
37: 5          320            44                      17920   36.8502552   36.8502552   4                       2.393585               1.7954887                   3.6849217        33.1350118      
38: 5          40             44                      2240    1.7592764    1.7592764    3                       0.6590793              0.274193                    0.5487256        1.1808412       
39: 3          20480          44                      409600  1173.8560738 1173.8560738 7                       12.8388631             11.0822117                  27.8834068       1145.9292784    
40: 3          2560           44                      51200   65.455485    65.455485    5                       1.9643965              1.0386793                   3.124231         62.2988662      
41: 3          320            44                      6400    2.3520518    2.3520518    4                       0.5903971              0.1629514                   0.5078994        1.8139949       
42: 3          40             44                      800     0.6258266    0.6258266    3                       0.4142662              0.0541845                   0.2079315        0.3884084       
43: 2          163840         44                      1638400 3695.0171414 3695.0171414 7                       37.8321342             228.1394993                 157.4524467      3537.4696214    
44: 2          20480          44                      204800  369.6726581  369.6726581  7                       5.0194096              5.6443998                   9.0248841        360.6097087     
45: 2          2560           44                      25600   20.6302302   20.6302302   5                       0.9710374              0.3699786                   1.0122379        19.586441       
46: 2          320            44                      3200    0.8978939    0.8978939    4                       0.4628072              0.0765573                   0.2604887        0.607273        
47: 2          40             44                      400     0.4721976    0.4721976    3                       0.396249               0.0401236                   0.1758981        0.2669047       
==============
**************
==============
//extract all Degrees and put them into array
int rowcount       = SubTab.Rows.Count;
int selectedcolumn = 0;
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
LinearSolverConfig.Code[] Solvers = new LinearSolverConfig.Code[] {
LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse,
LinearSolverConfig.Code.exp_softpcg_mg
};
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows = 3;
int columns = 1;

Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
AllMultiplots[iPlot] = multiplots;
int pDegree = 0;

for(int iRow = 0; iRow < rows; iRow++) {
int iCol = 0; 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k                   = Convert.ToInt32(Row["DGdegree:T"]);
           LinearSolverConfig.Code solver_name = (LinearSolverConfig.Code) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
           
           // ===!!!=== CAUTION ===!!!===
           // Solverframework (SolverEnum numbers) have changed! Please check LinearSolver and NonLinearSolver for details
           
           if(    k != DGdegrees[pDegree] 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           double mtxAssi  = Convert.ToDouble(Row["SipMatrixAssembly_time"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", DGdegrees[pDegree]);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 1e-2;
    multiplots[iRow,0].YrangeMax = 1e+4;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    
    pDegree++;                       
}
}
;
**************
==============
var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.PlotNow();
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoisson_Schwarz.tex"),
    "ConstCoeffPoisson_Schwarz.tex");
**************
==============
//CL.WriteMinimalCompileableExample("C:\\tmp\\Schwarz" + dateString + ".tex");
**************
==============
**************
==============
**************
==============
var CL = AllMultiplots[1].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.PlotNow();
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError;
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 322.
==============
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoisson_MG.tex"),
    "ConstCoeffPoisson_MG.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
