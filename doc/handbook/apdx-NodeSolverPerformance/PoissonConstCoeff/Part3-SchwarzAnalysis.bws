restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("SIP_SingleNodePerformance_0");
**************
Project name is set to 'SIP_SingleNodePerformance_0'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2020-10-23";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
**************
==============
**************
==============
LinearSolverCode[] Solvers = new LinearSolverCode[] {
LinearSolverCode.exp_Kcycle_schwarz,
LinearSolverCode.exp_gmres_levelpmg
};
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 101 instances of String {
  0: ProjectName
  1: SessionName
  2: DGdegree:T
  3: DGdegree:MPIrank
  4: DGdegree:Tex
  5: Bndtype:Dirichlet
  6: Bndtype:Neumann
  7: NoOfMultigridLevels
  8: TimesteppingMode
  9: GeneratedFromCode
  10: ControlFileText_Index
  11: InitialValues_EvaluatorsVec[0].Key
  12: dtFixed
  13: penalty_poisson
  14: NoOfSolverRuns
  15: ExactSolution_provided
  16: SuppressExceptionPrompt
  17: LinearSolver.verbose
  18: LinearSolver.MaxKrylovDim
  19: LinearSolver.MaxSolverIterations
  20: LinearSolver.MinSolverIterations
  21: LinearSolver.ConvergenceCriterion
  22: LinearSolver.SolverCode
  23: LinearSolver.NoOfMultigridLevels
  24: LinearSolver.SolverMode
  25: LinearSolver.exp_localPrec_muA
  26: LinearSolver.exp_localPrec_Min_dt
  27: LinearSolver.TargetBlockSize
  28: LinearSolver.pMaxOfCoarseSolver
  29: NonLinearSolver.verbose
  30: NonLinearSolver.MaxSolverIterations
  31: NonLinearSolver.MinSolverIterations
  32: NonLinearSolver.ConvergenceCriterion
  33: NonLinearSolver.UnderRelax
  34: NonLinearSolver.SolverCode
  35: NonLinearSolver.constantNewtonIterations
  36: NonLinearSolver.printLambda
  37: NonLinearSolver.Globalization
  38: AgglomerationThreshold
  39: MultiStepInit
  40: TimeSteppingScheme
  41: GridPartType
  42: NoOfTimesteps
  43: staticTimestep
  44: Endtime
  45: saveperiod
  46: rollingSaves
  47: dtMin
  48: dtMax
  49: ImmediatePlotPeriod
  50: SuperSampling
  51: savetodb
  52: AlternateDbPaths[0].Item1
  53: AlternateDbPaths[0].Item2
  54: AlternateDbPaths[1].Item1
  55: AlternateDbPaths[1].Item2
  56: logFileDirectory
  57: Paramstudy_ContinueOnError
  58: DynamicLoadBalancing_RedistributeAtStartup
  59: DynamicLoadBalancing_Period
  60: DynamicLoadBalancing_ImbalanceThreshold
  61: DynamicLoadBalancing_On
  62: AdaptiveMeshRefinement
  63: AMR_startUpSweeps
  64: CutCellQuadratureType
  65: ContinueOnIoError
  66: BurstSave
  67: Grid:NoOfCells
  68: Grid:SpatialDimension
  69: Grid:hMax
  70: Grid:hMin
  71: MtxBlkSz
  72: NNZMtx
  73: NNZblk
  74: MtxMB
  75: XdgCellsToLowBlock
  76: UsedMGDepth
  77: minSolRunT
  78: maxSolRunT
  79: Conv
  80: NoIter
  81: NoOfCells
  82: DOFs
  83: BlockSize
  84: RegularTerminated
  85: MatrixAssembly
  86: Aggregation_basis_init_time
  87: Solver_Init_time
  88: Solver_Run_time
  89: NoOfCores
  90: GlobalSblocks at Lvl0
  91: SblockSize at Lvl0
  92: KcycleSchwarz:XdgCellsToLowBlock
  93: KcycleSchwarz:OverlapON
  94: KcycleSchwarz:OverlapScale
  95: GlobalSblocks at Lvl1
  96: SblockSize at Lvl1
  97: GlobalSblocks at Lvl2
  98: SblockSize at Lvl2
  99: GlobalSblocks at Lvl3
  100: SblockSize at Lvl3
}
==============
Func<IDictionary<string,object>,bool> solverselection = delegate(IDictionary<string,object> row){
bool selectsolver = false;
foreach(var solver in Solvers)
    selectsolver |= (Convert.ToInt32(row["LinearSolver.SolverCode"]) == (int)solver);
return selectsolver;
}
**************
==============
var SubTab_1 = SessTab.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (  solverselection(row) && (Convert.ToInt32(row["Conv"]) != 0));
    });
**************
==============
var SubTab = SubTab_1.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "LinearSolver.SolverCode", "DOFs", 
              "minSolRunT", "maxSolRunT", "UsedMGDepth",
              "MatrixAssembly", "Aggregation_basis_init_time", "Solver_Init_time", "Solver_Run_time");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells LinearSolver.SolverCode DOFs    minSolRunT   maxSolRunT   UsedMGDepth MatrixAssembly Aggregation_basis_init_time Solver_Init_time Solver_Run_time 
0:  5          69120          47                      3870720 3691.5151736 3691.5151736 0           1268.0562725   880.4759187                 184.9218741      3505.3984299    
1:  3          163840         41                      3276800 2517.186656  2517.186656  4           249.5459149    570.3163531                 302.9525228      2211.0842085    
2:  3          163840         47                      3276800 1051.6243541 1051.6243541 0           249.956006     572.3740089                 120.5569136      929.6386771     
3:  2          163840         47                      1638400 585.9579707  585.9579707  0           79.0747036     458.2480642                 80.1474715       504.846068      
4:  2          163840         41                      1638400 550.9416691  550.9416691  4           80.3595772     461.8008262                 112.4120125      436.8053642     
5:  5          20480          41                      1146880 652.7183506  652.7183506  4           373.8752294    195.2897873                 101.9346196      550.5242476     
6:  5          20480          47                      1146880 258.6270584  258.6270584  0           373.3723234    194.5082298                 42.2699779       216.2097563     
7:  3          69120          41                      1382400 460.9360909  460.9360909  4           102.6257748    126.6468071                 74.6488534       385.6276159     
8:  3          69120          47                      1382400 253.9679551  253.9679551  0           103.1562287    127.8648294                 34.6843714       218.8565182     
9:  2          69120          47                      691200  165.6028718  165.6028718  0           32.2119287     93.2511116                  20.8229685       144.4316557     
10: 2          69120          41                      691200  172.4035375  172.4035375  4           32.2115773     92.8439499                  35.0835668       136.7988979     
11: 3          20480          47                      409600  62.7893274   62.7893274   0           30.2423824     19.8986714                  8.170378         54.4908895      
12: 3          20480          41                      409600  94.7274814   94.7274814   3           30.0864258     19.7204477                  18.4960603       76.0740393      
13: 5          2560           47                      143360  29.2391732   29.2391732   0           46.2872883     23.868451                   5.0908015        24.1141013      
14: 5          2560           41                      143360  49.3384686   49.3384686   3           46.6920947     23.9966244                  11.1344942       38.1633444      
15: 2          20480          47                      204800  35.3901368   35.3901368   0           9.7931525      10.6693672                  4.2808528        30.9973395      
16: 2          20480          41                      204800  38.599941    38.599941    3           9.7536322      10.8398539                  9.0565345        29.4025784      
17: 3          2560           47                      51200   7.5287469    7.5287469    0           4.004404       1.8039003                   1.0187533        6.4770007       
18: 5          320            47                      17920   3.3212212    3.3212212    0           6.0294106      3.2975375                   0.6558098        2.6438687       
19: 3          320            47                      6400    0.7502694    0.7502694    0           0.6900123      0.2231889                   0.1306317        0.6003852       
20: 3          2560           41                      51200   16.5793748   16.5793748   2           3.9418475      1.7431322                   1.897305         14.6449044      
21: 5          320            41                      17920   10.6015284   10.6015284   2           6.0552632      3.1677413                   1.2164938        9.3620902       
22: 2          2560           47                      25600   3.8275055    3.8275055    0           1.3954226      0.6118792                   0.488576         3.3075548       
23: 2          2560           41                      25600   5.3577363    5.3577363    2           1.406613       0.6095136                   0.976012         4.3455424       
24: 3          320            41                      6400    1.6634091    1.6634091    2           0.6987078      0.2267716                   0.2545101        1.38862         
25: 2          320            47                      3200    0.4916763    0.4916763    0           0.3598744      0.067121                    0.0719622        0.4008486       
26: 2          320            41                      3200    0.6622035    0.6622035    2           0.3590487      0.0660583                   0.142927         0.4995474       
==============
**************
==============
//extract all Degrees and put them into array
int rowcount       = SubTab.Rows.Count;
int selectedcolumn = 0;
int[] tmp= new int[20];

int count = 0;
for(int r=0;r<rowcount;r++){
System.Data.DataRow row = (System.Data.DataRow)SubTab.Rows[r];
int bla                 = Convert.ToInt32(row[selectedcolumn]);
if (tmp[bla]==0){
  tmp[bla]=1;
  count++;
}
}
int[] DGdegrees = new int[count];
int count2 = 0;
for(int i=0;i<tmp.Length;i++){
   if(tmp[i]==1){
      DGdegrees[count2]=i;
      count2++; 
   }
}
DGdegrees;
**************
List of 3 instances of Int32 {
  0: 2
  1: 3
  2: 5
}
==============
**************
==============
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
int rows = 3;
int columns = 1;

Plot2Ddata[][,] AllMultiplots = new Plot2Ddata[2][,];
for(int iPlot = 0; iPlot < AllMultiplots.Length; iPlot++) {
Plot2Ddata[,] multiplots = new Plot2Ddata[rows,columns];
AllMultiplots[iPlot] = multiplots;
int pDegree = 0;

for(int iRow = 0; iRow < rows; iRow++) {
int iCol = 0; 
    multiplots[iRow,0] = SubTab.ToPlot(
       delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k                        = Convert.ToInt32(Row["DGdegree:T"]);
           LinearSolverCode solver_name = (LinearSolverCode) Convert.ToInt32(Row["LinearSolver.SolverCode"]);
          
           
           if(    k != DGdegrees[pDegree] 
               || solver_name != Solvers[iPlot]) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           double mtxAssi  = Convert.ToDouble(Row["MatrixAssembly"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double dofs     = Convert.ToDouble(Row["DOFs"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = dofs;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       },
       4 // 4 sweeps over table
       );
 
    string Title = string.Format("$k = {0}$", DGdegrees[pDegree]);
    multiplots[iRow,0].Ylabel = Title;
    multiplots[iRow,0].LogX = true;
    multiplots[iRow,0].LogY = true;
 
    multiplots[iRow,0].YrangeMin = 1e-2;
    multiplots[iRow,0].YrangeMax = 1e+4;
    
    double[] dof = new[]{1e3,1e6};
    double[] linT = dof.Select(x => x*0.001).ToArray();
    var linP = new Plot2Ddata.XYvalues("linear", dof, linT);
    linP.Format.FromString("- black");
    ArrayTools.AddToArray(linP, ref multiplots[iRow,0].dataGroups);
    multiplots[iRow,iCol].XrangeMin = 1e1;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    //multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    //multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    //multiplots[iRow,iCol].X2rangeMin = 1e2;
    //multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    //spacing around plots
    multiplots[iRow,iCol].ShowLegend = false;
    multiplots[iRow,iCol].tmargin = 0;
    multiplots[iRow,iCol].bmargin = 1;
    multiplots[iRow,iCol].lmargin = 10;
    multiplots[iRow,iCol].rmargin = 5;
    multiplots[iRow,iCol].ShowXtics=false;

    //I am legend ...
    if(iRow == 0){
    multiplots[iRow,iCol].ShowLegend = true;
    multiplots[iRow,iCol].LegendAlignment=new string[]{"i","t","l"};
    multiplots[iRow,iCol].LegendSwap=true;
    }

    //and i am special ...
    if(iRow == rows-1)
        multiplots[iRow,iCol].ShowXtics=true;
    
    pDegree++;                       
}
}
;
**************
aggBinit/slvRun = 880.4759187/3505.3984299	 + case: 0 + yValue = 3505.3984299
aggBinit/slvRun = 880.4759187/3505.3984299	 + case: 1 + yValue = 184.9218741
aggBinit/slvRun = 880.4759187/3505.3984299	 + case: 2 + yValue = 880.4759187
aggBinit/slvRun = 880.4759187/3505.3984299	 + case: 3 + yValue = 1268.0562725

==============
// check plots
AllMultiplots[0].PlotNow();
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
System.Drawing.Bitmap
==============
// =========
// manually
// =========
//var CL = AllMultiplots[0].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
//CL.PlotNow();
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
System.ComponentModel.Win32Exception occurred: The system cannot find the file specified. Type 'LastError' for details.

==============
//CL.WriteMinimalCompileableExample(
//    Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoisson_Schwarz.tex"),
//    "ConstCoeffPoisson_Schwarz.tex");
**************
==============
// ================
// Loop it
// ==============
for(int i =0; i< Solvers.Length;i++){
string problem = "ConstCoeffPoisson";
string name    = problem + Solvers[i];
var CL         = AllMultiplots[i].ToGnuplot().PlotCairolatex(xSize:14, ySize:12);
CL.WriteMinimalCompileableExample(
    Path.Combine(CurrentDocDir, "plots", "Main"+name+".tex"),
    name+".tex");
}
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"inside top left Left reverse 

==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
