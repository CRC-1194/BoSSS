restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.SipPoisson;
**************
(1,2): warning CS0105: The using directive for `BoSSS.Application.SipPoisson' appeared previously in this namespace
No. of errors|warnings: 0|1.

==============
ExecutionQueues;
**************
List of 2 instances of BatchProcessorClient {
  0: MiniBatchProcessor client @C:\Users\weber\AppData\Local\BoSSS-LocalJobs
  1: SlurmClient: jw52xeqa@lcluster5.hrz.tu-darmstadt.de, Slurm account: project01217
}
==============
var myBatch = (SlurmClient)ExecutionQueues[1];
**************
==============
myBatch.MonoDebug = true;
**************
==============
ExecutionQueues[1].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
string WFlowName = "SIP_MPI_Hilbert_test";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.AllJobs;
**************
Project name is set to 'SIP_MPI_Hilbert_test'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
**************
==============
string dirname = "DB_SIP_MPI_HILBERT";
string winpath = @"W:\work\scratch\jw52xeqa\"+dirname;
string linpath = @"/work/scratch/jw52xeqa/"+dirname;
**************
==============
var tempDB = OpenOrCreateDatabase(winpath);
**************
Opening existing database 'W:\work\scratch\jw52xeqa\DB_SIP_MPI_HILBERT'.

==============
tempDB.Sessions
**************
List of 8 instances of ISessionInfo {
  0: SIP_MPI_Hilbert_test	SIP_J34295_k2_exp_Kcycle_schwarz	06/25/2020 16:07:39	cea7b120...
  1: SIP_256er_Hilbert_debug	SIP_J274360_k2_exp_Kcycle_schwarz*	06/25/2020 15:04:33	37e096f7...
  2: SIP_MPI_Hilbert_test	SIP_J274360_k2_exp_gmres_levelpmg*	06/25/2020 14:42:31	fa4ef8ff...
  3: SIP_MPI_Hilbert_test	SIP_J274360_k2_exp_Kcycle_schwarz*	06/25/2020 14:39:32	5dd80ee8...
  4: SIP_MPI_Hilbert_test	SIP_J135000_k2_exp_gmres_levelpmg	06/25/2020 14:35:25	c6203b1b...
  5: SIP_MPI_Hilbert_test	SIP_J69120_k2_exp_gmres_levelpmg	06/25/2020 14:35:22	0d0a77b4...
  6: SIP_MPI_Hilbert_test	SIP_J135000_k2_exp_Kcycle_schwarz	06/25/2020 14:35:26	f69a4a00...
  7: SIP_MPI_Hilbert_test	SIP_J69120_k2_exp_Kcycle_schwarz	06/25/2020 14:35:28	fdb037fe...
}
==============
//var myBatch = new SlurmClient(@"X:\Deployerie","lcluster4.hrz.tu-darmstadt.de","jw52xeqa");
**************
==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 4 instances of IGridInfo {
  0: { Guid = ec58220b-931a-4504-be1b-58c0289af3c7; Name = SIP_256er_Hilbert_debug_J34295; Cell Count = 34295; Dim = 3 }
  1: { Guid = 904cea06-00c9-485a-9f2f-773de8b9efa4; Name = SIP_MPI_Hilbert_test_J274360; Cell Count = 274360; Dim = 3 }
  2: { Guid = d8f06e7c-fcae-4185-a97b-59f11a023b8c; Name = SIP_MPI_Hilbert_test_J135000; Cell Count = 135000; Dim = 3 }
  3: { Guid = 1f3e6d97-5393-41bb-bda2-e2ae5c829c5d; Name = SIP_MPI_Hilbert_test_J69120; Cell Count = 69120; Dim = 3 }
}
==============
**************
==============
//Weak scaling
//int[] core_sweep = {4,8,16,32,64};
int[] core_sweep = {32};
int p          = 2;
int DOFperCore = 10000;
**************
==============
int[] res=new int[core_sweep.Length];
int[] test=new int[core_sweep.Length];
for(int i=0;i<core_sweep.Length;i++){
double Res   = Math.Pow(DOFperCore/Utils.Np(p)*core_sweep[i]/5,0.333333333);
int ResRndup = (int)Math.Ceiling(Res);
res[i]=ResRndup;
test[i]=ResRndup*ResRndup*ResRndup*5;
}
test;
**************
List of 1 instances of Int32 {
  0: 34295
}
==============
tempDB.Grids
**************
List of 4 instances of IGridInfo {
  0: { Guid = ec58220b-931a-4504-be1b-58c0289af3c7; Name = SIP_256er_Hilbert_debug_J34295; Cell Count = 34295; Dim = 3 }
  1: { Guid = 904cea06-00c9-485a-9f2f-773de8b9efa4; Name = SIP_MPI_Hilbert_test_J274360; Cell Count = 274360; Dim = 3 }
  2: { Guid = d8f06e7c-fcae-4185-a97b-59f11a023b8c; Name = SIP_MPI_Hilbert_test_J135000; Cell Count = 135000; Dim = 3 }
  3: { Guid = 1f3e6d97-5393-41bb-bda2-e2ae5c829c5d; Name = SIP_MPI_Hilbert_test_J69120; Cell Count = 69120; Dim = 3 }
}
==============
//Add Predefined Partitioning
static class AuxPart{
    public static Func<double[], int> GenFunc(int cores){
        double xMax = 1.0, yMax = 1.0, zMax=1.0;
        double xMin = -1.0, yMin = -1.0,zMin = -1.0;
        Func<double[], int> MakeMyPartioning = delegate (double[] X) {
            double x = X[0];
            double y = X[1];
            double z = X[2];
            
            int sx = 1;
            int sy = 1;
            int sz = 1;
            for (int i = 0; i < Math.Log(cores, 2); i++) {
                if (i % 3 == 0)
                    sx*= 2;
                else if(i % 3 == 1)
                    sy*=2;
                else
                    sz*=2;
            }
            
            double xspan   = (xMax - xMin) / sx;
            double yspan   = (yMax - yMin) / sy;
            double zspan   = (zMax - zMin) / sz;
            int rank       = int.MaxValue;
            int icore      = 0;
            for (int i = 0; i < sx; i++) {
                for (int j = 0; j < sy; j++) {
                    for(int k=0;k<sz;k++){
                        bool xtrue = x <= xspan * (i + 1) + xMin;
                        bool ytrue = y <= yspan * (j + 1) + yMin;
                        bool ztrue = z <= zspan * (k + 1) + zMin;
                        if (xtrue && ytrue && ztrue) {
                            rank = icore;
                            return rank;
                        }
                        icore++;
                    }
                }
            }

            return rank;
        };
        return MakeMyPartioning;
   }
}
**************
==============
**************
==============
int[] Resolutions_3D = res;
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res        = Resolutions_3D[cnt];    
    int lowerbound = 0;
    double[] xNodes = GenericBlas.Linspace(lowerbound, 10, Res*5 + 1);
    double[] yNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    double[] zNodes = GenericBlas.Linspace(-1, +1, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt]=null;
    foreach(IGridInfo grd in tempDB.Grids){
        bool check = grd.Name.Contains(string.Format(WorkflowMgm.CurrentProject+"_J"+ J));
        if(check){
          grids[cnt]=grd;
        }
    }
  
    //grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name.Contains(string.Format("_J"+ J));
    if(grids[cnt]==null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        //g.AddPredefinedPartitioning("hallo", AuxPart.GenFunc(core_sweep[cnt]));
        g.Name = GridName;
        
        g.EdgeTagNames.Add(1, BoundaryType.Dirichlet.ToString());
        g.EdgeTagNames.Add(2, BoundaryType.Neumann.ToString());
    
        g.DefineEdgeTags(delegate (double[] X) {
           byte ret;
             if(Math.Abs(X[0] - (double)lowerbound) <= 1.0e-6)
               ret = 1;
           else
                ret = 2;
            return ret;
        });
  
        tempDB.SaveGrid(ref g);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Creating grid with 34295 cells.
Grid Edge Tags changed.
An equivalent grid (ec58220b-931a-4504-be1b-58c0289af3c7) is already present in the database -- the grid will not be saved.

==============
// Overwrite Selection
//var ListOfgrids = new List<IGridInfo>();
//ListOfgrids.Add(tempDB.Grids.Pick(0));
//IGridInfo[] grids = ListOfgrids.ToArray();
**************
==============
**************
==============
**************
==============
grids;
**************
List of 1 instances of IGridInfo {
  0: { Guid = ec58220b-931a-4504-be1b-58c0289af3c7; Name = SIP_256er_Hilbert_debug_J34295; Cell Count = 34295; Dim = 3 }
}
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0, 0 });
**************
0
==============
**************
==============
//myCtrl.NoOfMultigridLevels = 3;
**************
==============
//myCtrl.Run();
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<SipControl> controls = new List<SipControl>();
**************
==============
**************
==============
LastError
**************
==============
using BoSSS.Solution.AdvancedSolvers;
**************
==============
// Solvers which we want to instrument:
LinearSolverCode[] solver_nameS = new LinearSolverCode[] {
    //LinearSolverCode.classic_pardiso, 
    //LinearSolverCode.classic_mumps, 
    LinearSolverCode.exp_Kcycle_schwarz, 
    //LinearSolverCode.exp_gmres_levelpmg, 
}; 
**************
==============
int[] PolyDegS={p};
//core_sweep = new int[]{4};
//IGridInfo[] tmp = grids;
//grids = new IGridInfo[]{tmp[0]};
//LinearSolverCode[] tmpsc=solver_nameS;
//solver_nameS = new LinearSolverCode[]{tmpsc[0]};
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
//int MaxDof           = 5000000;
int MaxDof           = int.MaxValue;
int JobsWithSameCore = PolyDegS.Length * solver_nameS.Length;
**************
==============
controls.Clear();
foreach(IGridInfo grd in grids) {
foreach(LinearSolverCode solver_name in solver_nameS) {
foreach(int k in PolyDegS) {
    
    var ctrl = new SipControl();
    controls.Add(ctrl);

    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);
 
    ctrl.AlternateDbPaths = new[]{
        new ValueTuple<string,string>(linpath, ""),
        new ValueTuple<string,string>(winpath, "pcmit32")
    };
    
    ctrl.savetodb = true; //for debug's sake
    ctrl.GridGuid = grd.ID;
    //ctrl.SetDGdegree(k);
    ctrl.FieldOptions.Add("T", new FieldOpts() { Degree = k, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    ctrl.FieldOptions.Add("MPIrank", new FieldOpts() { Degree = 0, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    ctrl.FieldOptions.Add("Tex", new FieldOpts() { Degree = p + 2, SaveToDB = FieldOpts.SaveToDBOpt.unspecified});
    ctrl.LinearSolver.SolverCode          = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels = int.MaxValue;
    
    ctrl.InitialValues.Add("RHS", GetFormulaObject(InitialValues.RHS));
    ctrl.AddBoundaryValue(BoundaryType.Dirichlet.ToString(), "T",
        GetFormulaObject(InitialValues.DirichletBC));
    ctrl.AddBoundaryValue(BoundaryType.Neumann.ToString(), "T",
        GetFormulaObject(InitialValues.NeumannBC));
    ctrl.SessionName       = "SIP_"+caseName;
    ctrl.TracingNamespaces = "*";
    
    //ctrl.GridPartType = BoSSS.Foundation.Grid.GridPartType.METIS;
    ctrl.GridPartType = BoSSS.Foundation.Grid.GridPartType.directHilbert;
    //ctrl.GridPartType    = BoSSS.Foundation.Grid.GridPartType.Predefined;
    //ctrl.GridPartOptions = "hallo";
    
}
}
}
**************
setting up: J34295_k2_exp_Kcycle_schwarz_

==============
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
int cnt   = 0;
int iCore = -1;
foreach(var ctrl in controls) {

    if(cnt % JobsWithSameCore == 0)
        iCore++;
         
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    var aJob = new Job(ctrl.SessionName, typeof(SipPoissonMain));
    aJob.SetControlObject(ctrl);
    ((SlurmClient)ExecutionQueues[1]).SlurmAccount = "project01217";  // Jens 
    aJob.NumberOfMPIProcs         = core_sweep[iCore];
    aJob.ExecutionTime            = "02:00:00";
    //aJob.HHLR_project             = "project01217";
    aJob.MemPerCPU                = "2500";
    aJob.UseComputeNodesExclusive = true;
    aJob.Activate(myBatch);
    cnt++;
}
**************
 Submitting: SIP_J34295_k2_exp_Kcycle_schwarz_
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: X:\Deployerie\SIP_MPI_Hilbert_test-ipPoisson2020Jun25_161844
copied 26 files.
   written file: control.obj
deployment finished.

14966341

==============
**************
System.ArgumentOutOfRangeException occurred: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index. Type 'LastError' for details.

==============
**************
==============
**************
==============
**************
==============
**************
==============
cnt 
foreach(var ctrl in controls) {
    for(){
        Console.WriteLine(" Submitting: " + ctrl.SessionName); 
        ctrl.RunBatch(myBatch); 
    }
}
**************
(2,8): error CS1525: Unexpected symbol `)'
No. of errors|warnings: 1|0.

==============
**************
No. of errors|warnings: 2|0.

==============
WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
List of 42 instances of String {
  0: PoissonConstCoeff_J40_k2_classic_mumps: 	FinishedSuccessful
  1: PoissonConstCoeff_J320_k2_classic_mumps: 	FinishedSuccessful
  2: PoissonConstCoeff_J2560_k2_classic_mumps: 	FinishedSuccessful
  3: PoissonConstCoeff_J20480_k2_classic_mumps: 	FinishedSuccessful
  4: PoissonConstCoeff_J163840_k2_classic_mumps: 	Failed
  5: PoissonConstCoeff_J40_k3_classic_mumps: 	FinishedSuccessful
  6: PoissonConstCoeff_J320_k3_classic_mumps: 	FinishedSuccessful
  7: PoissonConstCoeff_J2560_k3_classic_mumps: 	FinishedSuccessful
  8: PoissonConstCoeff_J20480_k3_classic_mumps: 	FinishedSuccessful
  9: PoissonConstCoeff_J163840_k3_classic_mumps: 	Failed
  10: PoissonConstCoeff_J40_k5_classic_mumps: 	FinishedSuccessful
  11: PoissonConstCoeff_J320_k5_classic_mumps: 	FinishedSuccessful
  12: PoissonConstCoeff_J2560_k5_classic_mumps: 	FinishedSuccessful
  13: PoissonConstCoeff_J20480_k5_classic_mumps: 	Failed
  14: PoissonConstCoeff_J40_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  15: PoissonConstCoeff_J320_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  16: PoissonConstCoeff_J2560_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  17: PoissonConstCoeff_J20480_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  18: PoissonConstCoeff_J163840_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  19: PoissonConstCoeff_J40_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  20: PoissonConstCoeff_J320_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  21: PoissonConstCoeff_J2560_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  22: PoissonConstCoeff_J20480_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  23: PoissonConstCoeff_J163840_k3_exp_softpcg_schwarz_directcoarse: 	Failed
  24: PoissonConstCoeff_J40_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  25: PoissonConstCoeff_J320_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  26: PoissonConstCoeff_J2560_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  27: PoissonConstCoeff_J20480_k5_exp_softpcg_schwarz_directcoarse: 	Failed
  28: PoissonConstCoeff_J40_k2_exp_softpcg_mg: 	FinishedSuccessful
  29: PoissonConstCoeff_J320_k2_exp_softpcg_mg: 	FinishedSuccessful
  30: PoissonConstCoeff_J2560_k2_exp_softpcg_mg: 	FinishedSuccessful
  31: PoissonConstCoeff_J20480_k2_exp_softpcg_mg: 	FinishedSuccessful
  32: PoissonConstCoeff_J163840_k2_exp_softpcg_mg: 	FinishedSuccessful
  33: PoissonConstCoeff_J40_k3_exp_softpcg_mg: 	FinishedSuccessful
  34: PoissonConstCoeff_J320_k3_exp_softpcg_mg: 	FinishedSuccessful
  35: PoissonConstCoeff_J2560_k3_exp_softpcg_mg: 	FinishedSuccessful
  36: PoissonConstCoeff_J20480_k3_exp_softpcg_mg: 	FinishedSuccessful
  37: PoissonConstCoeff_J163840_k3_exp_softpcg_mg: 	Failed
  38: PoissonConstCoeff_J40_k5_exp_softpcg_mg: 	FinishedSuccessful
  39: PoissonConstCoeff_J320_k5_exp_softpcg_mg: 	FinishedSuccessful
  40: PoissonConstCoeff_J2560_k5_exp_softpcg_mg: 	FinishedSuccessful
  41: PoissonConstCoeff_J20480_k5_exp_softpcg_mg: 	Failed
}
==============
**************
System.ArgumentOutOfRangeException occurred: Das angegebene Argument liegt außerhalb des gültigen Wertebereichs.
Parametername: index. Type 'LastError' for details.

==============
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
**************
No. of errors|warnings: 0|5.

==============
//string bla = WorkflowMgm.AllJobs.Where(s=>s.Value.Name.Equals(tempDB.Projects.Pick(0).Value.RunningOrCrashed().Pick(6).Name)).Pick(0).Value.Stdout.ToString();
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed));
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stdout.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("Stout_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
writing PoissonConstCoeff_J163840_k2_classic_mumps ...done.
writing PoissonConstCoeff_J163840_k3_classic_mumps ...done.
writing PoissonConstCoeff_J20480_k5_classic_mumps ...done.
writing PoissonConstCoeff_J163840_k3_exp_softpcg_schwarz_directcoarse ...done.
writing PoissonConstCoeff_J20480_k5_exp_softpcg_schwarz_directcoarse ...done.
writing PoissonConstCoeff_J163840_k3_exp_softpcg_mg ...done.
writing PoissonConstCoeff_J20480_k5_exp_softpcg_mg ...done.
List of 0 instances of KeyValuePair{String,IEnumerable{ISessionInfo}} {
}
==============
tempDB.Projects.Where(p=>p.Key.Equals(WFlowName)).Pick(0).Value.Where(s=>!s.SuccessfulTermination);
//tempDB.Projects.Where(p=>p.Key.Equals(WFlowName)).Pick(0).Value.Where(s=>!s.SuccessfulTermination).ForEach(s=>s.Delete(true));

**************
[PoissonConstCoeff_J40_k2_classic_mumps, PoissonConstCoeff_J40_k2_classic_mumps: FinishedSuccessful (BoSSS.Application.BoSSSpad.MiniBatchProcessorClient)]
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value;
**************
List of 35 instances of ISessionInfo {
  0: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k5_exp_softpcg_mg	03/06/2019 22:04:19	20be59f4...
  1: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k5_exp_softpcg_mg	03/06/2019 22:03:29	fb2a0e81...
  2: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k5_exp_softpcg_mg	03/06/2019 22:02:59	d9f5f1d6...
  3: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k3_exp_softpcg_mg	03/06/2019 21:44:17	e7298e8a...
  4: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k3_exp_softpcg_mg	03/06/2019 21:43:17	3c2baaf5...
  5: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k3_exp_softpcg_mg	03/06/2019 21:42:47	b6ab9302...
  6: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k3_exp_softpcg_mg	03/06/2019 21:42:17	69647868...
  7: SIP_SingleNodePerformance_0	PoissonConstCoeff_J163840_k2_exp_softpcg_mg	03/06/2019 21:23:45	ac424862...
  8: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k2_exp_softpcg_mg	03/06/2019 21:21:35	537bf03e...
  9: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k2_exp_softpcg_mg	03/06/2019 21:20:55	d9b18b42...
  10: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k2_exp_softpcg_mg	03/06/2019 21:20:25	584e45c5...
  11: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k2_exp_softpcg_mg	03/06/2019 21:19:55	d63c9ab4...
  12: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k5_exp_softpcg_schwarz_directcoarse	03/06/2019 20:55:22	9bfef1d7...
  13: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k5_exp_softpcg_schwarz_directcoarse	03/06/2019 20:54:12	70b8c072...
  14: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k5_exp_softpcg_schwarz_directcoarse	03/06/2019 20:53:42	469b242e...
  15: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k3_exp_softpcg_schwarz_directcoarse	03/06/2019 20:21:49	12be6894...
  16: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k3_exp_softpcg_schwarz_directcoarse	03/06/2019 20:20:09	df2a3e0c...
  17: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k3_exp_softpcg_schwarz_directcoarse	03/06/2019 20:19:39	656356cb...
  18: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k3_exp_softpcg_schwarz_directcoarse	03/06/2019 20:19:09	a2c20d77...
  19: SIP_SingleNodePerformance_0	PoissonConstCoeff_J163840_k2_exp_softpcg_schwarz_directcoarse	03/06/2019 19:10:03	4b5a8296...
  20: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k2_exp_softpcg_schwarz_directcoarse	03/06/2019 19:03:02	0840b2b5...
  21: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k2_exp_softpcg_schwarz_directcoarse	03/06/2019 19:02:12	2231e21e...
  22: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k2_exp_softpcg_schwarz_directcoarse	03/06/2019 19:01:42	be1b87fb...
  23: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k2_exp_softpcg_schwarz_directcoarse	03/06/2019 19:01:12	dcecb7f0...
  24: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k5_classic_mumps	03/06/2019 18:56:01	09e63307...
  25: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k5_classic_mumps	03/06/2019 18:55:31	18c32d53...
  26: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k5_classic_mumps	03/06/2019 18:55:01	a380b84a...
  27: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k3_classic_mumps	03/06/2019 18:45:40	ce81cc01...
  28: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k3_classic_mumps	03/06/2019 18:45:00	d0e3deee...
  29: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k3_classic_mumps	03/06/2019 18:44:30	ae290668...
  30: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k3_classic_mumps	03/06/2019 18:44:00	ef56b562...
  31: SIP_SingleNodePerformance_0	PoissonConstCoeff_J20480_k2_classic_mumps	03/06/2019 18:38:20	c35f0429...
  32: SIP_SingleNodePerformance_0	PoissonConstCoeff_J2560_k2_classic_mumps	03/06/2019 18:37:50	c9a6815c...
  33: SIP_SingleNodePerformance_0	PoissonConstCoeff_J320_k2_classic_mumps	03/06/2019 18:37:20	1d23c76b...
  34: SIP_SingleNodePerformance_0	PoissonConstCoeff_J40_k2_classic_mumps	03/06/2019 18:36:50	68163f3c...
}
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
70
==============
**************
==============
**************
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
**************
==============
static class AddCols {
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("SipMatrixAssembly");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Aggregation_basis_init");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Init");
        var nd  = ndS.ElementAt(0);
        //Console.WriteLine("Number of nodes: " + ndS.Count() + " cc " + nd.CallCount );
        return nd.TimeSpentInMethod.TotalSeconds / nd.CallCount;
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Run");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
}
**************
==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SipMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Aggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Run_time", AddCols.Solver_Run_time);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
**************
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
No. of errors|warnings: 0|1.

==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
LastError;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
