restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 2 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 0; Grid Count = 0; Path = C:\tmp\fk_temp_db }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.SipPoisson;
**************
==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
var tempDB = OpenOrCreateDatabase("C:\\tmp\\fk_temp_db");
**************
Opening existing database 'C:\tmp\fk_temp_db'.

==============
//var myBatch1 = new MiniBatchProcessorClient(@"C:\tmp\deploy");
//var myBatch2 = new MiniBatchProcessorClient(@"C:\tmp\deploy");
//var myBatch3 = new MiniBatchProcessorClient(@"C:\tmp\deploy");
//var myBatch4 = new MiniBatchProcessorClient(@"C:\tmp\deploy");
//MiniBatchProcessorClient[] TestBatches = {myBatch1,myBatch2,myBatch3,myBatch4};
var myBatch = new MiniBatchProcessorClient(@"C:\tmp\deploy");
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Starting mini batch processor in external process...
Started mini batch processor on local machine, process id is 13768.

==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 0 instances of IGridInfo {
}
==============
int[] Resolutions_3D = new int[] { 2, 4, 8, 16, 32, 64 };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    double[] xNodes = GenericBlas.Linspace(0, 10, Res*5 + 1);
    double[] yNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    double[] zNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.Name = GridName;
        
        g.EdgeTagNames.Add(1, BoundaryType.Dirichlet.ToString());
        g.EdgeTagNames.Add(2, BoundaryType.Neumann.ToString());
    
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            if(Math.Abs(X[0] - 0.0) <= 1.0e-6)
                ret = 1;
            else
                ret = 2;
            return ret;
        });
      
        tempDB.SaveGrid(ref g);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
    
}
**************
Creating grid with 40 cells.
Creating grid with 320 cells.
Creating grid with 2560 cells.
Creating grid with 20480 cells.
Creating grid with 163840 cells.
Creating grid with 1310720 cells.

==============
grids;
**************
List of 6 instances of IGridInfo {
  0: { Guid = 9a10788a-a2e8-4291-8a90-33f9fd225e19; Name = PoissonSolverPerformance_J40; Cell Count = 40; Dim = 3 }
  1: { Guid = ee16a351-cbeb-4ca1-842b-d8d4bbcdad85; Name = PoissonSolverPerformance_J320; Cell Count = 320; Dim = 3 }
  2: { Guid = 91edad8e-70d8-46a5-b853-b5a8c01b77aa; Name = PoissonSolverPerformance_J2560; Cell Count = 2560; Dim = 3 }
  3: { Guid = c8debc1e-16e7-4332-b69b-ba16266690cd; Name = PoissonSolverPerformance_J20480; Cell Count = 20480; Dim = 3 }
  4: { Guid = cff05621-aa69-4853-b4dc-88d70da2a27f; Name = PoissonSolverPerformance_J163840; Cell Count = 163840; Dim = 3 }
  5: { Guid = bb01590c-e20a-418d-9ddc-75dea56cc790; Name = PoissonSolverPerformance_J1310720; Cell Count = 1310720; Dim = 3 }
}
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0, 0 });
**************
0
==============
**************
==============
//myCtrl.NoOfMultigridLevels = 3;
**************
==============
//myCtrl.Run();
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<SipControl> controls = new List<SipControl>();
**************
==============
// polynomial degrees to test
int[] PolyDegS = new int[] {2, 3, 5, 8};
//int[] PolyDegS = new int[] {2}; // reduced options for dev.
**************
==============
// Solvers which we want to instrument:
SolverCodes[] solver_nameS = new SolverCodes[] {
      SolverCodes.classic_pardiso, 
      SolverCodes.classic_mumps, 
      SolverCodes.classic_cg,
      SolverCodes.exp_softpcg_schwarz_directcoarse,
      SolverCodes.exp_direct,
      SolverCodes.exp_softpcg_schwarz,
      SolverCodes.exp_direct_lapack,
      SolverCodes.exp_softpcg_mg
}; 
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
int MaxDof = 5000000;
**************
==============
controls.Clear();
foreach(SolverCodes solver_name in solver_nameS) {
foreach(int k in PolyDegS) {
int iGrd = 0;    
foreach(IGridInfo grd in grids) {
    iGrd ++;
    //if(k >= 3 && iGrd > 6)
    //    continue; 
    //if(k >= 4 && iGrd > 5)
    //    continue; 
    //if(k >= 5 && iGrd > 4)
    //    continue; 
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);

    var ctrl = new SipControl();
    controls.Add(ctrl);
    
    ctrl.SessionName = caseName;
    ctrl.SetDatabase(tempDB);
    ctrl.SetGrid(grd);
    ctrl.SetDGdegree(k);
    ctrl.solver_name         = solver_name;
    ctrl.NoOfMultigridLevels = int.MaxValue;
    
    ctrl.InitialValues.Add("RHS", GetFormulaObject(InitialValues.RHS));
    ctrl.AddBoundaryValue(BoundaryType.Dirichlet.ToString(), "T",
        GetFormulaObject(InitialValues.DirichletBC));
    ctrl.AddBoundaryValue(BoundaryType.Neumann.ToString(), "T",
        GetFormulaObject(InitialValues.NeumannBC));
}
}
}

**************
setting up: J40_k2_classic_pardiso
setting up: J320_k2_classic_pardiso
setting up: J2560_k2_classic_pardiso
setting up: J20480_k2_classic_pardiso
setting up: J163840_k2_classic_pardiso
setting up: J40_k3_classic_pardiso
setting up: J320_k3_classic_pardiso
setting up: J2560_k3_classic_pardiso
setting up: J20480_k3_classic_pardiso
setting up: J163840_k3_classic_pardiso
setting up: J40_k5_classic_pardiso
setting up: J320_k5_classic_pardiso
setting up: J2560_k5_classic_pardiso
setting up: J20480_k5_classic_pardiso
setting up: J40_k8_classic_pardiso
setting up: J320_k8_classic_pardiso
setting up: J2560_k8_classic_pardiso
setting up: J20480_k8_classic_pardiso
setting up: J40_k2_classic_mumps
setting up: J320_k2_classic_mumps
setting up: J2560_k2_classic_mumps
setting up: J20480_k2_classic_mumps
setting up: J163840_k2_classic_mumps
setting up: J40_k3_classic_mumps
setting up: J320_k3_classic_mumps
setting up: J2560_k3_classic_mumps
setting up: J20480_k3_classic_mumps
setting up: J163840_k3_classic_mumps
setting up: J40_k5_classic_mumps
setting up: J320_k5_classic_mumps
setting up: J2560_k5_classic_mumps
setting up: J20480_k5_classic_mumps
setting up: J40_k8_classic_mumps
setting up: J320_k8_classic_mumps
setting up: J2560_k8_classic_mumps
setting up: J20480_k8_classic_mumps
setting up: J40_k2_classic_cg
setting up: J320_k2_classic_cg
setting up: J2560_k2_classic_cg
setting up: J20480_k2_classic_cg
setting up: J163840_k2_classic_cg
setting up: J40_k3_classic_cg
setting up: J320_k3_classic_cg
setting up: J2560_k3_classic_cg
setting up: J20480_k3_classic_cg
setting up: J163840_k3_classic_cg
setting up: J40_k5_classic_cg
setting up: J320_k5_classic_cg
setting up: J2560_k5_classic_cg
setting up: J20480_k5_classic_cg
setting up: J40_k8_classic_cg
setting up: J320_k8_classic_cg
setting up: J2560_k8_classic_cg
setting up: J20480_k8_classic_cg
setting up: J40_k2_exp_softpcg_schwarz_directcoarse
setting up: J320_k2_exp_softpcg_schwarz_directcoarse
setting up: J2560_k2_exp_softpcg_schwarz_directcoarse
setting up: J20480_k2_exp_softpcg_schwarz_directcoarse
setting up: J163840_k2_exp_softpcg_schwarz_directcoarse
setting up: J40_k3_exp_softpcg_schwarz_directcoarse
setting up: J320_k3_exp_softpcg_schwarz_directcoarse
setting up: J2560_k3_exp_softpcg_schwarz_directcoarse
setting up: J20480_k3_exp_softpcg_schwarz_directcoarse
setting up: J163840_k3_exp_softpcg_schwarz_directcoarse
setting up: J40_k5_exp_softpcg_schwarz_directcoarse
setting up: J320_k5_exp_softpcg_schwarz_directcoarse
setting up: J2560_k5_exp_softpcg_schwarz_directcoarse
setting up: J20480_k5_exp_softpcg_schwarz_directcoarse
setting up: J40_k8_exp_softpcg_schwarz_directcoarse
setting up: J320_k8_exp_softpcg_schwarz_directcoarse
setting up: J2560_k8_exp_softpcg_schwarz_directcoarse
setting up: J20480_k8_exp_softpcg_schwarz_directcoarse
setting up: J40_k2_exp_direct
setting up: J320_k2_exp_direct
setting up: J2560_k2_exp_direct
setting up: J20480_k2_exp_direct
setting up: J163840_k2_exp_direct
setting up: J40_k3_exp_direct
setting up: J320_k3_exp_direct
setting up: J2560_k3_exp_direct
setting up: J20480_k3_exp_direct
setting up: J163840_k3_exp_direct
setting up: J40_k5_exp_direct
setting up: J320_k5_exp_direct
setting up: J2560_k5_exp_direct
setting up: J20480_k5_exp_direct
setting up: J40_k8_exp_direct
setting up: J320_k8_exp_direct
setting up: J2560_k8_exp_direct
setting up: J20480_k8_exp_direct
setting up: J40_k2_exp_softpcg_schwarz
setting up: J320_k2_exp_softpcg_schwarz
setting up: J2560_k2_exp_softpcg_schwarz
setting up: J20480_k2_exp_softpcg_schwarz
setting up: J163840_k2_exp_softpcg_schwarz
setting up: J40_k3_exp_softpcg_schwarz
setting up: J320_k3_exp_softpcg_schwarz
setting up: J2560_k3_exp_softpcg_schwarz
setting up: J20480_k3_exp_softpcg_schwarz
setting up: J163840_k3_exp_softpcg_schwarz
setting up: J40_k5_exp_softpcg_schwarz
setting up: J320_k5_exp_softpcg_schwarz
setting up: J2560_k5_exp_softpcg_schwarz
setting up: J20480_k5_exp_softpcg_schwarz
setting up: J40_k8_exp_softpcg_schwarz
setting up: J320_k8_exp_softpcg_schwarz
setting up: J2560_k8_exp_softpcg_schwarz
setting up: J20480_k8_exp_softpcg_schwarz
setting up: J40_k2_exp_direct_lapack
setting up: J320_k2_exp_direct_lapack
setting up: J2560_k2_exp_direct_lapack
setting up: J20480_k2_exp_direct_lapack
setting up: J163840_k2_exp_direct_lapack
setting up: J40_k3_exp_direct_lapack
setting up: J320_k3_exp_direct_lapack
setting up: J2560_k3_exp_direct_lapack
setting up: J20480_k3_exp_direct_lapack
setting up: J163840_k3_exp_direct_lapack
setting up: J40_k5_exp_direct_lapack
setting up: J320_k5_exp_direct_lapack
setting up: J2560_k5_exp_direct_lapack
setting up: J20480_k5_exp_direct_lapack
setting up: J40_k8_exp_direct_lapack
setting up: J320_k8_exp_direct_lapack
setting up: J2560_k8_exp_direct_lapack
setting up: J20480_k8_exp_direct_lapack
setting up: J40_k2_exp_softpcg_mg
setting up: J320_k2_exp_softpcg_mg
setting up: J2560_k2_exp_softpcg_mg
setting up: J20480_k2_exp_softpcg_mg
setting up: J163840_k2_exp_softpcg_mg
setting up: J40_k3_exp_softpcg_mg
setting up: J320_k3_exp_softpcg_mg
setting up: J2560_k3_exp_softpcg_mg
setting up: J20480_k3_exp_softpcg_mg
setting up: J163840_k3_exp_softpcg_mg
setting up: J40_k5_exp_softpcg_mg
setting up: J320_k5_exp_softpcg_mg
setting up: J2560_k5_exp_softpcg_mg
setting up: J20480_k5_exp_softpcg_mg
setting up: J40_k8_exp_softpcg_mg
setting up: J320_k8_exp_softpcg_mg
setting up: J2560_k8_exp_softpcg_mg
setting up: J20480_k8_exp_softpcg_mg

==============
// ==========
// Launch Job
// ==========
**************
==============
//var job = new Job("zwa", solver);
**************
==============
//myCtrl.GetType();
**************
==============
//job.SetControlObject(myCtrl);
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("softpcg") && s.Name.Contains("k2") && s.Name.Contains("mg"));//.ForEach(si => si.Delete(true));
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("exp_direct")).ForEach(si => si.Delete());
**************
==============
**************
==============
//int cnt = 0;
foreach(var ctrl in controls) {
    Console.WriteLine(" Submitting: " + ctrl.SessionName);
    ctrl.RunBatch(myBatch);
    //ctrl.RunBatch(TestBatches[cnt]); 
    //cnt = (cnt+ 1) % TestBatches.Length;
}
**************
 Submitting: J40_k2_classic_pardiso
System.ArgumentException occurred: Job with name 'J40_k2_classic_pardiso' is already defined in the workflow management.. Type 'LastError' for details.

==============
**************
==============
WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
List of 144 instances of String {
  0: J40_k2_classic_pardiso: 	FinishedSuccessful
  1: J320_k2_classic_pardiso: 	FinishedSuccessful
  2: J2560_k2_classic_pardiso: 	FinishedSuccessful
  3: J20480_k2_classic_pardiso: 	FinishedSuccessful
  4: J163840_k2_classic_pardiso: 	FinishedSuccessful
  5: J40_k3_classic_pardiso: 	FinishedSuccessful
  6: J320_k3_classic_pardiso: 	FinishedSuccessful
  7: J2560_k3_classic_pardiso: 	FinishedSuccessful
  8: J20480_k3_classic_pardiso: 	FinishedSuccessful
  9: J163840_k3_classic_pardiso: 	Failed
  10: J40_k5_classic_pardiso: 	FinishedSuccessful
  11: J320_k5_classic_pardiso: 	FinishedSuccessful
  12: J2560_k5_classic_pardiso: 	FinishedSuccessful
  13: J20480_k5_classic_pardiso: 	Failed
  14: J40_k8_classic_pardiso: 	Failed
  15: J320_k8_classic_pardiso: 	Failed
  16: J2560_k8_classic_pardiso: 	Failed
  17: J20480_k8_classic_pardiso: 	Failed
  18: J40_k2_classic_mumps: 	FinishedSuccessful
  19: J320_k2_classic_mumps: 	FinishedSuccessful
  20: J2560_k2_classic_mumps: 	FinishedSuccessful
  21: J20480_k2_classic_mumps: 	FinishedSuccessful
  22: J163840_k2_classic_mumps: 	Failed
  23: J40_k3_classic_mumps: 	FinishedSuccessful
  24: J320_k3_classic_mumps: 	FinishedSuccessful
  25: J2560_k3_classic_mumps: 	FinishedSuccessful
  26: J20480_k3_classic_mumps: 	Failed
  27: J163840_k3_classic_mumps: 	Failed
  28: J40_k5_classic_mumps: 	FinishedSuccessful
  29: J320_k5_classic_mumps: 	FinishedSuccessful
  30: J2560_k5_classic_mumps: 	FinishedSuccessful
  31: J20480_k5_classic_mumps: 	Failed
  32: J40_k8_classic_mumps: 	Failed
  33: J320_k8_classic_mumps: 	Failed
  34: J2560_k8_classic_mumps: 	Failed
  35: J20480_k8_classic_mumps: 	Failed
  36: J40_k2_classic_cg: 	FinishedSuccessful
  37: J320_k2_classic_cg: 	FinishedSuccessful
  38: J2560_k2_classic_cg: 	FinishedSuccessful
  39: J20480_k2_classic_cg: 	FinishedSuccessful
  40: J163840_k2_classic_cg: 	FinishedSuccessful
  41: J40_k3_classic_cg: 	FinishedSuccessful
  42: J320_k3_classic_cg: 	FinishedSuccessful
  43: J2560_k3_classic_cg: 	FinishedSuccessful
  44: J20480_k3_classic_cg: 	FinishedSuccessful
  45: J163840_k3_classic_cg: 	Failed
  46: J40_k5_classic_cg: 	FinishedSuccessful
  47: J320_k5_classic_cg: 	FinishedSuccessful
  48: J2560_k5_classic_cg: 	FinishedSuccessful
  49: J20480_k5_classic_cg: 	Failed
  50: J40_k8_classic_cg: 	Failed
  51: J320_k8_classic_cg: 	Failed
  52: J2560_k8_classic_cg: 	Failed
  53: J20480_k8_classic_cg: 	Failed
  54: J40_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  55: J320_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  56: J2560_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  57: J20480_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  58: J163840_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  59: J40_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  60: J320_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  61: J2560_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  62: J20480_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  63: J163840_k3_exp_softpcg_schwarz_directcoarse: 	InProgress
  64: J40_k5_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  65: J320_k5_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  66: J2560_k5_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  67: J20480_k5_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  68: J40_k8_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  69: J320_k8_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  70: J2560_k8_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  71: J20480_k8_exp_softpcg_schwarz_directcoarse: 	PendingInExecutionQueue
  72: J40_k2_exp_direct: 	PendingInExecutionQueue
  73: J320_k2_exp_direct: 	PendingInExecutionQueue
  74: J2560_k2_exp_direct: 	PendingInExecutionQueue
  75: J20480_k2_exp_direct: 	PendingInExecutionQueue
  76: J163840_k2_exp_direct: 	PendingInExecutionQueue
  77: J40_k3_exp_direct: 	PendingInExecutionQueue
  78: J320_k3_exp_direct: 	PendingInExecutionQueue
  79: J2560_k3_exp_direct: 	PendingInExecutionQueue
  80: J20480_k3_exp_direct: 	PendingInExecutionQueue
  81: J163840_k3_exp_direct: 	PendingInExecutionQueue
  82: J40_k5_exp_direct: 	PendingInExecutionQueue
  83: J320_k5_exp_direct: 	PendingInExecutionQueue
  84: J2560_k5_exp_direct: 	PendingInExecutionQueue
  85: J20480_k5_exp_direct: 	PendingInExecutionQueue
  86: J40_k8_exp_direct: 	PendingInExecutionQueue
  87: J320_k8_exp_direct: 	PendingInExecutionQueue
  88: J2560_k8_exp_direct: 	PendingInExecutionQueue
  89: J20480_k8_exp_direct: 	PendingInExecutionQueue
  90: J40_k2_exp_softpcg_schwarz: 	PendingInExecutionQueue
  91: J320_k2_exp_softpcg_schwarz: 	PendingInExecutionQueue
  92: J2560_k2_exp_softpcg_schwarz: 	PendingInExecutionQueue
  93: J20480_k2_exp_softpcg_schwarz: 	PendingInExecutionQueue
  94: J163840_k2_exp_softpcg_schwarz: 	PendingInExecutionQueue
  95: J40_k3_exp_softpcg_schwarz: 	PendingInExecutionQueue
  96: J320_k3_exp_softpcg_schwarz: 	PendingInExecutionQueue
  97: J2560_k3_exp_softpcg_schwarz: 	PendingInExecutionQueue
  98: J20480_k3_exp_softpcg_schwarz: 	PendingInExecutionQueue
  99: J163840_k3_exp_softpcg_schwarz: 	PendingInExecutionQueue
  100: J40_k5_exp_softpcg_schwarz: 	PendingInExecutionQueue
  101: J320_k5_exp_softpcg_schwarz: 	PendingInExecutionQueue
  102: J2560_k5_exp_softpcg_schwarz: 	PendingInExecutionQueue
  103: J20480_k5_exp_softpcg_schwarz: 	PendingInExecutionQueue
  104: J40_k8_exp_softpcg_schwarz: 	PendingInExecutionQueue
  105: J320_k8_exp_softpcg_schwarz: 	PendingInExecutionQueue
  106: J2560_k8_exp_softpcg_schwarz: 	PendingInExecutionQueue
  107: J20480_k8_exp_softpcg_schwarz: 	PendingInExecutionQueue
  108: J40_k2_exp_direct_lapack: 	PendingInExecutionQueue
  109: J320_k2_exp_direct_lapack: 	PendingInExecutionQueue
  110: J2560_k2_exp_direct_lapack: 	PendingInExecutionQueue
  111: J20480_k2_exp_direct_lapack: 	PendingInExecutionQueue
  112: J163840_k2_exp_direct_lapack: 	PendingInExecutionQueue
  113: J40_k3_exp_direct_lapack: 	PendingInExecutionQueue
  114: J320_k3_exp_direct_lapack: 	PendingInExecutionQueue
  115: J2560_k3_exp_direct_lapack: 	PendingInExecutionQueue
  116: J20480_k3_exp_direct_lapack: 	PendingInExecutionQueue
  117: J163840_k3_exp_direct_lapack: 	PendingInExecutionQueue
  118: J40_k5_exp_direct_lapack: 	PendingInExecutionQueue
  119: J320_k5_exp_direct_lapack: 	PendingInExecutionQueue
  120: J2560_k5_exp_direct_lapack: 	PendingInExecutionQueue
  121: J20480_k5_exp_direct_lapack: 	PendingInExecutionQueue
  122: J40_k8_exp_direct_lapack: 	PendingInExecutionQueue
  123: J320_k8_exp_direct_lapack: 	PendingInExecutionQueue
  124: J2560_k8_exp_direct_lapack: 	PendingInExecutionQueue
  125: J20480_k8_exp_direct_lapack: 	PendingInExecutionQueue
  126: J40_k2_exp_softpcg_mg: 	PendingInExecutionQueue
  127: J320_k2_exp_softpcg_mg: 	PendingInExecutionQueue
  128: J2560_k2_exp_softpcg_mg: 	PendingInExecutionQueue
  129: J20480_k2_exp_softpcg_mg: 	PendingInExecutionQueue
  130: J163840_k2_exp_softpcg_mg: 	PendingInExecutionQueue
  131: J40_k3_exp_softpcg_mg: 	PendingInExecutionQueue
  132: J320_k3_exp_softpcg_mg: 	PendingInExecutionQueue
  133: J2560_k3_exp_softpcg_mg: 	PendingInExecutionQueue
  134: J20480_k3_exp_softpcg_mg: 	PendingInExecutionQueue
  135: J163840_k3_exp_softpcg_mg: 	PendingInExecutionQueue
  136: J40_k5_exp_softpcg_mg: 	PendingInExecutionQueue
  137: J320_k5_exp_softpcg_mg: 	PendingInExecutionQueue
  138: J2560_k5_exp_softpcg_mg: 	PendingInExecutionQueue
  139: J20480_k5_exp_softpcg_mg: 	PendingInExecutionQueue
  140: J40_k8_exp_softpcg_mg: 	PendingInExecutionQueue
  141: J320_k8_exp_softpcg_mg: 	PendingInExecutionQueue
  142: J2560_k8_exp_softpcg_mg: 	PendingInExecutionQueue
  143: J20480_k8_exp_softpcg_mg: 	PendingInExecutionQueue
}
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
0
==============
**************
==============
**************
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
**************
==============
static class AddCols {
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("SipMatrixAssembly");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Aggregation_basis_init");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Init");
        var nd  = ndS.ElementAt(0);
        //Console.WriteLine("Number of nodes: " + ndS.Count() + " cc " + nd.CallCount );
        return nd.TimeSpentInMethod.TotalSeconds / nd.CallCount;
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Run");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
}
**************
==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SipMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Aggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Run_time", AddCols.Solver_Run_time);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
False
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
