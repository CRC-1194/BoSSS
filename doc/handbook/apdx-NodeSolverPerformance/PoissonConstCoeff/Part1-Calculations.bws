restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 10 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 34; Path = C:\BoSSS_DB }
  1: { Session Count = 144; Grid Count = 6; Path = C:\tmp\fk_temp_db }
  2: { Session Count = 0; Grid Count = 6; Path = P:\Performance_DB }
  3: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  4: { Session Count = 112; Grid Count = 6; Path = E:\Performance_oldLibs_DB }
  5: { Session Count = 0; Grid Count = 3; Path = E:\db_2delete }
  6: { Session Count = 34; Grid Count = 9; Path = E:\XdgPerformance }
  7: { Session Count = 112; Grid Count = 136; Path = E:\bosss_db_performance }
  8: { Session Count = 3; Grid Count = 2; Path = F:\test_db }
  9: { Session Count = 144; Grid Count = 139; Path = Z:\weber\Performance_Kram\bosss_db_performance }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.SipPoisson;
**************
==============
**************
==============
string WFlowName = "SIP_SingleNodePerformance_1";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.AllJobs;
**************
Project name is set to 'SIP_SingleNodePerformance_1'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
//var tempDB = OpenOrCreateDatabase(@"\\dc1\userspace\weber\Performance_oldLibs_DB");
var tempDB = OpenOrCreateDatabase(@"E:\Performance_newLibs_DB");
**************
Opening existing database 'E:\Performance_newLibs_DB'.

==============
var myBatch = new MiniBatchProcessorClient(@"G:\deploy-Mini");
//var myBatch = new MsHPC2012Client(@"\\dc1\userspace\weber\deploy","hpccluster",ComputeNodes : new[] {"hpccluster"});
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Mini batch processor is already running.

==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
tempDB.Grids;
**************
List of 6 instances of IGridInfo {
  0: { Guid = bb01590c-e20a-418d-9ddc-75dea56cc790; Name = PoissonSolverPerformance_J1310720; Cell Count = 1310720; Dim = 3 }
  1: { Guid = cff05621-aa69-4853-b4dc-88d70da2a27f; Name = PoissonSolverPerformance_J163840; Cell Count = 163840; Dim = 3 }
  2: { Guid = c8debc1e-16e7-4332-b69b-ba16266690cd; Name = PoissonSolverPerformance_J20480; Cell Count = 20480; Dim = 3 }
  3: { Guid = 91edad8e-70d8-46a5-b853-b5a8c01b77aa; Name = PoissonSolverPerformance_J2560; Cell Count = 2560; Dim = 3 }
  4: { Guid = ee16a351-cbeb-4ca1-842b-d8d4bbcdad85; Name = PoissonSolverPerformance_J320; Cell Count = 320; Dim = 3 }
  5: { Guid = 9a10788a-a2e8-4291-8a90-33f9fd225e19; Name = PoissonSolverPerformance_J40; Cell Count = 40; Dim = 3 }
}
==============
int[] Resolutions_3D = new int[] { 2, 4, 8, 16, 32, 64 };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    double[] xNodes = GenericBlas.Linspace(0, 10, Res*5 + 1);
    double[] yNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    double[] zNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.Name = GridName;
        
        g.EdgeTagNames.Add(1, BoundaryType.Dirichlet.ToString());
        g.EdgeTagNames.Add(2, BoundaryType.Neumann.ToString());
    
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            if(Math.Abs(X[0] - 0.0) <= 1.0e-6)
                ret = 1;
            else
                ret = 2;
            return ret;
        });
      
        tempDB.SaveGrid(ref g);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
    
}
**************
Creating grid with 40 cells.
An equivalent grid is already present in the database -- the grid will not be saved.
Creating grid with 320 cells.
An equivalent grid is already present in the database -- the grid will not be saved.
Creating grid with 2560 cells.
An equivalent grid is already present in the database -- the grid will not be saved.
Creating grid with 20480 cells.
An equivalent grid is already present in the database -- the grid will not be saved.
Creating grid with 163840 cells.
An equivalent grid is already present in the database -- the grid will not be saved.
Creating grid with 1310720 cells.
An equivalent grid is already present in the database -- the grid will not be saved.

==============
grids;
**************
List of 6 instances of IGridInfo {
  0: { Guid = 9a10788a-a2e8-4291-8a90-33f9fd225e19; Name = PoissonSolverPerformance_J40; Cell Count = 40; Dim = 3 }
  1: { Guid = ee16a351-cbeb-4ca1-842b-d8d4bbcdad85; Name = PoissonSolverPerformance_J320; Cell Count = 320; Dim = 3 }
  2: { Guid = 91edad8e-70d8-46a5-b853-b5a8c01b77aa; Name = PoissonSolverPerformance_J2560; Cell Count = 2560; Dim = 3 }
  3: { Guid = c8debc1e-16e7-4332-b69b-ba16266690cd; Name = PoissonSolverPerformance_J20480; Cell Count = 20480; Dim = 3 }
  4: { Guid = cff05621-aa69-4853-b4dc-88d70da2a27f; Name = PoissonSolverPerformance_J163840; Cell Count = 163840; Dim = 3 }
  5: { Guid = bb01590c-e20a-418d-9ddc-75dea56cc790; Name = PoissonSolverPerformance_J1310720; Cell Count = 1310720; Dim = 3 }
}
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0, 0 });
**************
0
==============
**************
==============
//myCtrl.NoOfMultigridLevels = 3;
**************
==============
//myCtrl.Run();
**************
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<SipControl> controls = new List<SipControl>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
int[] PolyDegS = new int[] {2,3,5}; // reduced options for dev.
**************
==============
using BoSSS.Solution.AdvancedSolvers;
**************
==============
// Solvers which we want to instrument:
LinearSolverConfig.Code[] solver_nameS = new LinearSolverConfig.Code[] {
    //SolverCodes.classic_pardiso, 
    LinearSolverConfig.Code.classic_mumps, 
    LinearSolverConfig.Code.classic_cg,
    LinearSolverConfig.Code.exp_softpcg_schwarz_directcoarse,
    //SolverCodes.exp_direct,
    //SolverCodes.exp_softpcg_schwarz,
    //SolverCodes.exp_direct_lapack,
    LinearSolverConfig.Code.exp_softpcg_mg
}; 
**************
==============
// MaxDof for one claculation (we skip fine grids for higher polynomial orders)
int MaxDof = 5000000;
**************
==============
controls.Clear();
foreach(LinearSolverConfig.Code solver_name in solver_nameS) {
foreach(int k in PolyDegS) {
int iGrd = 0;    
foreach(IGridInfo grd in grids) {
    iGrd ++;
    //if(k >= 3 && iGrd > 6)
    //    continue; 
    //if(k >= 4 && iGrd > 5)
    //    continue; 
    //if(k >= 5 && iGrd > 4)
    //    continue; 
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);

    var ctrl = new SipControl();
    controls.Add(ctrl);
    
    //ctrl.SessionName = caseName;
    ctrl.SetDatabase(tempDB);
    ctrl.SetGrid(grd);
    ctrl.SetDGdegree(k);
    ctrl.LinearSolver.SolverCode          = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels = int.MaxValue;
    
    ctrl.InitialValues.Add("RHS", GetFormulaObject(InitialValues.RHS));
    ctrl.AddBoundaryValue(BoundaryType.Dirichlet.ToString(), "T",
        GetFormulaObject(InitialValues.DirichletBC));
    ctrl.AddBoundaryValue(BoundaryType.Neumann.ToString(), "T",
        GetFormulaObject(InitialValues.NeumannBC));
    ctrl.SessionName = "PoissonConstCoeff_"+caseName;
}
}
}

**************
(29,10): error CS1061: Type `BoSSS.Application.SipPoisson.SipControl' does not contain a definition for `solver_name' and no extension method `solver_name' of type `BoSSS.Application.SipPoisson.SipControl' could be found. Are you missing an assembly reference?
C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release\ipPoisson.exe (Location of the symbol related to previous error)
(30,10): error CS1061: Type `BoSSS.Application.SipPoisson.SipControl' does not contain a definition for `NoOfMultigridLevels' and no extension method `NoOfMultigridLevels' of type `BoSSS.Application.SipPoisson.SipControl' could be found. Are you missing an assembly reference?
C:\BoSSS\BoSSS-SolverPerformance\public\src\L4-application\BoSSSpad\bin\Release\ipPoisson.exe (Location of the symbol related to previous error)
No. of errors|warnings: 2|0.

==============
// ==========
// Launch Job
// ==========
**************
==============
//var job = new Job("zwa", solver);
**************
==============
//myCtrl.GetType();
**************
==============
//job.SetControlObject(myCtrl);
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("softpcg") && s.Name.Contains("k2") && s.Name.Contains("mg"));//.ForEach(si => si.Delete(true));
**************
==============
//tempDB.Sessions.Where(s => s.Name.Contains("exp_direct")).ForEach(si => si.Delete());
**************
==============
**************
==============
foreach(var ctrl in controls) {
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    ctrl.RunBatch(myBatch); 
}
**************
==============
**************
==============
**************
==============
tempDB.Projects.Where(p=>p.Key.Contains(WFlowName)).Pick(0).Value
**************
List of 33 instances of ISessionInfo {
  0: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J163840_k2_classic_cg*	12/04/2018 15:43:12	d3e267de...
  1: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k2_classic_cg	12/04/2018 15:41:32	f7d3ba3a...
  2: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k2_classic_cg	12/04/2018 15:41:02	b96c6c85...
  3: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k2_classic_cg	12/04/2018 15:40:32	991bbbc8...
  4: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k2_classic_cg	12/04/2018 15:40:02	c5623e09...
  5: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k5_classic_mumps*	12/04/2018 15:36:41	f99ac394...
  6: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k5_classic_mumps	12/04/2018 15:34:21	a7f9f4bc...
  7: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k5_classic_mumps	12/04/2018 15:33:41	5b98cae3...
  8: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k5_classic_mumps	12/04/2018 15:33:11	4dfcd634...
  9: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J163840_k3_classic_mumps*	12/04/2018 15:28:31	0442cf5e...
  10: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k3_classic_mumps*	12/04/2018 15:27:00	d6e3be5f...
  11: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k3_classic_mumps	12/04/2018 15:26:20	59c370f6...
  12: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k3_classic_mumps	12/04/2018 15:25:50	7c84e289...
  13: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k3_classic_mumps	12/04/2018 15:25:20	32211745...
  14: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J163840_k2_classic_mumps*	12/04/2018 15:20:10	0da6801a...
  15: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k2_classic_mumps	12/04/2018 15:18:39	e326c570...
  16: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k2_classic_mumps	12/04/2018 15:18:09	c4f1b7cd...
  17: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k2_classic_mumps	12/04/2018 15:17:39	e7be9feb...
  18: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k2_classic_mumps	12/04/2018 15:17:09	f2b1389b...
  19: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k5_classic_pardiso*	12/04/2018 15:13:59	b51ad32f...
  20: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k5_classic_pardiso	12/04/2018 15:11:29	d880159c...
  21: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k5_classic_pardiso	12/04/2018 15:10:49	0abddee9...
  22: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k5_classic_pardiso	12/04/2018 15:10:19	9300d521...
  23: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J163840_k3_classic_pardiso*	12/04/2018 15:05:18	5715d79a...
  24: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k3_classic_pardiso	12/04/2018 14:54:57	68a3ce7d...
  25: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k3_classic_pardiso	12/04/2018 14:54:17	5366ffbb...
  26: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k3_classic_pardiso	12/04/2018 14:53:47	b9663d73...
  27: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k3_classic_pardiso	12/04/2018 14:53:17	420a7ce2...
  28: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J163840_k2_classic_pardiso	12/04/2018 14:49:06	2f6f357b...
  29: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J20480_k2_classic_pardiso	12/04/2018 14:47:16	67959dfa...
  30: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J2560_k2_classic_pardiso	12/04/2018 14:46:46	742ecc88...
  31: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J320_k2_classic_pardiso	12/04/2018 14:46:26	367b49e1...
  32: PoissonSolverPerformance_beforeNewLibs	PoissonConstCoeff_J40_k2_classic_pardiso	12/04/2018 14:45:56	b92f62db...
}
==============
**************
==============
WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
Loading session 03bbcb6c-89aa-4c92-b1f6-dd479bf3baa1 failed with message 'Der Objektverweis wurde nicht auf eine Objektinstanz festgelegt.'
List of 112 instances of String {
  0: PoissonConstCoeff_J40_k2_classic_pardiso: 	FinishedSuccessful
  1: PoissonConstCoeff_J320_k2_classic_pardiso: 	FinishedSuccessful
  2: PoissonConstCoeff_J2560_k2_classic_pardiso: 	FinishedSuccessful
  3: PoissonConstCoeff_J20480_k2_classic_pardiso: 	FinishedSuccessful
  4: PoissonConstCoeff_J163840_k2_classic_pardiso: 	FinishedSuccessful
  5: PoissonConstCoeff_J40_k3_classic_pardiso: 	FinishedSuccessful
  6: PoissonConstCoeff_J320_k3_classic_pardiso: 	FinishedSuccessful
  7: PoissonConstCoeff_J2560_k3_classic_pardiso: 	FinishedSuccessful
  8: PoissonConstCoeff_J20480_k3_classic_pardiso: 	FinishedSuccessful
  9: PoissonConstCoeff_J163840_k3_classic_pardiso: 	Failed
  10: PoissonConstCoeff_J40_k5_classic_pardiso: 	FinishedSuccessful
  11: PoissonConstCoeff_J320_k5_classic_pardiso: 	FinishedSuccessful
  12: PoissonConstCoeff_J2560_k5_classic_pardiso: 	FinishedSuccessful
  13: PoissonConstCoeff_J20480_k5_classic_pardiso: 	Failed
  14: PoissonConstCoeff_J40_k2_classic_mumps: 	FinishedSuccessful
  15: PoissonConstCoeff_J320_k2_classic_mumps: 	FinishedSuccessful
  16: PoissonConstCoeff_J2560_k2_classic_mumps: 	FinishedSuccessful
  17: PoissonConstCoeff_J20480_k2_classic_mumps: 	FinishedSuccessful
  18: PoissonConstCoeff_J163840_k2_classic_mumps: 	Failed
  19: PoissonConstCoeff_J40_k3_classic_mumps: 	FinishedSuccessful
  20: PoissonConstCoeff_J320_k3_classic_mumps: 	FinishedSuccessful
  21: PoissonConstCoeff_J2560_k3_classic_mumps: 	FinishedSuccessful
  22: PoissonConstCoeff_J20480_k3_classic_mumps: 	Failed
  23: PoissonConstCoeff_J163840_k3_classic_mumps: 	Failed
  24: PoissonConstCoeff_J40_k5_classic_mumps: 	FinishedSuccessful
  25: PoissonConstCoeff_J320_k5_classic_mumps: 	FinishedSuccessful
  26: PoissonConstCoeff_J2560_k5_classic_mumps: 	FinishedSuccessful
  27: PoissonConstCoeff_J20480_k5_classic_mumps: 	Failed
  28: PoissonConstCoeff_J40_k2_classic_cg: 	FinishedSuccessful
  29: PoissonConstCoeff_J320_k2_classic_cg: 	FinishedSuccessful
  30: PoissonConstCoeff_J2560_k2_classic_cg: 	FinishedSuccessful
  31: PoissonConstCoeff_J20480_k2_classic_cg: 	FinishedSuccessful
  32: PoissonConstCoeff_J163840_k2_classic_cg: 	FinishedSuccessful
  33: PoissonConstCoeff_J40_k3_classic_cg: 	FinishedSuccessful
  34: PoissonConstCoeff_J320_k3_classic_cg: 	FinishedSuccessful
  35: PoissonConstCoeff_J2560_k3_classic_cg: 	FinishedSuccessful
  36: PoissonConstCoeff_J20480_k3_classic_cg: 	FinishedSuccessful
  37: PoissonConstCoeff_J163840_k3_classic_cg: 	Failed
  38: PoissonConstCoeff_J40_k5_classic_cg: 	FinishedSuccessful
  39: PoissonConstCoeff_J320_k5_classic_cg: 	FinishedSuccessful
  40: PoissonConstCoeff_J2560_k5_classic_cg: 	FinishedSuccessful
  41: PoissonConstCoeff_J20480_k5_classic_cg: 	Failed
  42: PoissonConstCoeff_J40_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  43: PoissonConstCoeff_J320_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  44: PoissonConstCoeff_J2560_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  45: PoissonConstCoeff_J20480_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  46: PoissonConstCoeff_J163840_k2_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  47: PoissonConstCoeff_J40_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  48: PoissonConstCoeff_J320_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  49: PoissonConstCoeff_J2560_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  50: PoissonConstCoeff_J20480_k3_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  51: PoissonConstCoeff_J163840_k3_exp_softpcg_schwarz_directcoarse: 	Failed
  52: PoissonConstCoeff_J40_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  53: PoissonConstCoeff_J320_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  54: PoissonConstCoeff_J2560_k5_exp_softpcg_schwarz_directcoarse: 	FinishedSuccessful
  55: PoissonConstCoeff_J20480_k5_exp_softpcg_schwarz_directcoarse: 	Failed
  56: PoissonConstCoeff_J40_k2_exp_direct: 	FinishedSuccessful
  57: PoissonConstCoeff_J320_k2_exp_direct: 	FinishedSuccessful
  58: PoissonConstCoeff_J2560_k2_exp_direct: 	FinishedSuccessful
  59: PoissonConstCoeff_J20480_k2_exp_direct: 	FinishedSuccessful
  60: PoissonConstCoeff_J163840_k2_exp_direct: 	FinishedSuccessful
  61: PoissonConstCoeff_J40_k3_exp_direct: 	FinishedSuccessful
  62: PoissonConstCoeff_J320_k3_exp_direct: 	FinishedSuccessful
  63: PoissonConstCoeff_J2560_k3_exp_direct: 	FinishedSuccessful
  64: PoissonConstCoeff_J20480_k3_exp_direct: 	FinishedSuccessful
  65: PoissonConstCoeff_J163840_k3_exp_direct: 	Failed
  66: PoissonConstCoeff_J40_k5_exp_direct: 	FinishedSuccessful
  67: PoissonConstCoeff_J320_k5_exp_direct: 	FinishedSuccessful
  68: PoissonConstCoeff_J2560_k5_exp_direct: 	FinishedSuccessful
  69: PoissonConstCoeff_J20480_k5_exp_direct: 	Failed
  70: PoissonConstCoeff_J40_k2_exp_softpcg_schwarz: 	FinishedSuccessful
  71: PoissonConstCoeff_J320_k2_exp_softpcg_schwarz: 	FinishedSuccessful
  72: PoissonConstCoeff_J2560_k2_exp_softpcg_schwarz: 	FinishedSuccessful
  73: PoissonConstCoeff_J20480_k2_exp_softpcg_schwarz: 	FinishedSuccessful
  74: PoissonConstCoeff_J163840_k2_exp_softpcg_schwarz: 	FinishedSuccessful
  75: PoissonConstCoeff_J40_k3_exp_softpcg_schwarz: 	FinishedSuccessful
  76: PoissonConstCoeff_J320_k3_exp_softpcg_schwarz: 	FinishedSuccessful
  77: PoissonConstCoeff_J2560_k3_exp_softpcg_schwarz: 	FinishedSuccessful
  78: PoissonConstCoeff_J20480_k3_exp_softpcg_schwarz: 	FinishedSuccessful
  79: PoissonConstCoeff_J163840_k3_exp_softpcg_schwarz: 	Failed
  80: PoissonConstCoeff_J40_k5_exp_softpcg_schwarz: 	FinishedSuccessful
  81: PoissonConstCoeff_J320_k5_exp_softpcg_schwarz: 	FinishedSuccessful
  82: PoissonConstCoeff_J2560_k5_exp_softpcg_schwarz: 	FinishedSuccessful
  83: PoissonConstCoeff_J20480_k5_exp_softpcg_schwarz: 	Failed
  84: PoissonConstCoeff_J40_k2_exp_direct_lapack: 	FinishedSuccessful
  85: PoissonConstCoeff_J320_k2_exp_direct_lapack: 	FinishedSuccessful
  86: PoissonConstCoeff_J2560_k2_exp_direct_lapack: 	Failed
  87: PoissonConstCoeff_J20480_k2_exp_direct_lapack: 	Failed
  88: PoissonConstCoeff_J163840_k2_exp_direct_lapack: 	Failed
  89: PoissonConstCoeff_J40_k3_exp_direct_lapack: 	FinishedSuccessful
  90: PoissonConstCoeff_J320_k3_exp_direct_lapack: 	FinishedSuccessful
  91: PoissonConstCoeff_J2560_k3_exp_direct_lapack: 	Failed
  92: PoissonConstCoeff_J20480_k3_exp_direct_lapack: 	Failed
  93: PoissonConstCoeff_J163840_k3_exp_direct_lapack: 	Failed
  94: PoissonConstCoeff_J40_k5_exp_direct_lapack: 	FinishedSuccessful
  95: PoissonConstCoeff_J320_k5_exp_direct_lapack: 	Failed
  96: PoissonConstCoeff_J2560_k5_exp_direct_lapack: 	Failed
  97: PoissonConstCoeff_J20480_k5_exp_direct_lapack: 	Failed
  98: PoissonConstCoeff_J40_k2_exp_softpcg_mg: 	FinishedSuccessful
  99: PoissonConstCoeff_J320_k2_exp_softpcg_mg: 	FinishedSuccessful
  100: PoissonConstCoeff_J2560_k2_exp_softpcg_mg: 	FinishedSuccessful
  101: PoissonConstCoeff_J20480_k2_exp_softpcg_mg: 	FinishedSuccessful
  102: PoissonConstCoeff_J163840_k2_exp_softpcg_mg: 	FinishedSuccessful
  103: PoissonConstCoeff_J40_k3_exp_softpcg_mg: 	FinishedSuccessful
  104: PoissonConstCoeff_J320_k3_exp_softpcg_mg: 	FinishedSuccessful
  105: PoissonConstCoeff_J2560_k3_exp_softpcg_mg: 	FinishedSuccessful
  106: PoissonConstCoeff_J20480_k3_exp_softpcg_mg: 	FinishedSuccessful
  107: PoissonConstCoeff_J163840_k3_exp_softpcg_mg: 	Failed
  108: PoissonConstCoeff_J40_k5_exp_softpcg_mg: 	FinishedSuccessful
  109: PoissonConstCoeff_J320_k5_exp_softpcg_mg: 	FinishedSuccessful
  110: PoissonConstCoeff_J2560_k5_exp_softpcg_mg: 	FinishedSuccessful
  111: PoissonConstCoeff_J20480_k5_exp_softpcg_mg: 	Failed
}
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
Loading session 03bbcb6c-89aa-4c92-b1f6-dd479bf3baa1 failed with message 'Der Objektverweis wurde nicht auf eine Objektinstanz festgelegt.'
224
==============
**************
==============
**************
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
**************
==============
static class AddCols {
    static public object SipMatrixAssembly_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("SipMatrixAssembly");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Aggregation_basis_init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Aggregation_basis_init");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
    static public object Solver_Init_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Init");
        var nd  = ndS.ElementAt(0);
        //Console.WriteLine("Number of nodes: " + ndS.Count() + " cc " + nd.CallCount );
        return nd.TimeSpentInMethod.TotalSeconds / nd.CallCount;
    }
    static public object Solver_Run_time(ISessionInfo SI) {
        var mcr = SI.GetProfiling()[0];
        var ndS = mcr.FindChildren("Solver_Run");
        var nd  = ndS.ElementAt(0);
        return nd.TimeSpentInMethod.TotalSeconds  / nd.CallCount;
    }
}
**************
==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SipMatrixAssembly_time", AddCols.SipMatrixAssembly_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Aggregation_basis_init_time", AddCols.Aggregation_basis_init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Init_time", AddCols.Solver_Init_time);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Solver_Run_time", AddCols.Solver_Run_time);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
**************
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
using System.IO;
**************
==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
LastError;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
