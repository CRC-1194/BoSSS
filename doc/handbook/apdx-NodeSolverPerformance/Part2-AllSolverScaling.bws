restart
**************

  Database Explorer v2
  ____________________

Databases loaded:
List of 0 instances of IDatabaseInfo {
}
Setting Matlab Connector to Octave...

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string File     = "SolverRuns--2018-2-6.json";
string FilePath = Path.Combine(CurrentDocDir, File);
var SessTab     = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 48 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: NoOfSolverRuns
  12: ExactSolution_provided
  13: GridPartType
  14: ProjectName
  15: NoOfTimesteps
  16: Endtime
  17: saveperiod
  18: dtMin
  19: dtMax
  20: CompMode
  21: ImmediatePlotPeriod
  22: SuperSampling
  23: savetodb
  24: logFileDirectory
  25: Paramstudy_ContinueOnError
  26: DynamicLoadBalancing_RedistributeAtStartup
  27: DynamicLoadBalancing_Period
  28: DynamicLoadBalancing_ImbalanceThreshold
  29: AdaptiveMeshRefinement
  30: CutCellQuadratureType
  31: ContinueOnIoError
  32: Grid:NoOfCells
  33: Grid:hMax
  34: Grid:hMin
  35: RegularTerminated
  36: SipMatrixAssembly_time
  37: Aggregation_basis_init_time
  38: Solver_Init_time
  39: Solver_Run_time
  40: UsedNoOfMultigridLevels
  41: minSolRunT
  42: maxSolRunT
  43: Conv
  44: NoIter
  45: NoOfCells
  46: DOFs
  47: BlockSize
}
==============
var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT   maxSolRunT   NoIter 
0:  2          2560           5           25600   749.3842617  750.960602   270    
1:  2          320            5           3200    39.0187606   39.0274362   115    
2:  2          40             5           400     1.4043004    1.9798036    32     
3:  2          163840         3           1638400 205.9214854  207.712435   1      
4:  4          320            6           11200   48.5526923   48.79002     30     
5:  3          20480          6           409600  3119.0259638 3119.6286065 34     
6:  3          2560           6           51200   245.2860004  246.3602341  38     
7:  3          320            6           6400    21.2594124   21.9387208   32     
8:  3          40             6           800     2.1147681    2.6991653    21     
9:  2          20480          6           204800  1753.2468032 1754.0907922 33     
10: 2          2560           6           25600   135.3783461  136.0122966  36     
11: 2          320            6           3200    12.1247134   12.6192361   31     
12: 2          40             6           400     1.544439     2.1024224    22     
13: 3          20480          0           409600  490.1100894  518.7101765  1      
14: 3          2560           0           51200   6.9900132    7.2164411    1      
15: 3          320            0           6400    0.3281247    0.4473527    1      
16: 3          40             0           800     0.0258516    0.1660214    1      
17: 2          20480          0           204800  66.3348715   66.9722856   1      
18: 2          2560           0           25600   1.8313964    1.9939942    1      
19: 2          320            0           3200    0.0933036    0.227141     1      
20: 2          40             0           400     0.0075192    0.1870387    1      
21: 6          320            0           26880   7.3551583    7.509196     1      
22: 5          320            0           17920   2.7617928    2.8880695    1      
23: 4          320            0           11200   0.9386579    1.0991877    1      
24: 3          320            0           6400    0.305347     0.4267376    1      
25: 2          320            0           3200    0.0874117    0.2781498    1      
26: 2          163840         2           1638400 52.1191614   52.2078826   6364   
27: 4          20480          2           716800  79.2762248   79.3159898   6550   
28: 4          2560           2           89600   4.7661487    4.7827978    2777   
29: 4          320            2           11200   0.4063721    0.4315301    1129   
30: 4          40             2           1400    0.1017392    0.1467253    442    
31: 3          20480          2           409600  20.5670768   20.5828078   4496   
32: 3          2560           2           51200   1.4128504    1.4770409    1907   
33: 3          320            2           6400    0.188596     0.226396     772    
34: 3          40             2           800     0.0554063    0.1030974    282    
35: 2          20480          2           204800  3.3484205    3.3933564    2834   
36: 2          2560           2           25600   0.3635454    0.4008203    1209   
37: 2          320            2           3200    0.0930494    0.1289767    488    
38: 2          40             2           400     0.0300314    0.069585     140    
39: 6          2560           1           215040  309.0160683  310.168468   1      
40: 6          320            1           26880   10.9285249   11.0252954   1      
41: 6          40             1           3360    0.2176497    0.2381427    1      
42: 5          2560           1           143360  99.9565818   101.6222717  1      
43: 5          320            1           17920   4.1333074    4.2888166    1      
44: 5          40             1           2240    0.0898083    0.0909635    1      
45: 4          2560           1           89600   26.3633732   26.5831369   1      
46: 4          320            1           11200   1.2207308    1.227546     1      
47: 4          40             1           1400    0.029743     0.0854211    1      
48: 3          20480          1           409600  242.6439168  243.0862851  1      
49: 3          2560           1           51200   7.0109432    7.1546289    1      
50: 3          320            1           6400    0.4149952    0.4240334    1      
51: 3          40             1           800     0.0130627    0.0351609    1      
52: 2          20480          1           204800  46.3075623   46.5139476   1      
53: 2          2560           1           25600   1.5280948    1.5659212    1      
54: 2          320            1           3200    0.0442264    0.062788     1      
55: 2          40             1           400     0.0036322    0.0435425    1      
56: 6          2560           0           215040  344.8825203  345.9041878  1      
57: 6          40             0           3360    0.3406199    0.460534     1      
58: 5          2560           0           143360  108.6526829  108.6534426  1      
59: 5          40             0           2240    0.1639026    0.2790131    1      
60: 4          2560           0           89600   29.095991    29.7360778   1      
61: 4          40             0           1400    0.0604208    0.193336     1      
62: 3          20480          0           409600  464.9720118  475.8218817  1      
63: 3          2560           0           51200   6.2259657    6.4669901    1      
64: 3          40             0           800     0.024444     0.1487611    1      
65: 2          20480          0           204800  58.7884026   59.4603266   1      
66: 2          2560           0           25600   1.5580864    1.7271004    1      
67: 2          40             0           400     0.0088426    0.3545052    1      
==============
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "solver_name", "DGdegree:T"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
**************
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
Plot2Ddata[,] multiplots = new Plot2Ddata[3,2];
int pDegree = 2;
for(int iRow = 0; iRow < 3; iRow++) {
//var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
//                        "solver_name", "DGdegree:T"); // column for group
for(int iCol = 0; iCol < 2; iCol++) {
    if(pDegree > 6)
        continue;
 
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           if(k != pDegree) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           Fmt                     = new PlotFormat();
           switch(solver_name) {
           case SolverCodes.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_mumps: 
               Nmn           = "Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_cg: 
               Nmn           = "CG"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
           case SolverCodes.exp_direct: 
               Fmt.PointType = PointTypes.OpenBox;
               Nmn           = "Pardiso w Blk PC"; 
               break;
           case SolverCodes.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case SolverCodes.exp_softpcg_schwarz_directcoarse : 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case SolverCodes.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown"; 
               break;
           } 
           //Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
       });
 
    string Title = string.Format("$k = {0}$", pDegree);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
 
    multiplots[iRow,iCol].YrangeMin = 1e-3;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e2;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    multiplots[iRow,iCol].X2rangeMin = 1e2;
    multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    if(iRow == 2) {
        multiplots[iRow,iCol].ShowLegend = true;
        multiplots[iRow,iCol].LegendPosition = new double[] {1e12,1e4};
    } else {
        multiplots[iRow,iCol].ShowLegend = false;
    }
 
    if(iCol == 1) {
        multiplots[iRow,iCol].SwapYaxes();
        multiplots[iRow,iCol].lmargin = 1;
        multiplots[iRow,iCol].rmargin = 10;
    } else {
        multiplots[iRow,iCol].lmargin = 10;
        multiplots[iRow,iCol].rmargin = 1;
    }
    multiplots[iRow,iCol].tmargin = 1;
    multiplots[iRow,iCol].bmargin = 1;
    if(iRow == 0) {
        multiplots[iRow,iCol].SwapXaxes();
    }
    if(iRow == 1 && iCol == 0) {  
        multiplots[iRow,iCol].ShowXtics = false;
    }
    pDegree++;
}                        
}
//multiplots.PlotNow();
multiplots.AddDummyPlotsForLegend(2,0);
**************
==============
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "ConstCoeffPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.Drawing.Bitmap
==============
//cmt
**************
==============
