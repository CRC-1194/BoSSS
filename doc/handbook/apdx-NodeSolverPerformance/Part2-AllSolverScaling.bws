restart
**************

  Database Explorer v2
  ____________________

Databases loaded:
List of 0 instances of IDatabaseInfo {
}
Setting Matlab Connector to Octave...

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("PoissonSolverPerformance");
**************
Project name is set to 'PoissonSolverPerformance'.

==============
using System.IO;
using BoSSS.Application.SipPoisson;
**************
==============
string dateString = "2018-2-11";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
//SessTab.Print();
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 49 instances of String {
  0: SessionName
  1: DGdegree:T
  2: DGdegree:Tex
  3: Bndtype:Dirichlet
  4: Bndtype:Neumann
  5: GeneratedFromCode
  6: ControlFileText_Index
  7: dtFixed
  8: NoOfMultigridLevels
  9: penalty_poisson
  10: solver_name
  11: TargetBlockSize
  12: NoOfSolverRuns
  13: ExactSolution_provided
  14: GridPartType
  15: ProjectName
  16: NoOfTimesteps
  17: Endtime
  18: saveperiod
  19: dtMin
  20: dtMax
  21: CompMode
  22: ImmediatePlotPeriod
  23: SuperSampling
  24: savetodb
  25: logFileDirectory
  26: Paramstudy_ContinueOnError
  27: DynamicLoadBalancing_RedistributeAtStartup
  28: DynamicLoadBalancing_Period
  29: DynamicLoadBalancing_ImbalanceThreshold
  30: AdaptiveMeshRefinement
  31: CutCellQuadratureType
  32: ContinueOnIoError
  33: Grid:NoOfCells
  34: Grid:hMax
  35: Grid:hMin
  36: RegularTerminated
  37: SipMatrixAssembly_time
  38: Aggregation_basis_init_time
  39: Solver_Init_time
  40: Solver_Run_time
  41: UsedNoOfMultigridLevels
  42: minSolRunT
  43: maxSolRunT
  44: Conv
  45: NoIter
  46: NoOfCells
  47: DOFs
  48: BlockSize
}
==============
var SubTab_1 = SessTab.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter", "RegularTerminated", "Conv");
**************
==============
var SubTab_2 = SubTab_1.ExtractRows(delegate(int i, IDictionary<string,object> row) {
    return (Convert.ToBoolean(row["RegularTerminated"]) == true)
          && (Convert.ToInt32(row["Conv"]) != 0);
    });
**************
==============
var SubTab = SubTab_2.ExtractColumns("DGdegree:T", "Grid:NoOfCells", "solver_name", "DOFs", "minSolRunT", "maxSolRunT", "NoIter");
**************
==============
SubTab.Print();
**************
    DGdegree:T Grid:NoOfCells solver_name DOFs    minSolRunT  maxSolRunT  NoIter 
0:  4          2560           4           89600   63.9040395  63.9040395  11     
1:  4          320            4           11200   7.9399755   7.9399755   10     
2:  4          40             4           1400    0.8247747   0.8247747   5      
3:  3          20480          4           409600  198.1232817 198.1232817 14     
4:  3          2560           4           51200   25.872553   25.872553   14     
5:  3          320            4           6400    2.0830731   2.0830731   5      
6:  3          40             4           800     0.5642212   0.5642212   5      
7:  2          163840         4           1638400 718.7637763 718.7637763 16     
8:  2          20480          4           204800  78.1297121  78.1297121  14     
9:  2          2560           4           25600   10.176333   10.176333   15     
10: 2          320            4           3200    0.8673359   0.8673359   5      
11: 2          40             4           400     0.4746757   0.4746757   5      
12: 3          20480          6           409600  390.3218718 393.5016035 20     
13: 3          2560           6           51200   27.210639   27.6054704  21     
14: 3          320            6           6400    4.707644    5.2670534   23     
15: 3          40             6           800     2.5469665   2.8956922   24     
16: 2          20480          6           204800  94.6536695  94.7905943  23     
17: 2          2560           6           25600   9.6737434   9.8025789   23     
18: 2          320            6           3200    3.061871    3.525212    25     
19: 2          40             6           400     2.4709977   2.8666587   25     
20: 2          2560           5           25600   749.3842617 750.960602  270    
21: 2          320            5           3200    39.0187606  39.0274362  115    
22: 2          40             5           400     1.4043004   1.9798036   32     
23: 2          163840         3           1638400 205.9214854 207.712435  1      
24: 3          20480          0           409600  490.1100894 518.7101765 1      
25: 3          2560           0           51200   6.9900132   7.2164411   1      
26: 3          320            0           6400    0.3281247   0.4473527   1      
27: 3          40             0           800     0.0258516   0.1660214   1      
28: 2          20480          0           204800  66.3348715  66.9722856  1      
29: 2          2560           0           25600   1.8313964   1.9939942   1      
30: 2          320            0           3200    0.0933036   0.227141    1      
31: 2          40             0           400     0.0075192   0.1870387   1      
32: 6          320            0           26880   7.3551583   7.509196    1      
33: 5          320            0           17920   2.7617928   2.8880695   1      
34: 4          320            0           11200   0.9386579   1.0991877   1      
35: 3          320            0           6400    0.305347    0.4267376   1      
36: 2          320            0           3200    0.0874117   0.2781498   1      
37: 2          163840         2           1638400 52.1191614  52.2078826  6364   
38: 4          20480          2           716800  79.2762248  79.3159898  6550   
39: 4          2560           2           89600   4.7661487   4.7827978   2777   
40: 4          320            2           11200   0.4063721   0.4315301   1129   
41: 4          40             2           1400    0.1017392   0.1467253   442    
42: 3          20480          2           409600  20.5670768  20.5828078  4496   
43: 3          2560           2           51200   1.4128504   1.4770409   1907   
44: 3          320            2           6400    0.188596    0.226396    772    
45: 3          40             2           800     0.0554063   0.1030974   282    
46: 2          20480          2           204800  3.3484205   3.3933564   2834   
47: 2          2560           2           25600   0.3635454   0.4008203   1209   
48: 2          320            2           3200    0.0930494   0.1289767   488    
49: 2          40             2           400     0.0300314   0.069585    140    
50: 6          2560           1           215040  309.0160683 310.168468  1      
51: 6          320            1           26880   10.9285249  11.0252954  1      
52: 6          40             1           3360    0.2176497   0.2381427   1      
53: 5          2560           1           143360  99.9565818  101.6222717 1      
54: 5          320            1           17920   4.1333074   4.2888166   1      
55: 5          40             1           2240    0.0898083   0.0909635   1      
56: 4          2560           1           89600   26.3633732  26.5831369  1      
57: 4          320            1           11200   1.2207308   1.227546    1      
58: 4          40             1           1400    0.029743    0.0854211   1      
59: 3          20480          1           409600  242.6439168 243.0862851 1      
60: 3          2560           1           51200   7.0109432   7.1546289   1      
61: 3          320            1           6400    0.4149952   0.4240334   1      
62: 3          40             1           800     0.0130627   0.0351609   1      
63: 2          20480          1           204800  46.3075623  46.5139476  1      
64: 2          2560           1           25600   1.5280948   1.5659212   1      
65: 2          320            1           3200    0.0442264   0.062788    1      
66: 2          40             1           400     0.0036322   0.0435425   1      
67: 6          2560           0           215040  344.8825203 345.9041878 1      
68: 6          40             0           3360    0.3406199   0.460534    1      
69: 5          2560           0           143360  108.6526829 108.6534426 1      
70: 5          40             0           2240    0.1639026   0.2790131   1      
71: 4          2560           0           89600   29.095991   29.7360778  1      
72: 4          40             0           1400    0.0604208   0.193336    1      
73: 3          20480          0           409600  464.9720118 475.8218817 1      
74: 3          2560           0           51200   6.2259657   6.4669901   1      
75: 3          40             0           800     0.024444    0.1487611   1      
76: 2          20480          0           204800  58.7884026  59.4603266  1      
77: 2          2560           0           25600   1.5580864   1.7271004   1      
78: 2          40             0           400     0.0088426   0.3545052   1      
==============
**************
==============
var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
                        "solver_name", "DGdegree:T"); // column for group
**************
==============
//SubTab.ToCSVFile("C:\\tmp\\table.csv");
**************
==============
//RuntimePlot.dataGroups.Select(grp => grp.Name);
**************
==============
/*
RuntimePlot.LogX   = true;
RuntimePlot.LogY   = true;
RuntimePlot.Xlabel = "Degrees of freedom";
RuntimePlot.Ylabel = "Runtime [sec]";
RuntimePlot.Title  = "Solver performance -- 3D Poisson problem";
 
RuntimePlot.ModPointType("name0", PointTypes.Circle); // Pardiso
RuntimePlot.ModPointType("name1", PointTypes.UpperTriangle); // Mumps
RuntimePlot.ModPointType("name2", PointTypes.Diamond); // CG
RuntimePlot.ModPointType("name5", PointTypes.Box); // Schwarz
RuntimePlot.ModPointType("name7", PointTypes.LowerTriangle); // LAPACK
RuntimePlot.ModDashType("T2", DashTypes.Dashed); // poly. order 2
RuntimePlot.ModDashType("T3", DashTypes.DotDashed); // poly. order 3
RuntimePlot.ModDashType("T4", DashTypes.DotDotDashed); // poly. order 4
RuntimePlot.ModDashType("T5", DashTypes.Solid); // poly. order 5
RuntimePlot.ModDashType("T6", DashTypes.Dotted); // poly. order 6
RuntimePlot.ModLineColor("T2", LineColors.Blue);
RuntimePlot.ModLineColor("T3", LineColors.Red);
RuntimePlot.ModLineColor("T4", LineColors.Magenta);
RuntimePlot.ModLineColor("T5", LineColors.Orange);
RuntimePlot.ModLineColor("T6", LineColors.Green);
 
foreach(var xyGroup in RuntimePlot.dataGroups) {
    xyGroup.Format.LineWidth = 2;
    xyGroup.Format.PointSize = 1.0;
}
 
foreach(Plot2Ddata.XYvalues graph in RuntimePlot.dataGroups) {
 
    string ret = "";
    if(graph.Name.Contains("name0")) {
        ret += "Pardiso, ";
    } else if(graph.Name.Contains("name1")) {
        ret += "Mumps, ";
    } else if(graph.Name.Contains("name2")) {
        //Console.WriteLine("cg");
        ret += "Cnj Gr, ";
    } else if(graph.Name.Contains("name5")) {
        ret += "Add Swz, ";
    } else if(graph.Name.Contains("name7")) {
        //Console.WriteLine("lapack");
        ret += "LAPACK, ";
    } 
    if(graph.Name.Contains("T2")) {
        ret += "$ k = 2 $";
    } else if(graph.Name.Contains("T3")) {
        ret += "$ k = 3 $";
    } else if(graph.Name.Contains("T4")) {
        ret += "$ k = 4 $";
    } else if(graph.Name.Contains("T5")) {
        ret += "$ k = 5 $";
    } else if(graph.Name.Contains("T6")) {
        ret += "$ k = 6 $";
    }
 
    graph.Name = ret;
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
**************
==============
**************
==============
**************
==============
//RuntimePlot.PlotNow();
**************
==============
//var cl = RuntimePlot.ToGnuplot().PlotCairolatex();
//cl.Preview(trimPage:true);
**************
==============
//cl.WriteMinimalCompileableExample("C:\\tmp\\mini.tex");
**************
==============
**************
==============
Plot2Ddata[,] multiplots = new Plot2Ddata[3,2];
int pDegree = 2;
for(int iRow = 0; iRow < 3; iRow++) {
//var RuntimePlot = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
//                        "solver_name", "DGdegree:T"); // column for group
for(int iCol = 0; iCol < 2; iCol++) {
    if(pDegree > 6)
        continue;
 
    multiplots[iRow,iCol] = SubTab.ToPlot("DOFs", "minSolRunT", // column for x- and y
       delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k = Convert.ToInt32(Row["DGdegree:T"]);
           if(k != pDegree) {
                // degree does not match -> not in this plot
                Nmn = null;
                Fmt = null;
                return;
           }
 
           SolverCodes solver_name = (SolverCodes) Convert.ToInt32(Row["solver_name"]);
           Fmt                     = new PlotFormat();
           switch(solver_name) {
           case SolverCodes.classic_pardiso: 
               Nmn           = "Pardiso"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_mumps: 
               Nmn           = "Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case SolverCodes.classic_cg: 
               Nmn           = "CG"; 
               Fmt.PointType = PointTypes.Asterisk;
               break;
           case SolverCodes.exp_direct: 
               Fmt.PointType = PointTypes.OpenBox;
               Nmn           = "Pardiso w Blk PC"; 
               break;
           case SolverCodes.exp_softpcg_schwarz: 
               Nmn           = "Add Swz"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               break;
           case SolverCodes.exp_softpcg_schwarz_directcoarse: 
               Nmn           = "Add Swz w Coarse";
               Fmt.PointType = PointTypes.UpperTriangle;
               break;
           case SolverCodes.exp_softpcg_mg:
               Nmn           = "Mult Gr w Blk Jac";
               Fmt.PointType = PointTypes.Box;
               break;
           case SolverCodes.exp_direct_lapack: 
               Nmn           = "LAPACK"; 
               Fmt.PointType = PointTypes.Plus;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown"; 
               break;
           } 
           //Console.WriteLine("name is: " + solver_name); 
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
       });
 
    string Title = string.Format("$k = {0}$", pDegree);
    multiplots[iRow,iCol].Ylabel = Title;
    multiplots[iRow,iCol].LogX = true;
    multiplots[iRow,iCol].LogY = true;
 
    multiplots[iRow,iCol].YrangeMin = 1e-3;
    multiplots[iRow,iCol].YrangeMax = 1e+4;
    multiplots[iRow,iCol].XrangeMin = 1e2;
    multiplots[iRow,iCol].XrangeMax = 1e7;
    multiplots[iRow,iCol].Y2rangeMin = 1e-3;
    multiplots[iRow,iCol].Y2rangeMax = 1e+4;
    multiplots[iRow,iCol].X2rangeMin = 1e2;
    multiplots[iRow,iCol].X2rangeMax = 1e7;
 
    if(iRow == 2) {
        multiplots[iRow,iCol].ShowLegend = true;
        multiplots[iRow,iCol].LegendPosition = new double[] {1e12,1e4};
    } else {
        multiplots[iRow,iCol].ShowLegend = false;
    }
 
    if(iCol == 1) {
        multiplots[iRow,iCol].SwapYaxes();
        multiplots[iRow,iCol].lmargin = 1;
        multiplots[iRow,iCol].rmargin = 10;
    } else {
        multiplots[iRow,iCol].lmargin = 10;
        multiplots[iRow,iCol].rmargin = 1;
    }
    multiplots[iRow,iCol].tmargin = 1;
    multiplots[iRow,iCol].bmargin = 1;
    if(iRow == 0) {
        multiplots[iRow,iCol].SwapXaxes();
    }
    if(iRow == 1 && iCol == 0) {  
        multiplots[iRow,iCol].ShowXtics = false;
    }
    pDegree++;
}                        
}
//multiplots.PlotNow();
multiplots.AddDummyPlotsForLegend(2,0);
**************
==============
**************
==============
**************
==============
**************
==============
var CL = multiplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
**************
Using gnuplot: C:\Program Files (x86)\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
//CL.SaveTo(Path.Combine(CurrentDocDir, "ConstCoeffPoissonScaling.tex"));
**************
==============
CL.PlotNow();
**************
System.Drawing.Bitmap
==============
CL.WriteMinimalCompileableExample(
   Path.Combine(CurrentDocDir, "plots", "MainConstCoeffPoissonScaling.tex"),
   "ConstCoeffPoissonScaling.tex");
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
