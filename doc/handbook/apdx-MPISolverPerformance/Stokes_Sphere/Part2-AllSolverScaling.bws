restart
**************

  Database Explorer v2
  ____________________

Databases loaded:
List of 23 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 2; Path = p:\BoSSS_DBs\Kovasznay }
  1: { Session Count = 1; Grid Count = 1; Path = p:\BoSSS_DBs\ChannelFlow }
  2: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\RectangularCylinder }
  3: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\Cylinder3D }
  4: { Session Count = 6; Grid Count = 1; Path = p:\BoSSS_DBs\MPI_Test }
  5: { Session Count = 0; Grid Count = 0; Path = p:\BoSSS_DBs\3DSolverPerformance }
  6: { Session Count = 2; Grid Count = 2; Path = P:\BoSSS_DBs\nonIBM_cylinder }
  7: { Session Count = 12; Grid Count = 1; Path = P:\BoSSS_DBs\osciCylinder }
  8: { Session Count = 0; Grid Count = 0; Path = P:\BoSSS_DBs\osciCylinder_new }
  9: { Session Count = 21; Grid Count = 25; Path = P:\BoSSS_DBs\ImmersedBoundary }
  10: { Session Count = 8; Grid Count = 44; Path = P:\BoSSS_DBs\ParticleInShearFlow\ }
  11: { Session Count = 16; Grid Count = 46; Path = P:\BoSSS_DBs\ParticleUnderGravity }
  12: { Session Count = 8; Grid Count = 31; Path = P:\BoSSS_DBs\fixedCylinder }
  13: { Session Count = 0; Grid Count = 0; Path = P:\BoSSS_DBs\Paper_OsciCylinder }
  14: { Session Count = 43; Grid Count = 45; Path = P:\BoSSS_DBs\IBMPaper }
  15: { Session Count = 28; Grid Count = 15; Path = P:\BoSSS_DBs\Paper_IBM2D }
  16: { Session Count = 38; Grid Count = 22; Path = P:\BoSSS_DBs\Paper_CellAgglo01_Penalty4 }
  17: { Session Count = 46; Grid Count = 55; Path = P:\BoSSS_DBs\Sphere3D }
  18: { Session Count = 22; Grid Count = 10; Path = P:\BoSSS_DBs\Performance }
  19: { Session Count = 24; Grid Count = 14; Path = P:\BoSSS_DBs\PaperRevision }
  20: { Session Count = 0; Grid Count = 0; Path = P:\Lichtenberg_DB }
  21: { Session Count = 2; Grid Count = 354; Path = P:\BoSSS_DBs\Bug }
  22: { Session Count = 84; Grid Count = 97; Path = L:\BoSSS_DB\Lichtenberg_DB }
}

 Console ready for input. Type 'help' for help.

==============
WorkflowMgm.Init("MPISolverPerformance");
**************
Project name is set to 'MPISolverPerformance'.

==============
using System.IO;
using BoSSS.Application.IBM_Solver;
using System.Data;
**************
==============
string dateString = "2018-3-20";
string File       = "SolverRuns--" + dateString + ".json";
string FilePath   = Path.Combine(CurrentDocDir, File);
var SessTab       = TableExtensions.LoadFromFile(FilePath);
**************
==============
// ====================
// Evaluation, plotting
// ====================
**************
==============
SessTab.GetColumnNames();
**************
List of 67 instances of String {
  0: SessionName
  1: DGdegree:VelocityX
  2: DGdegree:VelocityY
  3: DGdegree:VelocityZ
  4: DGdegree:Pressure
  5: DGdegree:PhiDG
  6: DGdegree:Phi
  7: Bndtype:Velocity_inlet
  8: Bndtype:Wall
  9: Bndtype:Pressure_Outlet
  10: GeneratedFromCode
  11: ControlFileText_Index
  12: dtFixed
  13: NoOfMultigridLevels
  14: AdvancedDiscretizationOptions.ContiSign
  15: AdvancedDiscretizationOptions.RescaleConti
  16: AdvancedDiscretizationOptions.LFFA
  17: AdvancedDiscretizationOptions.LFFB
  18: AdvancedDiscretizationOptions.PenaltySafety
  19: AdvancedDiscretizationOptions.CellAgglomerationThreshold
  20: MaxKrylovDim
  21: MaxSolverIterations
  22: MinSolverIterations
  23: Solver_ConvergenceCriterion
  24: VelocityBlockPrecondMode
  25: LevelSetSmoothing
  26: PhysicalParameters.IncludeConvection
  27: PhysicalParameters.rho_A
  28: PhysicalParameters.mu_A
  29: PhysicalParameters.Material
  30: particleRadius
  31: MeshFactor
  32: Timestepper_Scheme
  33: FixedStreamwisePeriodicBC
  34: Timestepper_Init
  35: NonlinearSolve
  36: LinearSolve
  37: GridPartType
  38: ProjectName
  39: NoOfTimesteps
  40: Endtime
  41: saveperiod
  42: dtMin
  43: dtMax
  44: CompMode
  45: ImmediatePlotPeriod
  46: SuperSampling
  47: savetodb
  48: logFileDirectory
  49: Paramstudy_ContinueOnError
  50: DynamicLoadBalancing_RedistributeAtStartup
  51: DynamicLoadBalancing_Period
  52: DynamicLoadBalancing_ImbalanceThreshold
  53: AdaptiveMeshRefinement
  54: CutCellQuadratureType
  55: ContinueOnIoError
  56: Grid:NoOfCells
  57: Grid:hMax
  58: Grid:hMin
  59: UsedNoOfMultigridLevels
  60: C_Drag
  61: C_Lift
  62: RegularTerminated
  63: SlvIter_excl
  64: SlvInit_excl
  65: PrecSolve
  66: Processors
}
==============
var SubTab_1 = SessTab.ExtractColumns("Processors","SlvIter_excl","SlvInit_excl","PrecSolve","LinearSolve","NoOfMultigridLevels","DGdegree:VelocityX","RegularTerminated");
**************
==============
SubTab_1.Print();
**************
   Processors SlvIter_excl SlvInit_excl PrecSolve   LinearSolve NoOfMultigridLevels DGdegree:VelocityX RegularTerminated 
0: 8          603.1177419  4.4826658    593.5909968 0           3                   1                  True              
1: 8          570.2784946  4.3404437    560.9781822 10          3                   1                  True              
2: 16         265.3188812  2.387954     261.1467514 0           3                   1                  True              
3: 16         269.6565679  2.3504928    266.1423485 10          3                   1                  True              
==============
// Calculation of speedup times 
List<KeyValuePair<string, int>> procs = new List<KeyValuePair<string, int>>{};
double[] slviter = ((double[])SubTab_1.GetColumn("SlvIter_excl"));
double[] slvinit = ((double[])SubTab_1.GetColumn("SlvInit_excl"));
double[] PrecSolve = ((double[])SubTab_1.GetColumn("PrecSolve"));
double[] slviterSpeedup = new double[slviter.Length];
double[] slvinitSpeedup = new double[slviter.Length];
double[] PrecSolveSpeedup = new double[slviter.Length];

for(int i = 0; i<slviter.Length; i++){
    long[] solve = ((long[])SubTab_1.GetColumn("LinearSolve"));
    string str = solve.Select(s => Convert.ToString(s)).ToArray()[i];
    int val    = ((int[])SubTab_1.GetColumn("Processors"))[i];

    procs.Add(new KeyValuePair<string,int>(str,val));
      
}
int min;
int max = 0;
for(int i = 0; i < slviter.Length; i++){
    List<KeyValuePair<string, int>> procsCut = procs.FindAll(s => s.Key == procs[i].Key);
    
    int tempMax;
    min     = procsCut.Select(s => s.Value).Min();
    tempMax = procsCut.Select(s => s.Value).Max();
    if(tempMax>max){
        max = tempMax;
    }
    int idx = procs.FindIndex(s => (s.Value == min) && (s.Key == procs[i].Key));
    slviterSpeedup[i] = (slviter[idx]*procs.Pick(idx).Value)/slviter[i];
    slvinitSpeedup[i] = (slvinit[idx]*procs.Pick(idx).Value)/slvinit[i];
    PrecSolveSpeedup[i] = (PrecSolve[idx]*procs.Pick(idx).Value)/PrecSolve[i];
}    
**************
==============
// Add columns to DataTable
SubTab_1.Columns.Add("SlvIter_speedup",typeof(double));
SubTab_1.Columns.Add("SlvInit_speedup",typeof(double));
SubTab_1.Columns.Add("PrecSolve_speedup",typeof(double));
int i = 0;
foreach (DataRow row in SubTab_1.Rows) {
    row["SlvIter_speedup"] = slviterSpeedup[i];
    row["SlvInit_speedup"] = slvinitSpeedup[i];
    row["PrecSolve_speedup"] = PrecSolveSpeedup[i];
    i++;
}
**************
PrecSolve_speedup
==============
static public class Formats {
static public void getFormat(int iTabRow,IDictionary<string, object> Row, 
                 out string Nmn, out PlotFormat Fmt){
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
         
           LinearSolverCodes solver_name = (LinearSolverCodes) Convert.ToInt32(Row["LinearSolve"]);
           int MGLevels                  = Convert.ToInt32(Row["NoOfMultigridLevels"]);
           Fmt                           = new PlotFormat();
           
           Nmn = "";
          
           switch(solver_name) {
           case LinearSolverCodes.automatic: 
               Nmn           = Nmn+"Automatic"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.classic_mumps: 
               Nmn           = Nmn+"Mumps"; 
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.classic_pardiso: 
               Nmn           = Nmn+"Pardiso"; 
               Fmt.PointType = PointTypes.Asterisk;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           case LinearSolverCodes.exp_schwarz_directcoarse: 
               Nmn           = Nmn+"Swz w Coarse"; 
               Fmt.PointType = PointTypes.UpperTriangle;
               Fmt.DashType  = DashTypes.DotDashed;
               break;
           case LinearSolverCodes.exp_schwarz_Kcycle_directcoarse_overlap: 
               Nmn           = Nmn+"Swz Kcycle w Coarse Overlap"; 
               Fmt.PointType = PointTypes.Plus;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           case LinearSolverCodes.exp_schwarz_directcoarse_overlap: 
               Nmn           = Nmn+"Swz w Coarse Overlap"; 
               Fmt.PointType = PointTypes.OpenBox;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.exp_schwarz_Kcycle_directcoarse: 
               Nmn           = Nmn+"Swz Kcycle w Coarse"; 
               Fmt.PointType = PointTypes.LowerTriangle;
               Fmt.DashType  = DashTypes.DotDotDashed;
               break;
           case LinearSolverCodes.exp_softgmres: 
               Nmn           = Nmn+"SoftGMRES"; 
               Fmt.PointType = PointTypes.Box;
               Fmt.DashType  = DashTypes.Dotted;
               break;
           case LinearSolverCodes.exp_softgmres_schwarz_directcoarse: 
               Nmn           = Nmn+"SoftGMRES Swz w Coarse"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           case LinearSolverCodes.exp_softgmres_schwarz_directcoarse_overlap: 
               Nmn           = Nmn+"SoftGMRES Swz w Coarse Overlap"; 
               Fmt.PointType = PointTypes.OpenCircle;
               Fmt.DashType  = DashTypes.Dashed;
               break;
           default:
               Console.WriteLine("unknown: " + solver_name); 
               Nmn = "unknown"; 
               break;
           } 
           Nmn           = Nmn+" MGLevels"+MGLevels;
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
       }
}
**************
==============
var plotSlvIter = SubTab_1.ToPlot("Processors", "SlvIter_excl", // column for x- and y
                                  Formats.getFormat); // column for group
var plotSlvInit = SubTab_1.ToPlot("Processors", "SlvInit_excl", // column for x- and y
                                  Formats.getFormat); // column for group
Plot2Ddata[,] multiplots = new Plot2Ddata[2,1];
plotSlvIter.Title   = "Exclusive times";
plotSlvIter.Ylabel  = "Time [s]";
plotSlvInit.Xlabel  = "Processors";
plotSlvInit.Ylabel  = "Time [s]";
plotSlvIter.Y2label = "SlvIter";
plotSlvInit.Y2label = "SlvInit";


plotSlvIter.XrangeMin = 1;
plotSlvIter.XrangeMax = max;
plotSlvInit.XrangeMin = 1;
plotSlvInit.XrangeMax = max;

multiplots[0,0] = plotSlvIter;
multiplots[1,0] = plotSlvInit;


multiplots[0,0].bmargin = 1;
multiplots[1,0].tmargin = 1;
multiplots.PlotNow()
**************
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
var plotSlvIter = SubTab_1.ToPlot("Processors", "SlvIter_speedup", // column for x- and y
                                  Formats.getFormat); // column for group
var plotSlvInit = SubTab_1.ToPlot("Processors", "SlvInit_speedup", // column for x- and y
                                  Formats.getFormat); // column for group
Plot2Ddata[,] speedupsplots = new Plot2Ddata[2,1];
plotSlvIter.Title   = "Speedup";
plotSlvIter.Ylabel  = "Speedup";
plotSlvInit.Xlabel  = "Processors";
plotSlvInit.Ylabel  = "Speedup";
plotSlvIter.Y2label = "SlvIter";
plotSlvInit.Y2label = "SlvInit";

plotSlvIter.XrangeMin = 1;
plotSlvIter.XrangeMax = max;
plotSlvInit.XrangeMin = 1;
plotSlvInit.XrangeMax = max;

speedupsplots[0,0] = plotSlvIter;
speedupsplots[1,0] = plotSlvInit;

// Add ideal
double[] dof = new[]{1.0,2.0,4.0,8.0,16.0,32.0,64.0,128.0};
double[] linT = dof.Select(x => x).ToArray();
var ideal = new Plot2Ddata.XYvalues("Ideal", dof, linT);
ideal.Format.FromString("- black");
ideal.Format.LineWidth = 3;
ArrayTools.AddToArray(ideal, ref speedupsplots[0,0].dataGroups);
ArrayTools.AddToArray(ideal, ref speedupsplots[1,0].dataGroups);

speedupsplots[0,0].bmargin = 1;
speedupsplots[0,0].tmargin = 4;
speedupsplots[1,0].tmargin = 1;
speedupsplots.PlotNow()
**************
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
var plotPrecSolve = SubTab_1.ToPlot("Processors", "PrecSolve", // column for x- and y
                                  Formats.getFormat); // column for group
var plotNewtonDirder = SubTab_1.ToPlot("Processors", "NewtonDirder", // column for x- and y
                                  Formats.getFormat); // column for group
Plot2Ddata[,] multiplots2 = new Plot2Ddata[2,1];
plotPrecSolve.Title     = "Exclusive times";
plotPrecSolve.Ylabel    = "Time [s]";
plotNewtonDirder.Xlabel = "Processors";
plotNewtonDirder.Ylabel = "Time [s]";
plotPrecSolve.Y2label   = "SolvIter: Precondition Solve";


plotPrecSolve.XrangeMin    = 1;
plotPrecSolve.XrangeMax    = max;
plotNewtonDirder.XrangeMin = 1;
plotNewtonDirder.XrangeMax = max;

multiplots2[0,0] = plotPrecSolve;


multiplots2[0,0].bmargin = 1;
multiplots2.PlotNow()
**************
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
Exception in the selection test of row 0: KeyNotFoundException, Message: Der angegebene Schlüssel war nicht im Wörterbuch angegeben..
unknown: exp_softgmres_schwarz_directcoarse_overlap
Exception in the selection test of row 1: KeyNotFoundException, Message: Der angegebene Schlüssel war nicht im Wörterbuch angegeben..
Exception in the selection test of row 2: KeyNotFoundException, Message: Der angegebene Schlüssel war nicht im Wörterbuch angegeben..
unknown: exp_softgmres_schwarz_directcoarse_overlap
Exception in the selection test of row 3: KeyNotFoundException, Message: Der angegebene Schlüssel war nicht im Wörterbuch angegeben..
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
var plotPrecSolve = SubTab_1.ToPlot("Processors", "PrecSolve_speedup", // column for x- and y
                                  Formats.getFormat); // column for group
Plot2Ddata[,] speedupsplots2 = new Plot2Ddata[2,1];
plotPrecSolve.Title     = "Speedup";
plotPrecSolve.Ylabel    = "Speedup";
plotNewtonDirder.Xlabel = "Processors";
plotNewtonDirder.Ylabel = "Speedup";
plotPrecSolve.Y2label   = "SolIter: Precondition Solve";

plotPrecSolve.XrangeMin = 1;
plotPrecSolve.XrangeMax = max;
plotNewtonDirder.XrangeMin = 1;
plotNewtonDirder.XrangeMax = max;

speedupsplots2[0,0] = plotPrecSolve;

// Add ideal
double[] dof = new[]{1.0,2.0,4.0,8.0,16.0,32.0,64.0,128.0};
double[] linT = dof.Select(x => x).ToArray();
var ideal = new Plot2Ddata.XYvalues("Ideal", dof, linT);
ideal.Format.FromString("- black");
ideal.Format.LineWidth = 3;
ArrayTools.AddToArray(ideal, ref speedupsplots2[0,0].dataGroups);

speedupsplots2[0,0].bmargin = 1;
speedupsplots2[0,0].tmargin = 4;
speedupsplots2.PlotNow()
**************
unknown: exp_softgmres_schwarz_directcoarse_overlap
unknown: exp_softgmres_schwarz_directcoarse_overlap
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
System.Drawing.Bitmap
==============
var CL  = multiplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
var CL2 = speedupsplots.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
var CL3 = multiplots2.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
var CL4 = speedupsplots2.ToGnuplot().PlotCairolatex(xSize:17, ySize:17);
**************
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
Using gnuplot: C:\Users\krause\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
CL.SaveTo(Path.Combine(CurrentDocDir+"/plots/", "MPIScalingTimes.tex"));
CL2.SaveTo(Path.Combine(CurrentDocDir+"/plots/", "MPISpeedup.tex"));
CL3.SaveTo(Path.Combine(CurrentDocDir+"/plots/", "Additional_1.tex"));
CL4.SaveTo(Path.Combine(CurrentDocDir+"/plots/", "Additional_2.tex"));
**************
==============
CL.PlotNow();
CL2.PlotNow();
CL3.PlotNow();
CL4.PlotNow();
**************
System.ComponentModel.Win32Exception occurred: Das System kann die angegebene Datei nicht finden. Type 'LastError' for details.

==============
LastError
**************
System.ComponentModel.Win32Exception (0x80004005): Das System kann die angegebene Datei nicht finden
   bei System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   bei BoSSS.Application.BoSSSpad.GnuplotExtensions.CairolatexContainer.Preview(Boolean trimPage, Int32 dpi) in C:\BoSSS-experimental\public\src\L4-application\BoSSSpad\GnuplotExtensions.cs:Zeile 325.
   bei <InteractiveExpressionClass>.Host(Object& $retval)
   bei Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   bei BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in C:\BoSSS-experimental\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:Zeile 307.
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
