restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
var DB = OpenOrCreateDatabase(@"D:\SyncHHLR\DB_XDGPoisson_MPI");
**************
Opening existing database 'D:\SyncHHLR\DB_XDGPoisson_MPI'.

==============
var KcycleSessions = DB.Sessions.Where(s=>s.Name.Contains("Kcycle")).Where(s=>s.SuccessfulTermination);
**************
==============
int Depth = Convert.ToInt32(DB.Sessions.Pick(5).KeysAndQueries["UsedMGDepth"]);
**************
==============
KcycleSessions.Pick(0).KeysAndQueries["DOFs"]
**************
2314870
==============
**************
==============
using ilPSP.Tracing;
**************
==============
static class MCRUtils {
    static private double[] GetLvlwiseSolve(MethodCallRecord mcr, int Depth){
        string lvltrace    = "BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.Solve";
        string bottomtrace = "BoSSS.Solution.AdvancedSolvers.SparseSolver.Solve";
        return GetLevelwiseTime(mcr,lvltrace,bottomtrace, Depth);
    }
    static private double[] GetLvlwiseInit(MethodCallRecord mcr, int Depth){
        string lvltrace    = "BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.Init";
        string bottomtrace = "BoSSS.Solution.AdvancedSolvers.SparseSolver.Init";
        return GetLevelwiseTime(mcr,lvltrace,bottomtrace, Depth);
    }
    static private double[] GetLevelwiseTime(MethodCallRecord mcr, string lvltrace, string bottomtrace, int Depth){
        var MGsolve_mcr  = mcr.FindChildren(lvltrace);
        var Parsolve_mcr = mcr.FindChild(bottomtrace);
        var l_inctimes   = new List<double>();

        MGsolve_mcr.ForEach(s=>l_inctimes.Add(s.TimeSpentInMethod.TotalSeconds));
        l_inctimes.Add(Parsolve_mcr.TimeSpentInMethod.TotalSeconds);
        var inctimes = l_inctimes.ToArray();
        if(inctimes.Length!=Depth)
            throw new Exception("neq Depth");
        var lvltimes = new double[inctimes.Length];
        lvltimes[inctimes.Length-1]     = inctimes.Last();
        for(int i=inctimes.Length-2;i>=0;i--)
            lvltimes[i]=inctimes[i]-inctimes[i+1];
        return lvltimes;
    }
    
    
    static public double[] LvlwiseSolve(ISessionInfo SI,int maxDepth){
        var mcrs  = SI.GetProfiling();
        int Depth = Convert.ToInt32(SI.KeysAndQueries["UsedMGDepth"]);
        var dls   = new List<double[]>();
        foreach(var mcr in mcrs){
            double[] dl2add = GetLvlwiseSolve(mcr,Depth);
            dls.Add(dl2add);
            }
        double[] maxtimes = new double[maxDepth];
        foreach(var dl in dls){
            for(int i=0;i<dl.Length;i++)
                maxtimes[i]=maxtimes[i]<dl[i]?dl[i]:maxtimes[i];
        }
        return maxtimes;
    }
    static public double GetMaxSolveTime(ISessionInfo SI){
        return GetMaxTime(SI,"BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.Solve");
    }
    
    static private double GetMaxTime(ISessionInfo SI,string method){
        var mcrs       = SI.GetProfiling();
        double maxtime = -1;
        foreach(var mcr in mcrs){
            double time = mcr.FindChildren(method).Pick(0).TimeSpentInMethod.TotalSeconds;
            maxtime     = time>maxtime?time:maxtime;
        }
        return maxtime;
    }
    static public int NoOfCores(ISessionInfo SI){
        return SI.ComputeNodeNames.Count();
    }
    
    static public Dictionary<string,int> corespernode(ISessionInfo SI){
        var bla   = new Dictionary<string,int>();
        var names = SI.ComputeNodeNames;
        foreach(string n in names){
            try{
                bla.Add(n,1);
            } catch (Exception e){
                bla[n]++;
            }
        }
        return bla;
    }
}
**************
(68,32): warning CS0168: The variable `e' is declared but never used
No. of errors|warnings: 0|1.

==============
var LDepth = new List<int>();
KcycleSessions.ForEach(s=>LDepth.Add(Convert.ToInt32(s.KeysAndQueries["UsedMGDepth"])));
int MaxDepth = LDepth.Max();
MaxDepth;
**************
5
==============
KcycleSessions.Pick(0).KeysAndQueries["NoIter"]
**************
13
==============
var tmp = new System.Data.DataTable();
tmp.Columns.Add("NoOfCores",typeof(Int32));
tmp.Columns.Add("NoIter",typeof(Int32));
tmp.Columns.Add("DOF/core",typeof(Int32));
for(int iLvl=0;iLvl<MaxDepth;iLvl++){
    string colname = String.Format("Level{0}",iLvl);
    tmp.Columns.Add(colname, typeof(double));
}
//tmp.Columns.Add("Sum", typeof(double));
tmp.Columns.Add("SolveTime",typeof(double));


foreach(var SI in KcycleSessions){
    double[] times = MCRUtils.LvlwiseSolve(SI,MaxDepth);
    int iter   = Convert.ToInt32(SI.KeysAndQueries["NoIter"]);
    int dof    = Convert.ToInt32(SI.KeysAndQueries["DOFs"]);
    int cores  = MCRUtils.NoOfCores(SI);
    var newrow = tmp.NewRow();
    double sum = 0;
    for(int iLvl=0;iLvl<MaxDepth;iLvl++){
        string colname = String.Format("Level{0}",iLvl);
        newrow[colname]=times[iLvl]/iter;
        sum += times[iLvl];
    }
    newrow["NoIter"]=iter;
    newrow["DOF/core"]=dof/cores;
//    newrow["Sum"]=sum;
    newrow["SolveTime"]=MCRUtils.GetMaxSolveTime(SI);
    newrow["NoOfCores"]=cores;
    tmp.Rows.Add(newrow);
}
**************
SolveTime
==============
System.Data.DataView dv        = tmp.DefaultView;
dv.Sort                        = "NoOfCores";
System.Data.DataTable sortedDT = dv.ToTable();
sortedDT.Print();
**************
   NoOfCores NoIter DOF/core Level0           Level1            Level2           Level3            Level4            SolveTime    
0: 4         12     110702   1.53355793333333 16.3887201333333  0                0                 0                 215.0075773  
1: 4         14     10960    7.38645152142857 1.07820175        0                0                 0                 118.4928545  
2: 8         16     10540    19.460276325     5.08290446875     0.87144596875    0                 0                 406.6132504  
3: 16        15     11450    23.3725606066667 6.01251558        1.21323644666667 0                 0                 458.959621   
4: 22        13     105221   2.63741144615385 0.553813946153844 21.5040912846154 0                 0                 320.9675013  
5: 32        15     10595    18.5631186733333 4.72288921333333  2.05197426       0                 0                 380.0371179  
6: 64        19     10315    26.3692824736842 6.47676343157895  2.49503144736842 0.871989736842105 0                 687.9176703  
7: 128       21     10618    14.9327106857143 4.21392807142857  2.52411728571429 1.30596462380952  0                 482.3804356  
8: 256       27     10435    22.7237197259259 7.01274718148148  2.94424274814815 1.98831387407407  0.698260940740741 954.196243   
9: 512       27     10156    22.859309062963  7.28027724814815  3.8287815        2.53746629259259  1.34741855555556  1020.4822139 
==============
sortedDT.ToCSVFile(CurrentDocDir+@"\"+"lvlwise_scaling.txt");
**************
==============
MCRUtils.corespernode(KcycleSessions.Pick(4));
**************
List of 23 instances of KeyValuePair{String,Int32} {
  0: [hpb0003, 23]
  1: [hpb0004, 23]
  2: [hpb0005, 23]
  3: [hpb0006, 23]
  4: [hpb0007, 23]
  5: [hpb0008, 23]
  6: [hpb0010, 22]
  7: [hpb0012, 22]
  8: [hpb0013, 22]
  9: [hpb0016, 22]
  10: [hpb0017, 22]
  11: [hpb0018, 22]
  12: [hpb0020, 22]
  13: [hpb0022, 22]
  14: [hpb0026, 22]
  15: [hpb0028, 22]
  16: [hpb0036, 22]
  17: [hpb0047, 22]
  18: [hpb0048, 22]
  19: [hpb0051, 22]
  20: [hpb0065, 22]
  21: [hpb0066, 22]
  22: [hpb0084, 22]
}
==============
KcycleSessions.Pick(1)
**************
Xdg_weakscaling	J42875_k2_exp_Kcycle_schwarz	09/11/2020 19:41:19	da0b0216...
==============
KcycleSessions.Pick(1).PrintTotalImbalance(10)
**************
#1: 'ilPSP.LinSolvers.BlockMsrMatrix.SpMV': 2114 calls, 0.364% / 5.99E02 sec. runtime exclusivesec
#2: 'BoSSS.Solution.AdvancedSolvers.Schwarz.Solve': 324 calls, 0.220% / 3.63E02 sec. runtime exclusivesec
#3: 'BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.AddSol': 432 calls, 0.140% / 2.31E02 sec. runtime exclusivesec
#4: 'BoSSS.Foundation.XDG.Quadrature.HMF.LevelSetEdgeSurfaceQuadRuleFactory.GetOptimizedRule': 288 calls, 0.015% / 2.46E01 sec. runtime exclusivesec
#5: 'integrand_evaluation': 2257 calls, 0.015% / 2.41E01 sec. runtime exclusivesec
#6: 'BoSSS.Foundation.SpatialOperator+EvaluatorBase..ctor': 4 calls, 0.013% / 2.12E01 sec. runtime exclusivesec
#7: 'BoSSS.Foundation.SpatialOperator.GetEvaluatorEx': 2 calls, 0.011% / 1.79E01 sec. runtime exclusivesec
#8: 'CALL SOLVER': 432 calls, 0.010% / 1.66E01 sec. runtime exclusivesec
#9: 'BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.Solve': 82 calls, 0.009% / 1.55E01 sec. runtime exclusivesec
#10: 'ilPSP.LinSolvers.PARDISO.PARDISOSolver.PARDISOInitAndSolve': 432 calls, 0.009% / 1.46E01 sec. runtime exclusivesec

==============
KcycleSessions.Pick(1).PrintMPIImbalance(10)
**************
#1: 'root_frame': 0 calls, 0.543% / 8.95E02 sec. runtime exclusivesec
#2: 'BoSSS.Solution.AdvancedSolvers.OrthonormalizationMultigrid.Solve': 82 calls, 0.403% / 6.64E02 sec. runtime exclusivesec
#3: 'BoSSS.Application.XdgPoisson3.XdgPoisson3Main.AssembleMatrix': 1 calls, 0.071% / 1.17E02 sec. runtime exclusivesec
#4: 'Solver_Init': 1 calls, 0.050% / 8.26E01 sec. runtime exclusivesec
#5: 'ilPSP.LinSolvers.BlockMsrMatrix.__Multiply': 46 calls, 0.050% / 8.17E01 sec. runtime exclusivesec
#6: 'BoSSS.Foundation.IO.VectorDataSerializer.LoadVector': 1 calls, 0.027% / 4.41E01 sec. runtime exclusivesec
#7: 'BoSSS.Application.XdgPoisson3.XdgPoisson3Main.ExperimentalSolver': 1 calls, 0.016% / 2.63E01 sec. runtime exclusivesec
#8: 'BoSSS.Foundation.XDG.XSpatialOperatorMk2+XEvaluatorBase..ctor': 2 calls, 0.016% / 2.56E01 sec. runtime exclusivesec
#9: 'BoSSS.Foundation.Grid.Classic.GridCommons.ComputePartitionMETIS': 1 calls, 0.014% / 2.3E01 sec. runtime exclusivesec
#10: 'BoSSS.Foundation.XDG.CutCellMetrics.ComputeNonAgglomeratedMetrics': 1 calls, 0.008% / 1.28E01 sec. runtime exclusivesec

==============
KcycleSessions.Pick(6)
**************
Xdg_weakscaling_s	J32768_k2_exp_Kcycle_schwarz	09/07/2020 11:49:59	cffe8f8f...
==============
KcycleSessions.Pick(5).PrintTotalImbalance(10)
**************
#1: 'CALL SOLVER': 96 calls, 0.017% / 8.14E00 sec. runtime exclusivesec
#2: 'ilPSP.LinSolvers.PARDISO.PARDISOSolver.PARDISOInitAndSolve': 96 calls, 0.009% / 4.5E00 sec. runtime exclusivesec
#3: 'PARDISO_phase22': 16 calls, 0.005% / 2.2E00 sec. runtime exclusivesec
#4: 'integrand_evaluation': 3054 calls, 0.004% / 1.85E00 sec. runtime exclusivesec
#5: 'ilPSP.LinSolvers.BlockMsrMatrix.SpMV': 297 calls, 0.004% / 1.75E00 sec. runtime exclusivesec
#6: 'PARDISO_phase11': 16 calls, 0.003% / 1.46E00 sec. runtime exclusivesec
#7: 'BoSSS.Solution.AdvancedSolvers.Schwarz.Solve': 41 calls, 0.003% / 1.28E00 sec. runtime exclusivesec
#8: 'BoSSS.Foundation.SpatialOperator+EvaluatorBase..ctor': 4 calls, 0.003% / 1.26E00 sec. runtime exclusivesec
#9: 'BoSSS.Foundation.SpatialOperator.GetEvaluatorEx': 2 calls, 0.003% / 1.26E00 sec. runtime exclusivesec
#10: 'BoSSS.Foundation.XDG.Quadrature.HMF.LevelSetEdgeSurfaceQuadRuleFactory.GetOptimizedRule': 876 calls, 0.003% / 1.23E00 sec. runtime exclusivesec

==============
KcycleSessions.Pick(6).KeysAndQueries["DOFs"]
**************
339040
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
