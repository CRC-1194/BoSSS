restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XdgPoisson3;
**************
==============
ExecutionQueues;
**************
List of 4 instances of BatchProcessorClient {
  0: MiniBatchProcessor client @C:\Users\weber\AppData\Local\BoSSS-LocalJobs
  1: MS HPC client DC2, @\\hpccluster\hpccluster-scratch\weber\dply
  2: SlurmClient: jw52xeqa@lcluster5.hrz.tu-darmstadt.de, Slurm account: project01217
  3: SlurmClient: jw52xeqa@lcluster14.hrz.tu-darmstadt.de, Slurm account: special00006
}
==============
// ==================================
// setup Client & Workflow & Database
// ==================================
var myBatch = (SlurmClient)ExecutionQueues[3];
ExecutionQueues[3].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
//myBatch.MonoDebug = true;
**************
==============
string WFlowName = "Xdg_strong_scaleing";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.SetNameBasedSessionJobControlCorrelation();
WorkflowMgm.AllJobs;
**************
Project name is set to 'Xdg_strong_scaleing'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
// providing corresponding paths on both platforms:
string dirname = "DB_XDGPoisson_MPI";
string linpath = @"/work/scratch/jw52xeqa/"+dirname;
string winpath = @"W:\work\scratch\jw52xeqa\"+dirname;
**************
==============
var tempDB = OpenOrCreateDatabase(winpath);
**************
Opening existing database 'W:\work\scratch\jw52xeqa\DB_XDGPoisson_MPI'.

==============
tempDB.Sessions
**************
List of 29 instances of ISessionInfo {
  0: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/29/2021 12:56:33	4f4edf30...
  1: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 10:10:34	de178d4f...
  2: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 10:10:33	f94b4207...
  3: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 01:55:12	7954e722...
  4: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/25/2021 14:37:18	0140f620...
  5: Xdg_strong_scaleing_test	J103823_k2_exp_gmres_levelpmg_c64	01/23/2021 10:35:27	2be820b4...
  6: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c64	01/23/2021 10:32:20	95a852bb...
  7: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c64*	01/23/2021 09:36:27	49d6c02c...
  8: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/23/2021 01:03:57	ac287e9c...
  9: Xdg_strong_scaleing_test	J103823_k2_exp_gmres_levelpmg_c4	01/20/2021 22:05:14	025557dd...
  10: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4	01/20/2021 22:05:06	47051770...
  11: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/20/2021 22:04:27	d9330ec1...
  12: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c64*	01/20/2021 22:05:06	9f779f69...
  13: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_4*	01/20/2021 21:41:22	ef6d6c49...
  14: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_4*	01/20/2021 21:39:32	5530725d...
  15: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 21:32:06	29c413d2...
  16: Xdg_strong_scaleing_test	J512000_k2_exp_gmres_levelpmg_16*	01/20/2021 20:31:59	bf366e56...
  17: Xdg_strong_scaleing_test	J512000_k2_exp_Kcycle_schwarz_16*	01/20/2021 20:31:57	a5cde16b...
  18: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 20:31:50	6ed3d38b...
  19: Xdg_strong_scaleing_test	J512000_k2_exp_gmres_levelpmg_16*	01/20/2021 18:14:57	74fbe633...
  20: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 18:05:40	85fe36c2...
  21: Xdg_strong_scaleing_test	J512000_k2_exp_Kcycle_schwarz_16*	01/20/2021 18:05:41	d9ae2b7f...
  22: Xdg_Poison_strong_scale_test	J103823_k2_exp_gmres_levelpmg_16	01/20/2021 17:49:39	aceca4ec...
  23: Xdg_Poison_strong_scale_test	J103823_k2_exp_Kcycle_schwarz_16	01/20/2021 17:49:29	450ccda7...
  24: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_16*	01/20/2021 17:49:26	be9aa012...
  25: Xdg_Poison_strong_scale_test	J103823_k2_exp_gmres_levelpmg_22*	01/20/2021 17:43:01	d5c8f7cd...
  26: Xdg_Poison_strong_scale_test	J103823_k2_exp_Kcycle_schwarz_22*	01/20/2021 17:41:16	668a9734...
  27: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_22*	01/20/2021 17:37:23	fb11b448...
  28: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_22_22*	01/20/2021 15:15:05	2506b2dd...
}
==============
// ===================
// Utility definitions
// ===================
**************
==============
double xMax = 1.0, yMax = 1.0, zMax=1.0;
double xMin = -1.0, yMin = -1.0,zMin = -1.0;
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
    public static Func<double[],int> GetPartFunc(int cores){
        Func<double[], int> MakeMyPartioning = delegate (double[] X) {
        double x  = X[0];
        double y  = X[1];
        double z  = X[2];

        int sx = 1;
        int sy = 1;
        int sz = 1;
        for (int i = 0; i < Math.Log(cores, 2); i++) {
            if (i % 3 == 0)
                sx*= 2;
            else if(i % 3 == 1)
                sy*=2;
            else
                sz*=2;
        }


        double xspan = (xMax - xMin) / sx;
        double yspan = (yMax - yMin) / sy;
        double zspan = (zMax - zMin) / sz;
        int rank     = int.MaxValue;
        int icore    = 0;
        for (int i = 0; i < sx; i++) {
            for (int j = 0; j < sy; j++) {
                for(int k=0;k<sz;k++){
                    bool xtrue = x <= xspan * (i + 1) + xMin;
                    bool ytrue = y <= yspan * (j + 1) + yMin;
                    bool ztrue = z <= zspan * (k + 1) + zMin;
                    if (xtrue && ytrue && ztrue) {
                        rank = icore;
                        return rank;
                    }
                    icore++;
                }
            }
        }

        return rank;
        };
    return MakeMyPartioning;
}
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
// set parameterz
int[] core_sweep = {4,8,16,32,64,128};
int p           = 2;
int Problemsize = 1000000;
**************
==============
// calculate grid size
double Res    = Math.Pow(Problemsize/Utils.Np(p),0.333333333);
int ResRndup  = (int)Math.Ceiling(Res);
int NoOfCells = ResRndup*ResRndup*ResRndup;
double test   = NoOfCells*Utils.Np(p);
test;
**************
1038230
==============
tempDB.Grids;
**************
List of 7 instances of IGridInfo {
  0: { Guid = b7d15705-7e37-455c-8cbd-43fb29c21738; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  1: { Guid = c3bb9932-d437-4c2a-aef3-0745604a07ff; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  2: { Guid = 0c742c5d-98a5-4420-9b11-c6d54788500d; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  3: { Guid = a596e0db-18ca-4853-b344-b31a2f622600; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  4: { Guid = b59e2806-816c-4596-89c3-fb832f0d1adf; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  5: { Guid = 1c8b0cde-9adf-4505-9295-705753445103; Name = Xdg_strong_scaleing_J512000; Cell Count = 512000; Dim = 3 }
  6: { Guid = d477c7b3-e74e-4fa5-9e3d-ab1211be09f1; Name = Xdg_Poison_strong_scale_test_J103823; Cell Count = 103823; Dim = 3 }
}
==============
**************
==============
**************
==============
// resolution per dimension of space
// corresponds to the predef partioning
int sx = 1;
int sy = 1;
int sz = 1;
for (int i = 0; i < Math.Log(64, 2); i++) {
    if (i % 3 == 0)
        sx*= 2;
    else if(i % 3 == 1)
        sy*=2;
    else
        sz*=2;
}
Console.WriteLine("sx:{0},sy:{1},sz:{2}",sx,sy,sz);
**************
sx:4,sy:4,sz:4

==============
int[] Resolutions_3D = new int[] { ResRndup };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    double[] xNodes = GenericBlas.Linspace(xMin, xMax, Res + 1);
    double[] yNodes = GenericBlas.Linspace(yMin, yMax, Res + 1);
    double[] zNodes = GenericBlas.Linspace(zMin, zMax, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt]=null;
    foreach(IGridInfo grd in tempDB.Grids){
        bool check = grd.Name.Contains(string.Format("_J"+ J));
        if(check){
          //grids[cnt]=grd;
        }
    }
    
    //grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        foreach(int cores in core_sweep){
        g.AddPredefinedPartitioning("predef"+cores, Utils.GetPartFunc(cores));
        }
        g.Name = GridName;
        g.EdgeTagNames.Add(1, "Dirichlet");   
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            ret = 1;
            return ret;
        });
      
        tempDB.SaveGrid(ref g,true);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Creating grid with 103823 cells.
Grid Edge Tags changed.

==============
((GridCommons)grids.Pick(0)).PredefinedGridPartitioning
**************
List of 6 instances of KeyValuePair{String,GridPartitioningVector} {
  0: [predef128, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
  1: [predef16, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
  2: [predef32, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
  3: [predef4, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
  4: [predef64, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
  5: [predef8, BoSSS.Foundation.Grid.Classic.GridCommons+GridPartitioningVector]
}
==============
// Overwrite Selection
//var ListOfgrids = new List<IGridInfo>();
//ListOfgrids.AddRange(tempDB.Grids.Pick(0));
//IGridInfo[] grids = ListOfgrids.ToArray();
//IGridInfo[] grids = new IGridInfo[]{tempDB.Grids.Pick(0)};
**************
==============
grids;
**************
List of 1 instances of IGridInfo {
  0: { Guid = 7040ba39-1dce-43ee-94ca-62b72dae7b5b; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
}
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0,0});
**************
0
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<XdgPoisson3Control> controls = new List<XdgPoisson3Control>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
//int[] PolyDegS = new int[] {2, 3 ,5};
int[] PolyDegS = new int[] {p};
**************
==============
// Solvers which we want to instrument:
LinearSolverCode[] solver_nameS = new LinearSolverCode[] {
    //LinearSolverCode.classic_pardiso, 
    //LinearSolverCode.classic_mumps, 
    LinearSolverCode.exp_Kcycle_schwarz, 
    //LinearSolverCode.exp_gmres_levelpmg, 
}; 
**************
==============
// MaxDof for each calculation, prohibit crashes, due to limited memory capabilities of lin solver
int MaxDof = int.MaxValue;
**************
==============
using BoSSS.Solution.XNSECommon;
using BoSSS.Foundation.XDG;
**************
==============
// --------------------
// setup control object
// --------------------
controls.Clear();
foreach(LinearSolverCode solver_name in solver_nameS) {
foreach(int k in PolyDegS) {    
foreach(IGridInfo grd in grids) {
foreach(int cores in core_sweep){
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    //int rnd         = new Random().Next();
    //string caseName = string.Format("J{0}_k{1}_{2}_c{3}_rnd{4}", J, k, solver_name,cores,rnd);
    string caseName = string.Format("J{0}_k{1}_{2}_c{3}", J, k, solver_name,cores);
    
    //string caseName = string.Format("J{0}_k{1}_{2}_c{3}", J, k, solver_name,cores);
    Console.WriteLine("setting up: " + caseName);
    Console.WriteLine("based on grid: "+grd.Name);

    var ctrl = new XdgPoisson3Control();
    
    
    ctrl.AlternateDbPaths = new[]{
        new ValueTuple<string,string>(linpath, ""),
        new ValueTuple<string,string>(winpath, "pcmit32")
    };
    ctrl.savetodb = true;
    ctrl.GridGuid = grd.ID;
    
    ctrl.FieldOptions.Add("Phi", new FieldOpts() {
         Degree = 2,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });
    ctrl.FieldOptions.Add("u", new FieldOpts() {
         Degree = k,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });

    ctrl.LinearSolver.SolverCode           = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels  = 10;
    ctrl.LinearSolver.TargetBlockSize      = Math.Min(J*Np-1,10000);
    ctrl.LinearSolver.ConvergenceCriterion = 1e-8;
    
    double radius           = 0.71;
    ctrl.ExcactSolSupported = false;
    ctrl.InitialValues.Add("Phi", new Formula("X => X[0].Pow2()+X[1].Pow2()+X[2].Pow2()-"+radius+".Pow2()"));
    ctrl.MU_A = -1;
    ctrl.MU_B = -1000;
    ctrl.InitialValues.Add("rhs#A", new Formula("X => 1"));
    ctrl.InitialValues.Add("rhs#B", new Formula("X => 1"));
    ctrl.InitialValues.Add("u#A", new Formula ("X => 0"));
    ctrl.InitialValues.Add("u#B", new Formula ("X => 0"));
    ctrl.CutCellQuadratureType = XQuadFactoryHelper.MomentFittingVariants.Saye;
    ctrl.SetDefaultDiriBndCnd  = true;
    //ctrl.TracingNamespaces     = "*";
    
    ctrl.ViscosityMode = XLaplace_Interface.Mode.SIP;
    ctrl.SessionName   = caseName;
    ctrl.ProjectName   = WFlowName;
    //ctrl.GridPartType  = BoSSS.Foundation.Grid.GridPartType.METIS;
    ctrl.GridPartType    = BoSSS.Foundation.Grid.GridPartType.Predefined;
    ctrl.GridPartOptions = "predef"+cores;
    
    ctrl.AgglomerationThreshold = 0.1;
    
    controls.Add(ctrl);
}
}
}
}
**************
setting up: J103823_k2_exp_Kcycle_schwarz_c4_rnd168027327
based on grid: Xdg_strong_scaleing_J103823
setting up: J103823_k2_exp_Kcycle_schwarz_c8_rnd774623231
based on grid: Xdg_strong_scaleing_J103823
setting up: J103823_k2_exp_Kcycle_schwarz_c16_rnd1680887564
based on grid: Xdg_strong_scaleing_J103823
setting up: J103823_k2_exp_Kcycle_schwarz_c32_rnd1097799503
based on grid: Xdg_strong_scaleing_J103823
setting up: J103823_k2_exp_Kcycle_schwarz_c64_rnd978480008
based on grid: Xdg_strong_scaleing_J103823
setting up: J103823_k2_exp_Kcycle_schwarz_c128_rnd1465588304
based on grid: Xdg_strong_scaleing_J103823

==============
**************
==============
//var solver = new XdgPoisson3Main();
//solver.Init(c+ontrols[0]);
//solver.RunSolverMode();
//solver.Dispose();
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
myBatch.UseLB2 = true;
**************
==============
foreach(var ctrl in controls){
    int ncores = Convert.ToInt32(ctrl.GridPartOptions.Substring(6));
    Console.WriteLine(" Submitting: " + ctrl.SessionName); 
    var aJob = new Job(ctrl.SessionName, typeof(XdgPoisson3Main));
    aJob.SetControlObject(ctrl);
    aJob.NumberOfMPIProcs         = ncores;
    aJob.ExecutionTime            = "02:00:00";
    aJob.MemPerCPU                = "3600";
    aJob.UseComputeNodesExclusive = true;
    aJob.Activate(myBatch);
}
**************
 Submitting: J103823_k2_exp_Kcycle_schwarz_c4_rnd168027327
Deploying job J103823_k2_exp_Kcycle_schwarz_c4_rnd168027327 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193024
copied 29 files.
   written file: control.obj
deployment finished.
16949920

 Submitting: J103823_k2_exp_Kcycle_schwarz_c8_rnd774623231
Deploying job J103823_k2_exp_Kcycle_schwarz_c8_rnd774623231 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193028
copied 29 files.
   written file: control.obj
deployment finished.
16949921

 Submitting: J103823_k2_exp_Kcycle_schwarz_c16_rnd1680887564
Deploying job J103823_k2_exp_Kcycle_schwarz_c16_rnd1680887564 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193034
copied 29 files.
   written file: control.obj
deployment finished.
16949922

 Submitting: J103823_k2_exp_Kcycle_schwarz_c32_rnd1097799503
Deploying job J103823_k2_exp_Kcycle_schwarz_c32_rnd1097799503 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193039
copied 29 files.
   written file: control.obj
deployment finished.
16949923

 Submitting: J103823_k2_exp_Kcycle_schwarz_c64_rnd978480008
Deploying job J103823_k2_exp_Kcycle_schwarz_c64_rnd978480008 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193045
copied 29 files.
   written file: control.obj
deployment finished.
16949924

 Submitting: J103823_k2_exp_Kcycle_schwarz_c128_rnd1465588304
Deploying job J103823_k2_exp_Kcycle_schwarz_c128_rnd1465588304 ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_strong_scaleing-XdgPoisson32021Jan29_193050
copied 29 files.
   written file: control.obj
deployment finished.
16949925


==============
LastError
**************
System.ApplicationException: missing job id return value from slurm command.
   at BoSSS.Application.BoSSSpad.SlurmClient.Submit(Job myJob, String DeploymentDirectory) in B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\SlurmClient.cs:line 338
   at BoSSS.Application.BoSSSpad.Job.Activate(BatchProcessorClient bpc, Boolean DeleteOldDeploymentsAndSessions) in B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\Job.cs:line 1199
   at <InteractiveExpressionClass>.Host(Object& $retval)
   at Mono.CSharp.Evaluator.Evaluate(String input, Object& result, Boolean& result_set)
   at BoSSS.Application.BoSSSpad.ReadEvalPrintLoop.EvalPrint(String line, Assembly& AssemblyProduced) in B:\BoSSS-gitlab\public\src\L4-application\BoSSSpad\ReadEvalPrintLoop.cs:line 358
==============
// ================
// optional stuff
// ===============
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(s=>Console.WriteLine(s.Value.Name +"Status: "+s.Value.Status));
//somelist.ForEach(s=>Console.WriteLine(s.Value.Name));
**************
C# evaluator not initialized: use 'restart'.

==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed)).Where(s=>s.Value.Name.Contains("Kcycle_schwarz"))
**************
List of 0 instances of KeyValuePair{String,Job} {
}
==============
using System.IO
**************
==============
// write out stdout of all jobs
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
//var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.FinishedSuccess));
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stderr.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stderr_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
writing XdgPoissonVelocity_J8_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J262144_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J262144_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J262144_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J8_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J8_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k5_exp_Kcycle_schwarz ...done.

==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed))
**************
List of 0 instances of KeyValuePair{String,Job} {
}
==============
// write out stdout of Failed Jobs
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed));
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stdout.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stout_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
Renci.SshNet.Common.SshConnectionException occurred: Client not connected.. Type 'LastError' for details.


==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
