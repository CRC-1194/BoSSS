restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 3 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
  1: { Session Count = 8; Grid Count = 1; Path = G:\DB_Cube }
  2: { Session Count = 4; Grid Count = 1; Path = G:\Performance_DB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.IBM_Solver;
using BoSSS.Foundation.Grid.RefElements;
using BoSSS.Solution.AdvancedSolvers;
using System.Text;
using System.Threading.Tasks;
using ilPSP.Tracing;
**************
==============
WorkflowMgm.Init("MPISolverPerformance_StokesSphere");
**************
Project name is set to 'MPISolverPerformance_StokesSphere'.

==============
//var WinTempDB = OpenOrCreateDatabase(@"L:\SLURM\temp_db");
var myDB = OpenOrCreateDatabase(@"G:\Performance_DB");
**************
Opening existing database 'G:\Performance_DB'.

==============
//Console.WriteLine("Please type in your Username");
//var Username = Console.ReadLine();
**************
==============
//var myBatch = new SlurmClient(@"L:\SLURM","lcluster2.hrz.tu-darmstadt.de","oe11okuz");
**************
==============
var myBatch = new MiniBatchProcessorClient(@"G:\deploy-Mini\");
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Mini batch processor is already running.

==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }
}
**************
==============
// ==========
// Parameters
// ==========
**************
==============
**************
==============
LinearSolverCode[] linSolvers = new LinearSolverCode[] {
    //LinearSolverCode.classic_mumps,
    LinearSolverCode.exp_gmres_levelpmg,
    //LinearSolverCode.exp_schwarz_directcoarse,
    //LinearSolverCode.exp_schwarz_Kcycle_directcoarse,
    //LinearSolverCode.exp_schwarz_directcoarse_overlap,
    //LinearSolverCode.exp_schwarz_Kcycle_directcoarse_overlap,
    //LinearSolverCode.exp_softgmres_schwarz_Kcycle_directcoarse_overlap
    //LinearSolverCode.exp_softgmres_schwarz_directcoarse_overlap,
    //LinearSolverCode.automatic
};
NonLinearSolverCode[] nonlinSolvers= new NonLinearSolverCode[] {
    NonLinearSolverCode.Newton,
};
int[] ks = new int[] {2,3};
int cells_x  = 64;
int cells_yz = 16;
int re       = 1; 
int saveToDB = 1;
int[] procs    = new int[] {4};
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
// x-direction
var _xNodes = GenericBlas.Linspace(-0.5, 1.5, cells_x + 1);
// y-direction
var _yNodes = GenericBlas.Linspace(-0.5, 0.5, cells_yz + 1);
// z-direction
var _zNodes = GenericBlas.Linspace(-0.5, 0.5, cells_yz + 1);
// Generate Grid
GridCommons grd; 
grd = Grid3D.Cartesian3DGrid(_xNodes, _yNodes, _zNodes, CellType.Cube_Linear, false, true, false, null);
grd.EdgeTagNames.Add(1, "Velocity_inlet");
grd.EdgeTagNames.Add(2, "Wall");
grd.EdgeTagNames.Add(3, "Pressure_Outlet");
grd.DefineEdgeTags(delegate (double[] _X) {
                    var X    = _X;
                    double x = X[0];
                    double y = X[1];
                    double z = X[2];
                    byte ret = 0;

                    if (Math.Abs(x - (-0.5)) < 1.0e-6)
                        // inlet
                        ret = 1;

                    if (Math.Abs(x - (1.5)) < 1.0e-6)
                        // outlet
                        ret = 3;

                    if (Math.Abs(y - (-0.5)) < 1.0e-6)
                        // left
                        ret = 2;

                    if (Math.Abs(y - (0.5)) < 1.0e-6)
                        // right
                        ret = 2;

                    if (Math.Abs(z - (-0.5)) < 1.0e-6)
                        // top left
                        ret = 2;

                    if (Math.Abs(z - (0.5)) < 1.0e-6)
                        // top right
                        ret = 2;
                        
                        return ret;
                });
myDB.SaveGrid(ref grd);
**************
An equivalent grid is already present in the database -- the grid will not be saved.
61f5265d-06cc-4ffa-bbb2-bee4e4d3cc43
==============
**************
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double ZERO(double[] X) {
        return 0.0;
    }
    public static double Phi(double[] X) {
        return -(X[0]).Pow2() + -(X[1]).Pow2() + -(X[2]).Pow2() + (0.1).Pow2();   
    }
    public static double VelocityInlet(double[] X) {
        return 1 - 4 * (X[2] * X[2]);
    }
}
**************
==============
List<IBM_Control> controls = new List<IBM_Control>();
**************
==============
controls.Clear();
foreach(NonLinearSolverCode nonlinSolverName in nonlinSolvers){ 
foreach(LinearSolverCode linSolverName in linSolvers){
var C = new IBM_Control();
controls.Add(C);

// basic database options
// ======================

C.savetodb = true;
C.DbPath   = myDB.Path;
//C.DbPath                      = @"/home/oe11okuz/BoSSS_DB/Lichtenberg_DB";
C.DynamicLoadBalancing_Period = 1;

C.saveperiod  = 1;
C.ProjectName = "3DChannel";
C.Tags.Add("Prec param study");
C.SetDGdegree(1);
C.SetGrid(grd);

C.GridPartType = GridPartType.none;
           

C.InitialValues.Add("VelocityX", GetFormulaObject(InitialValues.ZERO));
C.InitialValues.Add("VelocityY", GetFormulaObject(InitialValues.ZERO));
C.InitialValues.Add("VelocityZ", GetFormulaObject(InitialValues.ZERO));
C.InitialValues.Add("Pressure", GetFormulaObject(InitialValues.ZERO));
C.InitialValues.Add("Phi", GetFormulaObject(InitialValues.Phi));
        
// Set Initial Conditions
   //     C.InitialValues_Evaluators.Add("VelocityX", X => 0);
     //   C.InitialValues_Evaluators.Add("VelocityY", X => 0);
       // C.InitialValues_Evaluators.Add("VelocityZ", X => 0);
        //C.InitialValues_Evaluators.Add("Pressure", X => 0);

        // Because its a sphere

        C.particleRadius = 0.1;
        //C.InitialValues_Evaluators.Add("Phi", X => -(X[0]).Pow2() + -(X[1]).Pow2() + -(X[2]).Pow2() + C.particleRadius.Pow2());
        //C.InitialValues_Evaluators.Add("Phi", X => -1);   

        // Physical values
        C.PhysicalParameters.rho_A = 1;
        // 1/Re
        //C.PhysicalParameters.mu_A = 1.0 / 10.0;
        C.PhysicalParameters.mu_A = 0.2 / re;

        //C.PhysicalParameters.mu_A = 1.0 / re;

        // Boundary conditions
        C.AddBoundaryValue("Velocity_inlet", "VelocityX", GetFormulaObject(InitialValues.VelocityInlet));
        C.AddBoundaryValue("Velocity_inlet", "VelocityY", GetFormulaObject(InitialValues.ZERO));
        C.AddBoundaryValue("Wall");
        C.AddBoundaryValue("Pressure_Outlet");


        // misc. solver options
        // ====================
        C.PhysicalParameters.IncludeConvection                     = false;
        C.AdvancedDiscretizationOptions.PenaltySafety              = 4;
        C.AdvancedDiscretizationOptions.CellAgglomerationThreshold = 0.2;
        C.LevelSetSmoothing                                        = false;
        C.LinearSolver.MaxKrylovDim                                = 30;
        C.LinearSolver.MaxSolverIterations                         = 50;
        C.LinearSolver.MinSolverIterations                         = 1;
        C.LinearSolver.ConvergenceCriterion                        = 1E-10;
        C.NonLinearSolver.MaxSolverIterations                      = 50;
        C.NonLinearSolver.MinSolverIterations                      = 1;
        C.NonLinearSolver.ConvergenceCriterion                     = 1E-10;
        
        C.VelocityBlockPrecondMode = MultigridOperator.Mode.SymPart_DiagBlockEquilib_DropIndefinite;
        
        // Solver configuration
        C.LinearSolver.SolverCode = linSolverName;

        

        // Timestepping
        // ============
        C.Timestepper_Scheme = IBM_Control.TimesteppingScheme.BDF2;
        //C.dtFixed            = 1E20;
        C.dtMax                            = 1E20;
        C.dtMin                            = 0;
        C.Endtime                          = 1000;
        C.NoOfTimesteps                    = 100;
        C.LinearSolver.NoOfMultigridLevels = 3;
        
        // Assign correct names
        C.SessionName = "Stokes_Sphere_Flow_k1"+nonlinSolverName+"&"+linSolverName+"_MGLevels"+C.LinearSolver.NoOfMultigridLevels;
}}
**************
==============
LastError
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
foreach(var ctrl in controls) {
    var tmpName = ctrl.SessionName;
foreach(int proc in procs){
    ctrl.SessionName = tmpName+"_Proc"+proc;
    Console.WriteLine(" Submitting: " + ctrl.SessionName);
    //old: ctrl.RunBatch(myBatch,NumberOfMPIProcs:proc,UseComputeNodesExclusive:true,executionTime:"00:50:00");  
    ctrl.RunBatch(myBatch);
}}
**************
 Submitting: Stokes_Sphere_Flow_k1Newton&classic_pardiso_MGLevels3_Proc4
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: G:\deploy-Mini\IBM_Solver2019Aug13_15-01-17
Source directory: G:\BoSSS-Performance\public\src\L4-application\BoSSSpad\bin\Release
copied 28 files.
   writing file: control.obj
deployment finished.

==============
//Runit directly
var Solver = new IBM_SolverMain();
Solver.Init(controls[0]);
Solver.RunSolverMode();
Solver.Dispose();
**************
Session ID: 47392fff-8e86-4010-ad93-05a2b58dd804, DB path: 'G:\Performance_DB'.
Total number of cells:    16384
Total number of DOFs:     212992
Total number of cut cells:     16384
Using standard CellCostEstimatorFactories
Total number of cells:    16384
Total number of DOFs:     212992
In-stationary solve, time-step #1.0, dt = 1E+20 ...
Forces coeff: Saye, order = 3
Torque coeff: Saye, order = 3
x-Force:   0.553485073883748
y-Force:   0.00015974582535079
z-Force:   1.54016586328995E-05
Torqe:   3.91980834143717E-06

Removing tag: NotTerminated

==============
**************
==============
WorkflowMgm.AllJobs.Select(kv => kv.Key + ": \t" + kv.Value.Status);
**************
List of 1 instances of String {
  0: Stokes_Sphere_Flow_k1Newton&classic_pardiso_MGLevels3_Proc4: 	FinishedSuccessful
}
==============
**************
==============
//WorkflowMgm.AllJobs.ElementAt(9).Value.Stdout;
**************
==============
//WorkflowMgm.AllJobs.ElementAt(0).Value.Stdout;
**************
==============
WorkflowMgm.SessionTable.Rows.Count;
**************
8
==============
// =====================================
// Session table
// =====================================
**************
==============
// -------------------------------
// Additional/user-defined columns
// -------------------------------
**************
==============
static class AddCols {
     static public double getMaxTime(ISessionInfo SI, string method, bool exclusive) {
         double maxTime = 0.0;
         var mcr        = SI.GetProfiling();
                // Iterate over MPIs
                for (int j = 0; j < mcr.Count(); j++) {
                    MethodCallRecord value;
                    // Iterate over methods
                        // Get execution time of current method for current processor
                        double tempTime;
                        double tempFractions;
                        int occurence        = 1;

                        value = mcr[j].FindChild(method);
                        if (value == null) {
                            value = mcr[j];
                        }
                        if (exclusive) {
                            tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeExclusive.TotalSeconds).Pick(occurence-1).TimeExclusive.TotalSeconds;
                                IEnumerable<MethodCallRecord> calls = value.FindChildren(method).OrderByDescending(s => s.ExclusiveTimeFractionOfRoot);
                                double maxValue = calls.Pick(occurence-1).ExclusiveTimeFractionOfRoot;
                                int maxIndex    = calls.Select(s => s.ExclusiveTimeFractionOfRoot).ToList().IndexOf(maxValue);
                                tempFractions   = maxValue;                             
                            
                        } else {
                             tempTime = value.FindChildren(method).OrderByDescending(s => s.TimeSpentInMethod.TotalSeconds).Pick(occurence-1).TimeSpentInMethod.TotalSeconds;
                                IEnumerable<MethodCallRecord> calls = value.FindChildren(method).OrderByDescending(s => s.TimeFractionOfRoot);
                                double maxValue = calls.Pick(occurence-1).TimeFractionOfRoot;
                                int maxIndex    = calls.Select(s => s.TimeFractionOfRoot).ToList().IndexOf(maxValue);
                                tempFractions   = maxValue;
                        }
                        // Only save execution time if it is the highest value of all processor times
                        if (tempTime > maxTime) {
                            maxTime = tempTime;
                        }
                    }
                    return maxTime;
    }
    
    static public object SlvIterTime(ISessionInfo SI) {
        return getMaxTime(SI,"Slv Iter",false);
    }
    static public object SlvInitTime(ISessionInfo SI) {
        return getMaxTime(SI,"Slv Init",false);
    }
    static public object SchwarzSolve(ISessionInfo SI) {
        return getMaxTime(SI,"BoSSS.Solution.Multigrid.Schwarz.Solve",false);
    }
    static public object MPIs(ISessionInfo SI) {
        return SI.ComputeNodeNames.Count();
    }
}
**************
(11,32): warning CS0219: The variable `tempFractions' is assigned but its value is never used
(22,37): warning CS0219: The variable `maxIndex' is assigned but its value is never used
(29,37): warning CS0219: The variable `maxIndex' is assigned but its value is never used
No. of errors|warnings: 0|3.

==============
WorkflowMgm.AdditionalSessionTableColums.Clear();
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SlvIter_excl", AddCols.SlvIterTime);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "SlvInit_excl", AddCols.SlvInitTime);
    WorkflowMgm.AdditionalSessionTableColums.Add(
    "PrecSolve", AddCols.SchwarzSolve);
WorkflowMgm.AdditionalSessionTableColums.Add(
    "Processors", AddCols.MPIs);
**************
==============
// --------------------------
// Save Session table in file
// --------------------------
**************
==============
var SessTab = WorkflowMgm.SessionTable;
**************
==============
// The Session column can't be serialized,
// we have to remove it
List<string> AllCols = SessTab.GetColumnNames().ToList();
AllCols.Remove("Session");
**************
True
==============
SessTab = SessTab.ExtractColumns(AllCols.ToArray());
**************
==============
SessTab.GetColumnNames()
**************
List of 88 instances of String {
  0: SessionName
  1: DGdegree:Velocity*
  2: DGdegree:Pressure
  3: DGdegree:PhiDG
  4: DGdegree:Phi
  5: Bndtype:Velocity_inlet
  6: Bndtype:Wall
  7: Bndtype:Pressure_Outlet
  8: GeneratedFromCode
  9: ControlFileText_Index
  10: dtFixed
  11: AdvancedDiscretizationOptions.ContiSign
  12: AdvancedDiscretizationOptions.RescaleConti
  13: AdvancedDiscretizationOptions.LFFA
  14: AdvancedDiscretizationOptions.LFFB
  15: AdvancedDiscretizationOptions.PenaltySafety
  16: AdvancedDiscretizationOptions.CellAgglomerationThreshold
  17: RefinementLevel
  18: maxCurvature
  19: VelocityBlockPrecondMode
  20: LevelSetSmoothing
  21: PhysicalParameters.IncludeConvection
  22: PhysicalParameters.rho_A
  23: PhysicalParameters.mu_A
  24: PhysicalParameters.Material
  25: particleRadius
  26: Timestepper_Scheme
  27: FixedStreamwisePeriodicBC
  28: TimeStepper_Init
  29: GridPartType
  30: ProjectName
  31: NoOfTimesteps
  32: Endtime
  33: saveperiod
  34: rollingSaves
  35: dtMin
  36: dtMax
  37: CompMode
  38: ImmediatePlotPeriod
  39: SuperSampling
  40: savetodb
  41: logFileDirectory
  42: Paramstudy_ContinueOnError
  43: LinearSolver.verbose
  44: LinearSolver.MaxKrylovDim
  45: LinearSolver.MaxSolverIterations
  46: LinearSolver.MinSolverIterations
  47: LinearSolver.ConvergenceCriterion
  48: LinearSolver.SolverCode
  49: LinearSolver.NoOfMultigridLevels
  50: LinearSolver.exp_localPrec_muA
  51: LinearSolver.exp_localPrec_Min_dt
  52: LinearSolver.TargetBlockSize
  53: NonLinearSolver.verbose
  54: NonLinearSolver.PrecondSolver.verbose
  55: NonLinearSolver.PrecondSolver.MaxKrylovDim
  56: NonLinearSolver.PrecondSolver.MaxSolverIterations
  57: NonLinearSolver.PrecondSolver.MinSolverIterations
  58: NonLinearSolver.PrecondSolver.ConvergenceCriterion
  59: NonLinearSolver.PrecondSolver.SolverCode
  60: NonLinearSolver.PrecondSolver.NoOfMultigridLevels
  61: NonLinearSolver.PrecondSolver.exp_localPrec_muA
  62: NonLinearSolver.PrecondSolver.exp_localPrec_Min_dt
  63: NonLinearSolver.PrecondSolver.TargetBlockSize
  64: NonLinearSolver.MaxSolverIterations
  65: NonLinearSolver.MinSolverIterations
  66: NonLinearSolver.ConvergenceCriterion
  67: NonLinearSolver.UnderRelax
  68: NonLinearSolver.SolverCode
  69: DynamicLoadBalancing_RedistributeAtStartup
  70: DynamicLoadBalancing_Period
  71: DynamicLoadBalancing_ImbalanceThreshold
  72: DynamicLoadBalancing_On
  73: AdaptiveMeshRefinement
  74: AMR_startUpSweeps
  75: CutCellQuadratureType
  76: ContinueOnIoError
  77: Grid:NoOfCells
  78: Grid:hMax
  79: Grid:hMin
  80: UsedNoOfMultigridLevels
  81: C_Drag
  82: C_Lift
  83: RegularTerminated
  84: SlvIter_excl
  85: SlvInit_excl
  86: PrecSolve
  87: Processors
}
==============
//Checking if table contains all information
var SubTab_1 = SessTab.ExtractColumns("Processors","SlvIter_excl","SlvInit_excl","PrecSolve","LinearSolver.SolverCode","LinearSolver.NoOfMultigridLevels","NonLinearSolver.SolverCode","DGdegree:Velocity*","RegularTerminated");
**************
==============
SubTab_1.Print();
**************
   Processors SlvIter_excl SlvInit_excl PrecSolve LinearSolver.SolverCode LinearSolver.NoOfMultigridLevels NonLinearSolver.SolverCode DGdegree:Velocity* RegularTerminated 
0: 1          177.8883927  3.9085843    NULL      2                       3                                1                          1                  True              
1: 1          176.3072547  3.8829058    NULL      2                       3                                1                          1                  True              
2: 1          17.2110452   22.7733776   NULL      12                      3                                1                          2                  True              
3: 1          NULL         NULL         NULL      12                      3                                1                          2                  False             
4: 1          NULL         NULL         NULL      10                      3                                1                          2                  False             
5: 1          NULL         NULL         NULL      12                      3                                1                          2                  False             
6: 1          NULL         NULL         NULL      10                      3                                1                          2                  False             
7: 1          NULL         NULL         NULL      10                      3                                1                          2                  False             
==============
using System.IO;
**************
==============
// Filename
var now           = DateTime.Now;
SessTab.TableName = "SolverRuns--" + now.Year + "-" + now.Month + "-" + now.Day;
string docpath    = Path.Combine(CurrentDocDir, SessTab.TableName + ".json");
**************
==============
// save session table as file: this can be stored in our git 
// repository
SessTab.SaveToFile(docpath);
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
