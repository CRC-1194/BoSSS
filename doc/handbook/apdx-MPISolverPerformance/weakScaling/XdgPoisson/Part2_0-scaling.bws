restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
using System.IO;
**************
==============
string path = String.Concat(CurrentDocDir,@"\Xdg_weakscaling_s_2020-9-9.json");
var SubTab = TableExtensions.LoadFromFile(path);
**************
==============
SubTab.GetColumnNames().OrderBy(s=>s);
//SubTab.GetColumnNames().Where(s=>s.Contains("Core"));
**************
List of 105 instances of String {
  0: AdaptiveMeshRefinement
  1: AgglomerationThreshold
  2: Aggregation_basis_init_time
  3: AlternateDbPaths[0].Item1
  4: AlternateDbPaths[0].Item2
  5: AlternateDbPaths[1].Item1
  6: AlternateDbPaths[1].Item2
  7: AMR_startUpSweeps
  8: BurstSave
  9: ContinueOnIoError
  10: ControlFileText_Index
  11: Conv
  12: CutCellQuadratureType
  13: DGdegree:Phi
  14: DGdegree:u
  15: DOFs
  16: dtFixed
  17: dtMax
  18: dtMin
  19: DynamicLoadBalancing_ImbalanceThreshold
  20: DynamicLoadBalancing_On
  21: DynamicLoadBalancing_Period
  22: DynamicLoadBalancing_RedistributeAtStartup
  23: Endtime
  24: ExcactSolSupported
  25: GeneratedFromCode
  26: GlobalSblocks at Lvl0
  27: GlobalSblocks at Lvl1
  28: GlobalSblocks at Lvl2
  29: GlobalSblocks at Lvl3
  30: GlobalSblocks at Lvl4
  31: Grid:hMax
  32: Grid:hMin
  33: Grid:NoOfCells
  34: Grid:SpatialDimension
  35: GridPartOptions
  36: GridPartType
  37: ImmediatePlotPeriod
  38: InitialValues_EvaluatorsVec[0].Key
  39: InitialValues_EvaluatorsVec[1].Key
  40: InitialValues_EvaluatorsVec[2].Key
  41: InitialValues_EvaluatorsVec[3].Key
  42: InitialValues_EvaluatorsVec[4].Key
  43: LinearSolver.ConvergenceCriterion
  44: LinearSolver.exp_localPrec_Min_dt
  45: LinearSolver.exp_localPrec_muA
  46: LinearSolver.MaxKrylovDim
  47: LinearSolver.MaxSolverIterations
  48: LinearSolver.MinSolverIterations
  49: LinearSolver.NoOfMultigridLevels
  50: LinearSolver.SchwarzBlockSizeFactor
  51: LinearSolver.SolverCode
  52: LinearSolver.TargetBlockSize
  53: LinearSolver.verbose
  54: logFileDirectory
  55: maxBlkSize
  56: maxMultigridlvl
  57: maxSolRunT
  58: minBlkSize
  59: minSolRunT
  60: MU_A
  61: MU_B
  62: MultiStepInit
  63: NoIter
  64: NonLinearSolver.constantNewtonIterations
  65: NonLinearSolver.ConvergenceCriterion
  66: NonLinearSolver.MaxSolverIterations
  67: NonLinearSolver.MinSolverIterations
  68: NonLinearSolver.printLambda
  69: NonLinearSolver.SolverCode
  70: NonLinearSolver.UnderRelax
  71: NonLinearSolver.UsePresRefPoint
  72: NonLinearSolver.verbose
  73: NoOfCores
  74: NoOfCutCellBlocks
  75: NoOfMultigridLevels
  76: NoOfTimesteps
  77: NumberOfMatrixBlox
  78: Paramstudy_ContinueOnError
  79: penalty_multiplyer
  80: pOff
  81: PrePreCond
  82: ProjectName
  83: RegularTerminated
  84: rollingSaves
  85: saveperiod
  86: savetodb
  87: SblockSize at Lvl0
  88: SblockSize at Lvl1
  89: SblockSize at Lvl2
  90: SblockSize at Lvl3
  91: SblockSize at Lvl4
  92: SessionName
  93: SetDefaultDiriBndCnd
  94: Solver_Init_time
  95: Solver_Run_time
  96: staticTimestep
  97: SuperSampling
  98: SuppressExceptionPrompt
  99: TimesteppingMode
  100: TimeSteppingScheme
  101: TracingNamespaces
  102: UsedMGDepth
  103: ViscosityMode
  104: XdgMatrixAssembly
}
==============
SubTab.Rows.Count
**************
13
==============
var tab                        = SubTab.ExtractColumns("LinearSolver.SolverCode", "DOFs","DGdegree:u","maxSolRunT","ProjectName","SessionName","NoIter");
System.Data.DataView dv        = tab.DefaultView;
dv.Sort                        = "LinearSolver.SolverCode,DOFs";
System.Data.DataTable sortedDT = dv.ToTable();
sortedDT.Print();
**************
    LinearSolver.SolverCode DOFs    DGdegree:u maxSolRunT   ProjectName           SessionName                          NoIter 
0:  2                       43840   2          40.9736952   Xdg_weakscaling       J4096_k2_classic_pardiso             1      
1:  2                       84320   2          65.7982942   Xdg_weakscaling       J8000_k2_classic_pardiso             1      
2:  2                       183200  2          170.0086046  Xdg_weakscaling       J17576_k2_classic_pardiso            1      
3:  2                       339040  2          527.6745041  Xdg_weakscaling       J32768_k2_classic_pardiso            1      
4:  2                       660160  2          2208.329985  Xdg_weakscaling       J64000_k2_classic_pardiso            1      
5:  41                      43840   2          183.4011587  Xdg_weakscaling       J4096_k2_exp_Kcycle_schwarz          14     
6:  41                      84320   2          515.5230201  Xdg_weakscaling       J8000_k2_exp_Kcycle_schwarz          16     
7:  41                      183200  2          588.4274219  Xdg_weakscaling       J17576_k2_exp_Kcycle_schwarz         15     
8:  41                      339040  2          504.3891961  Xdg_weakscaling       J32768_k2_exp_Kcycle_schwarz         15     
9:  41                      660160  2          854.8888375  Xdg_weakscaling       J64000_k2_exp_Kcycle_schwarz         19     
10: 41                      1359210 2          640.2913618  Xdg_weakscaling_Debug J132651_k2_exp_Kcycle_schwarz_predef 21     
11: 41                      2671600 2          1158.9981832 Xdg_weakscaling       J262144_k2_exp_Kcycle_schwarz        27     
12: 41                      5199920 2          1245.4266283 Xdg_weakscaling       J512000_k2_exp_Kcycle_schwarz        27     
==============
public static class DoWhatUWant{

public static PlotRowSelector Solver_DG_Proj(int Degree){
       return delegate (int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt){

           Nmn = "";
           Fmt = new PlotFormat();
                     
           
          
           int SolverCode = Convert.ToInt32(Row["LinearSolver.SolverCode"]);
           int DGdegree   = Convert.ToInt32(Row["DGdegree:u"]);
           string PrjName = Convert.ToString(Row["ProjectName"]);

           switch(SolverCode){
               case 41:
                   Nmn+="kcycle";
                   Fmt.LineColor = LineColors.Blue;
                   break;
               case 47:
                   Nmn+="gmres";
                   Fmt.LineColor = LineColors.Yellow;
                   break;
               case 2:
                   Nmn+="pardiso";
                   Fmt.LineColor = LineColors.Red;
                   break;
               default:
                   Nmn = null;
                   Fmt = null;
                return;
           }
            
           
           if(DGdegree!=Degree){
                Nmn = null;
                Fmt = null;
                return;
           }
           switch(DGdegree){
               case 2:
                 Nmn+=" DG2";
                 Fmt.PointType = PointTypes.OpenDiamond;
                 break;
               case 3:
                 Nmn+=" DG3";
                 Fmt.PointType = PointTypes.OpenDiamond;
                 break;
               case 5:
                 Nmn+=" DG5";
                 Fmt.PointType = PointTypes.OpenDiamond;
                 break;

               default:
                 Nmn = null;
                 Fmt = null;
                 return;
           }
//           switch(PrjName){
//               case "SIP_weakscale":
//                Nmn +=" openmp";
//                Fmt.LineColor = LineColors.Blue;
//                break;
//               case "SIP_weakscale_SEQ":
//                Nmn += " seq";
//                Fmt.LineColor = LineColors.Yellow;
//                break;
//               default:
//                Nmn = null;
//                Fmt = null;
//                return;
//           }
             
           Fmt.PointSize = 0.5;
           Fmt.LineWidth = 3;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.DashType  = DashTypes.Solid;
       };
    
}

public static PlotRowSelectorEx Solver_DG_Proj(int DG, int Solver){
           return delegate (int iSweep, int iTabRow, 
                 IDictionary<string, object> Row, 
                 out string Nmn, 
                 out PlotFormat Fmt,
                 out double xValue, out double yValue) { 
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           // PlotRowSelector:
           // selects, which table row goes to which graph,
           // and the respective color  
           // - - - - - - - - - - - - - - - - - - - - - - - - 
           int k           = Convert.ToInt32(Row["DGdegree:u"]);
           int solver_name = Convert.ToInt32(Row["LinearSolver.SolverCode"]);
          
           if(k != DG || solver_name != Solver) {
                // degree does not match -> not in this plot
                Nmn    = null;
                Fmt    = null;
                xValue = 0;
                yValue = 0;
                return;
           }
           
           double mtxAssi  = Convert.ToDouble(Row["XdgMatrixAssembly"]);
           double aggBinit = Convert.ToDouble(Row["Aggregation_basis_init_time"]);
           double slvInit  = Convert.ToDouble(Row["Solver_Init_time"]);
           double slvRun   = Convert.ToDouble(Row["Solver_Run_time"]);
           double cores    = Convert.ToDouble(Row["NoOfCores"]);
           
           if(aggBinit > 700)
           Console.Write("aggBinit/slvRun = " + aggBinit + "/" + slvRun);
           
           Fmt           = new PlotFormat();
           Fmt.PointSize = 0.5;
           Fmt.Style     = Styles.LinesPoints;
           Fmt.LineColor = LineColors.Black;
           Fmt.LineWidth = 3;
           
           xValue = cores;
           
           switch(iSweep) {
               case 0:
               yValue       = slvRun;
               Nmn          = "Slv Iter";
               Fmt.DashType = DashTypes.Dotted;
               Fmt.PointType = PointTypes.OpenCircle;
               break;
               
               case 1:
               yValue        = slvInit;
               Nmn           = "Slv Init";
               Fmt.DashType  = DashTypes.Dashed;
               Fmt.PointType = PointTypes.OpenBox;
               break;
               
               case 2:
               yValue        = aggBinit;
               Nmn           = "Agg Init";
               Fmt.DashType  = DashTypes.DotDashed;
               Fmt.PointType = PointTypes.OpenDiamond;
               break;
               
               case 3:
               yValue        = mtxAssi;
               Nmn           = "Mtx ass";
               Fmt.DashType  = DashTypes.DotDotDashed;
               Fmt.PointType = PointTypes.OpenUpperTriangle;
               break;
               
               default:
               throw new NotImplementedException();
           }
           
           if(aggBinit > 700)
           Console.WriteLine("\t + case: {0} + yValue = {1}", iSweep, yValue);
       };
}

  
   
}
**************
(16,19): warning CS0219: The variable `PrjName' is assigned but its value is never used
No. of errors|warnings: 0|1.

==============
// ==========
// parameterz
// ==========
int DG   = 2;
int xMin = 4;
int xMax = 512;
// ======================
// print runtime vs cores
// ======================
Plot2Ddata[,] multiplots = new Plot2Ddata[2,1];
multiplots[0,0] = SubTab.ToPlot("NoOfCores","maxSolRunT",DoWhatUWant.Solver_DG_Proj(DG));
multiplots[0,0].LogX = true;
multiplots[0,0].LogY = true;
multiplots[0,0].tmargin = 0;
multiplots[0,0].bmargin = 2;
multiplots[0,0].XrangeMin=xMin;
multiplots[0,0].XrangeMax=xMax;
multiplots[0,0].Ylabel = "~wallclock time";
// ==============
// print 2h limit
// ==============
double[] xaxis = new[]{(double)xMin,(double)xMax};
double[] T = xaxis.Select(x => 7200.0).ToArray();
var linT              = new Plot2Ddata.XYvalues("2h limit", xaxis, T);
linT.Format.FromString("- black");
linT.Format.LineWidth = 2;
ArrayTools.AddToArray(linT, ref multiplots[0,0].dataGroups);
// =====================
// print noiter vs cores
// =====================
multiplots[1,0] = SubTab.ToPlot("NoOfCores","NoIter",DoWhatUWant.Solver_DG_Proj(DG));
multiplots[1,0].LogX = true;
multiplots[1,0].LogY = true;
multiplots[1,0].tmargin = 0;
multiplots[1,0].bmargin = 3;
multiplots[1,0].XrangeMin=xMin;
multiplots[1,0].XrangeMax=xMax;
multiplots[1,0].Xlabel = "no of cores";
multiplots[1,0].Ylabel = "iterations";
multiplots.PlotNow();
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"Left reverse 
set key font ",16"Left reverse 
System.Drawing.Bitmap
==============
// ==============
// plot out stuff
// ==============
string plotsdirpath = CurrentDocDir+@"\"+"plots";
DirectoryInfo dir   = Directory.CreateDirectory(plotsdirpath);
var plot2print      = multiplots;
var CL              = plot2print.ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
CL.WriteMinimalCompileableExample(
   Path.Combine(plotsdirpath, "Scaling_"+DG+"_"+".tex"),
   "Scaling_"+DG+".tex");
**************
Using gnuplot: B:\BoSSS-BIN\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"Left reverse 
set key font ",16"Left reverse 

==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
