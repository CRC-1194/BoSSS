restart
**************
  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 12; Grid Count = 31; Path = P:\testDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XdgPoisson3;
**************
==============
// ==================================
// setup Client & Workflow & Database
// ==================================
var myBatch = (SlurmClient)ExecutionQueues[3];
ExecutionQueues[3].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
//myBatch.MonoDebug = true;
**************
==============
string WFlowName = "Xdg_weakscaling_memory";
WorkflowMgm.Init(WFlowName);
WorkflowMgm.SetNameBasedSessionJobControlCorrelation();
WorkflowMgm.AllJobs;
**************
Project name is set to 'Xdg_weakscaling_memory'.
List of 0 instances of KeyValuePair{String,Job} {
}
==============
// providing corresponding paths on both platforms:
string dirname = "DB_XDGPoisson_MPI";
string linpath = @"/work/scratch/jw52xeqa/"+dirname;
string winpath = @"W:\work\scratch\jw52xeqa\"+dirname;
**************
==============
var tempDB = OpenOrCreateDatabase(winpath);
**************
Opening existing database 'W:\work\scratch\jw52xeqa\DB_XDGPoisson_MPI'.

==============
tempDB.Sessions
**************
List of 62 instances of ISessionInfo {
  0: Xdg_weakscaling_memory	J778688_k2_exp_Kcycle_schwarz*	02/02/2021 18:06:52	0c6c0f87...
  1: Xdg_weakscaling_memory	J778688_k2_exp_Kcycle_schwarz*	02/02/2021 18:05:53	fe07357d...
  2: Xdg_weakscaling_memory	J778688_k2_exp_Kcycle_schwarz*	02/02/2021 17:54:49	9d9d9173...
  3: Xdg_weakscaling_memory	J389017_k2_exp_Kcycle_schwarz	02/02/2021 17:49:52	403cfb22...
  4: Xdg_weakscaling_memory	J389017_k2_exp_Kcycle_schwarz	02/02/2021 17:41:57	03a7ab3f...
  5: Xdg_weakscaling_memory	J389017_k2_exp_Kcycle_schwarz*	02/02/2021 17:22:01	b3734aa5...
  6: Xdg_weakscaling_memory	J195112_k2_exp_Kcycle_schwarz	02/02/2021 14:19:28	85eb6023...
  7: Xdg_weakscaling_memory	J97336_k2_exp_Kcycle_schwarz	02/02/2021 14:19:36	1dc4bc4b...
  8: Xdg_weakscaling_memory	J50653_k2_exp_Kcycle_schwarz	02/02/2021 14:19:41	5e000a33...
  9: Xdg_weakscaling_memory	J24389_k2_exp_Kcycle_schwarz	02/02/2021 14:19:47	56e7c59b...
  10: Xdg_weakscaling_memory	J389017_k2_exp_Kcycle_schwarz*	02/02/2021 14:19:21	7b38a395...
  11: Xdg_weakscaling_memory	J778688_k2_exp_Kcycle_schwarz*	02/02/2021 14:19:15	a2d48057...
  12: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c32	02/02/2021 13:23:43	ec19916e...
  13: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c64	02/02/2021 13:23:55	a43ae5b9...
  14: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c128	02/02/2021 13:24:02	ddcb1b8f...
  15: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c4	02/02/2021 11:35:27	04ed0208...
  16: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c8	02/02/2021 11:35:28	d117b1ea...
  17: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c16	02/02/2021 11:35:37	f2a88fce...
  18: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c20*	02/02/2021 11:35:49	cd7aef13...
  19: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c24*	02/02/2021 11:35:48	981da200...
  20: Xdg_1Node_Memory	J103823_k2_exp_Kcycle_schwarz_c12*	02/02/2021 11:35:31	e86cd2eb...
  21: Xdg_strong_scaleing_test	J205379_k2_exp_Kcycle_schwarz_c4	02/01/2021 22:25:32	ca676d19...
  22: Xdg_strong_scaleing_test	J205379_k2_exp_Kcycle_schwarz_c128	02/01/2021 13:21:44	1711fcfa...
  23: Xdg_strong_scaleing_test	J205379_k2_exp_Kcycle_schwarz_c4*	02/01/2021 13:20:13	abd26057...
  24: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c4	02/01/2021 12:24:12	73472711...
  25: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c4	02/01/2021 12:21:06	f6050eb5...
  26: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c16_rnd1680887564	02/01/2021 11:49:20	04d27a9f...
  27: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c128_rnd1465588304	01/31/2021 22:06:24	6c3d33eb...
  28: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c64_rnd978480008	01/31/2021 17:55:24	339d4c51...
  29: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c32_rnd1097799503	01/29/2021 19:55:31	926fa3b6...
  30: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c4_rnd168027327	01/29/2021 19:46:38	22c3a03a...
  31: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c8_rnd774623231	01/29/2021 19:47:34	c1cb50e1...
  32: Xdg_strong_scaleing	J103823_k2_exp_Kcycle_schwarz_c16_rnd1680887564	01/29/2021 19:48:33	852e2db9...
  33: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/29/2021 12:56:33	4f4edf30...
  34: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 10:10:34	de178d4f...
  35: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 10:10:33	f94b4207...
  36: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/27/2021 01:55:12	7954e722...
  37: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4_rnd1383390739	01/25/2021 14:37:18	0140f620...
  38: Xdg_strong_scaleing_test	J103823_k2_exp_gmres_levelpmg_c64	01/23/2021 10:35:27	2be820b4...
  39: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c64	01/23/2021 10:32:20	95a852bb...
  40: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c64*	01/23/2021 09:36:27	49d6c02c...
  41: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/23/2021 01:03:57	ac287e9c...
  42: Xdg_strong_scaleing_test	J103823_k2_exp_gmres_levelpmg_c4	01/20/2021 22:05:14	025557dd...
  43: Xdg_strong_scaleing_test	J103823_k2_exp_Kcycle_schwarz_c4	01/20/2021 22:05:06	47051770...
  44: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c4*	01/20/2021 22:04:27	d9330ec1...
  45: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_c64*	01/20/2021 22:05:06	9f779f69...
  46: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_4*	01/20/2021 21:41:22	ef6d6c49...
  47: Xdg_strong_scaleing_test	J103823_k2_classic_pardiso_4*	01/20/2021 21:39:32	5530725d...
  48: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 21:32:06	29c413d2...
  49: Xdg_strong_scaleing_test	J512000_k2_exp_gmres_levelpmg_16*	01/20/2021 20:31:59	bf366e56...
  50: Xdg_strong_scaleing_test	J512000_k2_exp_Kcycle_schwarz_16*	01/20/2021 20:31:57	a5cde16b...
  51: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 20:31:50	6ed3d38b...
  52: Xdg_strong_scaleing_test	J512000_k2_exp_gmres_levelpmg_16*	01/20/2021 18:14:57	74fbe633...
  53: Xdg_strong_scaleing_test	J512000_k2_classic_pardiso_16*	01/20/2021 18:05:40	85fe36c2...
  54: Xdg_strong_scaleing_test	J512000_k2_exp_Kcycle_schwarz_16*	01/20/2021 18:05:41	d9ae2b7f...
  55: Xdg_Poison_strong_scale_test	J103823_k2_exp_gmres_levelpmg_16	01/20/2021 17:49:39	aceca4ec...
  56: Xdg_Poison_strong_scale_test	J103823_k2_exp_Kcycle_schwarz_16	01/20/2021 17:49:29	450ccda7...
  57: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_16*	01/20/2021 17:49:26	be9aa012...
  58: Xdg_Poison_strong_scale_test	J103823_k2_exp_gmres_levelpmg_22*	01/20/2021 17:43:01	d5c8f7cd...
  59: Xdg_Poison_strong_scale_test	J103823_k2_exp_Kcycle_schwarz_22*	01/20/2021 17:41:16	668a9734...
  60: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_22*	01/20/2021 17:37:23	fb11b448...
  61: Xdg_Poison_strong_scale_test	J103823_k2_classic_pardiso_22_22*	01/20/2021 15:15:05	2506b2dd...
}
==============
// ===================
// Utility definitions
// ===================
**************
==============
static class Utils {
    // DOF per cell in 3D
    public static int Np(int p) {
        return (p*p*p + 6*p*p + 11*p + 6)/6;
    }    
    
    //Non-equidistant nodes
    public static double[] SinLinSpacing(double l, double r, double a, int n) {
        double[] linnodes = GenericBlas.Linspace(-Math.PI * 0.5, Math.PI * 0.5, n);
        double[] linnodes2 = GenericBlas.Linspace(-1, 1, n);
        double[] nodes = new double[n];

        for (int i = 0; i < n; i++)
            //nodes[i] = linnodes2[i] * (1 - a) + (1.0 - Math.Sin(linnodes[i])) * a;
            nodes[i] = linnodes2[i] * (1 - a) + Math.Sin(linnodes[i])*a;

        for (int i = 0; i < n; i++)
            nodes[i] = nodes[i] * (r - l)*0.5 + l;
        return nodes;
    }
}
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
// set parameterz
int[] core_sweep = {128};
//int[] core_sweep = {16};
int p          = 2;
int DOFperCore = 60000;
**************
==============
// calculate totalgrid size corresponding to DOFperCore
int[] res=new int[core_sweep.Length];
int[] test=new int[core_sweep.Length];
var cells2cores = new Dictionary<int, int>();
for(int i=0;i<core_sweep.Length;i++){
double Res   = Math.Pow(DOFperCore/Utils.Np(p)*core_sweep[i],0.333333333);
int ResRndup = (int)Math.Ceiling(Res);
res[i]=ResRndup;
test[i]=ResRndup*ResRndup*ResRndup;
cells2cores.Add(test[i],core_sweep[i]);
}
cells2cores;
**************
List of 1 instances of KeyValuePair{Int32,Int32} {
  0: [778688, 128]
}
==============
tempDB.Grids;
**************
List of 18 instances of IGridInfo {
  0: { Guid = 43c4a2a0-4003-4ea8-96a2-b40131080dc1; Name = Xdg_weakscaling_memory_J778688; Cell Count = 778688; Dim = 3 }
  1: { Guid = f2b2db11-d298-4378-a06d-60166e772eba; Name = Xdg_weakscaling_memory_J389017; Cell Count = 389017; Dim = 3 }
  2: { Guid = ebfcbd62-c4a1-4486-85cb-eaf931cad344; Name = Xdg_weakscaling_memory_J195112; Cell Count = 195112; Dim = 3 }
  3: { Guid = 766e2291-038e-4e6a-9cd7-bd6648a32335; Name = Xdg_weakscaling_memory_J97336; Cell Count = 97336; Dim = 3 }
  4: { Guid = a51afaf8-bdb8-46fd-8228-e08aa8bc9bdc; Name = Xdg_weakscaling_memory_J50653; Cell Count = 50653; Dim = 3 }
  5: { Guid = 04a8a08e-7757-4227-a2b1-aef2ba396c9c; Name = Xdg_weakscaling_memory_J24389; Cell Count = 24389; Dim = 3 }
  6: { Guid = e897f4b2-63bf-4e27-a969-d54180bb331f; Name = Xdg_1Node_Memory_J103823; Cell Count = 103823; Dim = 3 }
  7: { Guid = 4d3417af-1d2b-4c31-b88e-79440389d6c9; Name = Xdg_strong_scaleing_test_J205379; Cell Count = 205379; Dim = 3 }
  8: { Guid = 6b7afe3a-0ca2-4b68-bcdb-daf8b6a51dfe; Name = Xdg_strong_scaleing_test_J205379; Cell Count = 205379; Dim = 3 }
  9: { Guid = 7b5a3056-295d-4f9a-8914-992eedb26825; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  10: { Guid = 7040ba39-1dce-43ee-94ca-62b72dae7b5b; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  11: { Guid = b7d15705-7e37-455c-8cbd-43fb29c21738; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  12: { Guid = c3bb9932-d437-4c2a-aef3-0745604a07ff; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  13: { Guid = 0c742c5d-98a5-4420-9b11-c6d54788500d; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  14: { Guid = a596e0db-18ca-4853-b344-b31a2f622600; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  15: { Guid = b59e2806-816c-4596-89c3-fb832f0d1adf; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  16: { Guid = 1c8b0cde-9adf-4505-9295-705753445103; Name = Xdg_strong_scaleing_J512000; Cell Count = 512000; Dim = 3 }
  17: { Guid = d477c7b3-e74e-4fa5-9e3d-ab1211be09f1; Name = Xdg_Poison_strong_scale_test_J103823; Cell Count = 103823; Dim = 3 }
}
==============
double xMax = 1.0, yMax = 1.0, zMax=1.0;
double xMin = -1.0, yMin = -1.0,zMin = -1.0;
**************
==============
// defining Predefined Partitioning
static class AuxPart{
    public static Func<double[], int> GenFunc(int cores){
        Func<double[], int> MakeMyPartioning = delegate (double[] X) {
            double x = X[0];
            double y = X[1];
            double z = X[2];
            
            int sx = 1;
            int sy = 1;
            int sz = 1;
            for (int i = 0; i < Math.Log(cores, 2); i++) {
                if (i % 3 == 0)
                    sx*= 2;
                else if(i % 3 == 1)
                    sy*=2;
                else
                    sz*=2;
            }
            
            
            double xspan = (xMax - xMin) / sx;
            double yspan = (yMax - yMin) / sy;
            double zspan = (zMax - zMin) / sz;
            int rank     = int.MaxValue;
            int icore    = 0;
            for (int i = 0; i < sx; i++) {
                for (int j = 0; j < sy; j++) {
                    for(int k=0;k<sz;k++){
                        bool xtrue = x <= xspan * (i + 1) + xMin;
                        bool ytrue = y <= yspan * (j + 1) + yMin;
                        bool ztrue = z <= zspan * (k + 1) + zMin;
                        if (xtrue && ytrue && ztrue) {
                            rank = icore;
                            return rank;
                        }
                        icore++;
                    }
                }
            }

            return rank;
        };
        return MakeMyPartioning;
   }
}
**************
==============
// resolution per dimension of space
// corresponds to the predef partioning
int sx = 1;
int sy = 1;
int sz = 1;
for (int i = 0; i < Math.Log(64, 2); i++) {
    if (i % 3 == 0)
        sx*= 2;
    else if(i % 3 == 1)
        sy*=2;
    else
        sz*=2;
}
Console.WriteLine("sx:{0},sy:{1},sz:{2}",sx,sy,sz);
**************
sx:4,sy:4,sz:4

==============
int[] Resolutions_3D = res;
//int[] Resolutions_3D = new int[] { 2 };
IGridInfo[] grids = new IGridInfo[Resolutions_3D.Length];
for(int cnt = 0; cnt < Resolutions_3D.Length; cnt++) {
    int Res = Resolutions_3D[cnt];    
    
    //double[] xNodes = GenericBlas.Linspace(0, 10, Res*5 + 1);
    //double[] yNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    //double[] zNodes = Utils.SinLinSpacing(-1, +1, 0.6, Res + 1);
    double[] xNodes = GenericBlas.Linspace(xMin, xMax, Res + 1);
    double[] yNodes = GenericBlas.Linspace(yMin, yMax, Res + 1);
    double[] zNodes = GenericBlas.Linspace(zMin, zMax, Res + 1);
    int J = (xNodes.Length - 1)*(yNodes.Length - 1)*(zNodes.Length - 1);
    
    string GridName = string.Format(WorkflowMgm.CurrentProject + "_J" + J);
    
    grids[cnt]=null;
    foreach(IGridInfo grd in tempDB.Grids){
        bool check = grd.Name.Contains(string.Format("_J"+ J));
        if(check){
          //grids[cnt]=grd;
        }
    }
    
    //grids[cnt] = tempDB.Grids.SingleOrDefault(grd => grd.Name == GridName);
    
    if(grids[cnt] == null){
        Console.WriteLine("Creating grid with " + J + " cells.");
        
        GridCommons g;
        g      = Grid3D.Cartesian3DGrid(xNodes, yNodes, zNodes);
        g.AddPredefinedPartitioning("hallo", AuxPart.GenFunc(core_sweep[cnt]));
        g.Name = GridName;
        g.EdgeTagNames.Add(1, "Dirichlet");   
        g.DefineEdgeTags(delegate (double[] X) {
            byte ret;
            ret = 1;
            return ret;
        });
      
        tempDB.SaveGrid(ref g, true);  
        grids[cnt] = g;
    } else {
        Console.WriteLine("Found Grid: " + grids[cnt]);
        if(grids[cnt].NumberOfCells != J)
            throw new Exception("J mismatch");
        
        if(grids[cnt].SpatialDimension != 3)
            throw new Exception("D mismatch");
    }
}
**************
Creating grid with 24389 cells.
Grid Edge Tags changed.
Creating grid with 50653 cells.
Grid Edge Tags changed.
Creating grid with 97336 cells.
Grid Edge Tags changed.
Creating grid with 195112 cells.
Grid Edge Tags changed.
Creating grid with 389017 cells.
Grid Edge Tags changed.
Creating grid with 778688 cells.
Grid Edge Tags changed.

==============
tempDB.Grids;
**************
List of 18 instances of IGridInfo {
  0: { Guid = 43c4a2a0-4003-4ea8-96a2-b40131080dc1; Name = Xdg_weakscaling_memory_J778688; Cell Count = 778688; Dim = 3 }
  1: { Guid = f2b2db11-d298-4378-a06d-60166e772eba; Name = Xdg_weakscaling_memory_J389017; Cell Count = 389017; Dim = 3 }
  2: { Guid = ebfcbd62-c4a1-4486-85cb-eaf931cad344; Name = Xdg_weakscaling_memory_J195112; Cell Count = 195112; Dim = 3 }
  3: { Guid = 766e2291-038e-4e6a-9cd7-bd6648a32335; Name = Xdg_weakscaling_memory_J97336; Cell Count = 97336; Dim = 3 }
  4: { Guid = a51afaf8-bdb8-46fd-8228-e08aa8bc9bdc; Name = Xdg_weakscaling_memory_J50653; Cell Count = 50653; Dim = 3 }
  5: { Guid = 04a8a08e-7757-4227-a2b1-aef2ba396c9c; Name = Xdg_weakscaling_memory_J24389; Cell Count = 24389; Dim = 3 }
  6: { Guid = e897f4b2-63bf-4e27-a969-d54180bb331f; Name = Xdg_1Node_Memory_J103823; Cell Count = 103823; Dim = 3 }
  7: { Guid = 4d3417af-1d2b-4c31-b88e-79440389d6c9; Name = Xdg_strong_scaleing_test_J205379; Cell Count = 205379; Dim = 3 }
  8: { Guid = 6b7afe3a-0ca2-4b68-bcdb-daf8b6a51dfe; Name = Xdg_strong_scaleing_test_J205379; Cell Count = 205379; Dim = 3 }
  9: { Guid = 7b5a3056-295d-4f9a-8914-992eedb26825; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  10: { Guid = 7040ba39-1dce-43ee-94ca-62b72dae7b5b; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  11: { Guid = b7d15705-7e37-455c-8cbd-43fb29c21738; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  12: { Guid = c3bb9932-d437-4c2a-aef3-0745604a07ff; Name = Xdg_strong_scaleing_J103823; Cell Count = 103823; Dim = 3 }
  13: { Guid = 0c742c5d-98a5-4420-9b11-c6d54788500d; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  14: { Guid = a596e0db-18ca-4853-b344-b31a2f622600; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  15: { Guid = b59e2806-816c-4596-89c3-fb832f0d1adf; Name = Xdg_strong_scaleing_test_J103823; Cell Count = 103823; Dim = 3 }
  16: { Guid = 1c8b0cde-9adf-4505-9295-705753445103; Name = Xdg_strong_scaleing_J512000; Cell Count = 512000; Dim = 3 }
  17: { Guid = d477c7b3-e74e-4fa5-9e3d-ab1211be09f1; Name = Xdg_Poison_strong_scale_test_J103823; Cell Count = 103823; Dim = 3 }
}
==============
// Overwrite Selection
//var ListOfgrids = new List<IGridInfo>();
//ListOfgrids.AddRange(tempDB.Grids.Pick(0));
//IGridInfo[] grids = tempDB.Grids.Pick(0,1,2,3,4,5).ToArray();
**************
==============
grids;
**************
List of 6 instances of IGridInfo {
  0: { Guid = 43c4a2a0-4003-4ea8-96a2-b40131080dc1; Name = Xdg_weakscaling_memory_J778688; Cell Count = 778688; Dim = 3 }
  1: { Guid = f2b2db11-d298-4378-a06d-60166e772eba; Name = Xdg_weakscaling_memory_J389017; Cell Count = 389017; Dim = 3 }
  2: { Guid = ebfcbd62-c4a1-4486-85cb-eaf931cad344; Name = Xdg_weakscaling_memory_J195112; Cell Count = 195112; Dim = 3 }
  3: { Guid = 766e2291-038e-4e6a-9cd7-bd6648a32335; Name = Xdg_weakscaling_memory_J97336; Cell Count = 97336; Dim = 3 }
  4: { Guid = a51afaf8-bdb8-46fd-8228-e08aa8bc9bdc; Name = Xdg_weakscaling_memory_J50653; Cell Count = 50653; Dim = 3 }
  5: { Guid = 04a8a08e-7757-4227-a2b1-aef2ba396c9c; Name = Xdg_weakscaling_memory_J24389; Cell Count = 24389; Dim = 3 }
}
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
// - - - - - - - - - - - - - - - - - - -
// Initial Values & Boundary conditions
// - - - - - - - - - - - - - - - - - - -
**************
==============
static class InitialValues {
    public static double RHS(double[] X) {
        return -Math.Sin(X[0]);
    }
    
    public static double DirichletBC(double[] X) {
        return 0.0;
    }
    
    public static double NeumannBC(double[] X) {
       if(Math.Abs(X[1] - 1.0) < 1.0e-8 || Math.Abs(X[1] + 1.0) < 1.0e-8)
           return 0;
       if(X.Length > 2 && (Math.Abs(X[2] - 1.0) < 1.0e-8 || Math.Abs(X[2] + 1.0) < 1.0e-8))
           return 0;

       return Math.Cos(10.0);
   }
}
**************
==============
InitialValues.RHS(new double[]{ 0,0});
**************
0
==============
// - - - - - - - - - - - - -
// setup of parameter study
// - - - - - - - - - - - - -
**************
==============
List<XdgPoisson3Control> controls = new List<XdgPoisson3Control>();
**************
==============
// polynomial degrees to test
//int[] PolyDegS = new int[] {2, 3, 4, 5, 6};
//int[] PolyDegS = new int[] {2, 3 ,5};
int[] PolyDegS = new int[] {p};
**************
==============
// Solvers which we want to instrument:
LinearSolverCode[] solver_nameS = new LinearSolverCode[] {
    //LinearSolverCode.classic_pardiso, 
    //LinearSolverCode.classic_mumps, 
    LinearSolverCode.exp_Kcycle_schwarz, 
    //LinearSolverCode.exp_gmres_levelpmg, 
}; 
**************
==============
// MaxDof for each calculation, prohibit crashes, due to limited memory capabilities of lin solver
int MaxDof = int.MaxValue;
**************
==============
using BoSSS.Solution.XNSECommon;
using BoSSS.Foundation.XDG;
**************
==============
// --------------------
// setup control object
// --------------------
controls.Clear();
foreach(LinearSolverCode solver_name in solver_nameS) {
foreach(int k in PolyDegS) {    
foreach(IGridInfo grd in grids) {
    
    int Np = Utils.Np(k);
    int J  = grd.NumberOfCells;
    if(J*Np > MaxDof)
        continue;
    
    string caseName = string.Format("J{0}_k{1}_{2}", J, k, solver_name);
    Console.WriteLine("setting up: " + caseName);
    Console.WriteLine("based on grid: "+grd.Name);

    var ctrl = new XdgPoisson3Control();
    
    
    ctrl.AlternateDbPaths = new[]{
        new ValueTuple<string,string>(linpath, ""),
        new ValueTuple<string,string>(winpath, "pcmit32")
    };
    ctrl.savetodb = true;
    ctrl.GridGuid = grd.ID;
    
    ctrl.FieldOptions.Add("Phi", new FieldOpts() {
         Degree = 2,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });
    ctrl.FieldOptions.Add("u", new FieldOpts() {
         Degree = k,
         SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });

    ctrl.LinearSolver.SolverCode           = solver_name;
    ctrl.LinearSolver.NoOfMultigridLevels  = 10;
    ctrl.LinearSolver.TargetBlockSize      = Math.Min(J*Np-1,DOFperCore);
    ctrl.LinearSolver.ConvergenceCriterion = 1e-8;
    
    double radius           = 0.7;
    ctrl.ExcactSolSupported = false;
    ctrl.InitialValues.Add("Phi", new Formula("X => X[0].Pow2()+X[1].Pow2()+X[2].Pow2()-"+radius+".Pow2()"));
    ctrl.MU_A = -1;
    ctrl.MU_B = -1000;
    ctrl.InitialValues.Add("rhs#A", new Formula("X => 1"));
    ctrl.InitialValues.Add("rhs#B", new Formula("X => 1"));
    ctrl.InitialValues.Add("u#A", new Formula ("X => 0"));
    ctrl.InitialValues.Add("u#B", new Formula ("X => 0"));
    ctrl.CutCellQuadratureType = XQuadFactoryHelper.MomentFittingVariants.Saye;
    ctrl.SetDefaultDiriBndCnd  = true;
    //ctrl.TracingNamespaces     = "*";
    
    ctrl.ViscosityMode = XLaplace_Interface.Mode.SIP;
    ctrl.SessionName   = caseName;
    ctrl.ProjectName   = WFlowName;
    ctrl.GridPartType  = BoSSS.Foundation.Grid.GridPartType.METIS;
    
    ctrl.AgglomerationThreshold = 0.1;
    
    controls.Add(ctrl);
}
}
}
**************
setting up: J778688_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J778688
setting up: J389017_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J389017
setting up: J195112_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J195112
setting up: J97336_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J97336
setting up: J50653_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J50653
setting up: J24389_k2_exp_Kcycle_schwarz
based on grid: Xdg_weakscaling_memory_J24389

==============
//var solver = new XdgPoisson3Main();
//solver.Init(controls[0]);
//solver.RunSolverMode();
//solver.Dispose();
**************
==============
// ==========
// Launch Job
// ==========
**************
==============
foreach(var ctrl in controls) {

    int nocores;
    try{
        int nocells = tempDB.Grids.Find(ctrl.GridGuid).NumberOfCells;
        cells2cores.TryGetValue(nocells,out nocores);
        Console.WriteLine("{0}:{1}",nocores, nocells);

        Console.WriteLine(" Submitting: " + ctrl.SessionName); 
        var aJob = new Job(ctrl.SessionName, typeof(XdgPoisson3Main));
        aJob.SetControlObject(ctrl);
        aJob.NumberOfMPIProcs         = nocores;
        aJob.ExecutionTime            = "02:00:00";
        aJob.MemPerCPU                = "2000";
        aJob.UseComputeNodesExclusive = true;
        aJob.Activate(myBatch);
    } catch (Exception e){
        Console.WriteLine(e.Message);
    }
}
**************
128:778688
 Submitting: J778688_k2_exp_Kcycle_schwarz
Deploying job J778688_k2_exp_Kcycle_schwarz ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_weakscaling_memory-XdgPoisson32021Feb02_185447
copied 29 files.
   written file: control.obj
deployment finished.
16976969

0:389017
 Submitting: J389017_k2_exp_Kcycle_schwarz
Note: found 1 successful deployment(s), but job is configured to require a successful result session ('this.SessionReqForSuccess' is true), and none is found. 1 sessions correlated to this job fount in total.
Deploying job J389017_k2_exp_Kcycle_schwarz ... 

Deploying executables and additional files ...
Deployment directory: X:\Deployerie\Xdg_weakscaling_memory-XdgPoisson32021Feb02_185452
copied 29 files.
   written file: control.obj
deployment finished.

missing job id return value from slurm command.
0:195112
 Submitting: J195112_k2_exp_Kcycle_schwarz
Info: Found successful session "Xdg_weakscaling_memory	J195112_k2_exp_Kcycle_schwarz	02/02/2021 14:19:28	85eb6023..." -- job is marked as successful, no further action.
No submission, because job status is: FinishedSuccessful
0:97336
 Submitting: J97336_k2_exp_Kcycle_schwarz
Info: Found successful session "Xdg_weakscaling_memory	J97336_k2_exp_Kcycle_schwarz	02/02/2021 14:19:36	1dc4bc4b..." -- job is marked as successful, no further action.
No submission, because job status is: FinishedSuccessful
0:50653
 Submitting: J50653_k2_exp_Kcycle_schwarz
Info: Found successful session "Xdg_weakscaling_memory	J50653_k2_exp_Kcycle_schwarz	02/02/2021 14:19:41	5e000a33..." -- job is marked as successful, no further action.
No submission, because job status is: FinishedSuccessful
0:24389
 Submitting: J24389_k2_exp_Kcycle_schwarz
Info: Found successful session "Xdg_weakscaling_memory	J24389_k2_exp_Kcycle_schwarz	02/02/2021 14:19:47	56e7c59b..." -- job is marked as successful, no further action.
No submission, because job status is: FinishedSuccessful

==============
// ================
// optional stuff
// ===============
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(s=>Console.WriteLine(s.Value.Name +"Status: "+s.Value.Status));
//somelist.ForEach(s=>Console.WriteLine(s.Value.Name));
**************
C# evaluator not initialized: use 'restart'.

==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed)).Where(s=>s.Value.Name.Contains("Kcycle_schwarz"))
**************
List of 0 instances of KeyValuePair{String,Job} {
}
==============
using System.IO
**************
==============
// write out stdout of all jobs
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
//var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.FinishedSuccess));
var somelist = WorkflowMgm.AllJobs;
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stderr.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stderr_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
writing XdgPoissonVelocity_J8_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J262144_k2_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k3_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J64_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J512_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J4096_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J32768_k5_classic_pardiso ...done.
writing XdgPoissonVelocity_J8_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J262144_k2_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k3_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J64_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J512_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J4096_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J32768_k5_exp_gmres_levelpmg ...done.
writing XdgPoissonVelocity_J8_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J262144_k2_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J8_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k3_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J8_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J64_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J512_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J4096_k5_exp_Kcycle_schwarz ...done.
writing XdgPoissonVelocity_J32768_k5_exp_Kcycle_schwarz ...done.

==============
WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed))
**************
List of 0 instances of KeyValuePair{String,Job} {
}
==============
// write out stdout of Failed Jobs
Dictionary<string, string> Stoutlist = new Dictionary<string, string>();
var somelist = WorkflowMgm.AllJobs.Where(s=>s.Value.Status.Equals(JobStatus.Failed));
somelist.ForEach(j=>Stoutlist.Add(j.Value.Name ,j.Value.Stdout.ToString()));
foreach(KeyValuePair<string,string> stout in Stoutlist){
    using(StreamWriter sw = new StreamWriter("G:\\Stout_"+stout.Key+".txt")){
    Console.Write("writing {0} ...",stout.Key);
    sw.WriteLine(stout.Value);
    Console.WriteLine("done.");
    }
}
**************
Renci.SshNet.Common.SshConnectionException occurred: Client not connected.. Type 'LastError' for details.


==============
**************
==============
**************
==============
