restart
**************
  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 14 instances of IDatabaseInfo {
  0: { Session Count = 0; Grid Count = 0; Path = C:\bosss_db }
  1: { Session Count = 4; Grid Count = 4; Path = D:\bosss_db_paper_revision_svi }
  2: { Session Count = 10; Grid Count = 2; Path = D:\bosss_db_svi_video }
  3: { Session Count = 8; Grid Count = 15; Path = H:\geisenhofer\bosss_db_ibmbowshock }
  4: { Session Count = 61; Grid Count = 94; Path = H:\geisenhofer\bosss_db_bowshock }
  5: { Session Count = 8; Grid Count = 18; Path = D:\bosss_db_XDGBowShock }
  6: { Session Count = 9; Grid Count = 8; Path = D:\bosss_db_exchange }
  7: { Session Count = 4; Grid Count = 6; Path = H:\geisenhofer\bosss_db_XDGBowShock }
  8: { Session Count = 0; Grid Count = 0; Path = \\hpccluster\hpccluster-scratch\geisenhofer\bosss_db_TEST }
  9: { Session Count = 0; Grid Count = 0; Path = H:\geisenhofer\bosss_db_TEST }
  10: { Session Count = 1; Grid Count = 1; Path = D:\bosss_db_shockFinding }
  11: { Session Count = 10; Grid Count = 10; Path = Z:\geisenhofer\bosss_db_xdgbowshock }
  12: { Session Count = 1; Grid Count = 1; Path = H:\geisenhofer\TwoLs\LevelSetReconstruction\bosss_db_levelSetReconstruction }
  13: { Session Count = 8; Grid Count = 8; Path = H:\geisenhofer\bosss_db_xdgbowshock_twols }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Solution.Tecplot;
using ilPSP.Connectors.Matlab;
using static ilPSP.IMatrixExtensions;
using System.IO;
using BoSSS.Foundation.XDG;
using BoSSS.Foundation.Quadrature;
using BoSSS.Solution.CompressibleFlowCommon.ShockFinding;
using static BoSSS.Solution.CompressibleFlowCommon.Variable;
using System.Collections;
//using static BoSSS.Foundation.IO.IDatabaseInfoExtensions;
**************
==============
// Select database
IDatabaseInfo dbi = databases.Pick(12);
dbi.Sessions
**************
List of 1 instances of ISessionInfo {
  0: IBMBowShock_P2_FineGrid	IBMBowShock_p2_xCells80_yCells320_CFLFrac0.1_RK1_s0=1.0E-03_lambdaMax15_RESTART4	05/19/2020 18:11:29	898e64f4...
}
==============
**************
==============
// Select session
ISessionInfo si = dbi.Sessions.Pick(0);
si
**************
IBMBowShock_P2_FineGrid IBMBowShock_p2_xCells80_yCells320_CFLFrac0.1_RK1_s0=1.0E-03_lambdaMax15_RESTART4    05/19/2020 18:11:29 898e64f4...
==============
**************
==============
// Select time step
ITimestepInfo tsiFromDb = si.Timesteps.Last();
tsiFromDb
**************
 { Time-step: 0; Physical time: 0s; Fields: levelSet_recon, levelSet_recon_prc, levelSet_recon_prc_cont, rho, m0, m1, rhoE; Name:  }
==============
**************
==============
// Load grid and and create ShockLevelSetField
IGrid grid = dbi.Controller.DBDriver.LoadGrid(tsiFromDb.GridID, dbi);

DGField fieldFromDb = dbi.Controller.DBDriver.LoadFields(tsiFromDb, grid.iGridData, new[] { "levelSet_recon_prc_cont" }).Single();

// Project onto current grid
SinglePhaseField ShockLevelSetField = new SinglePhaseField(new Basis(grid.iGridData, fieldFromDb.Basis.Degree), "shockLevelSetField");
ShockLevelSetField.ProjectFromForeignGrid(1.0, (ConventionalDGField)fieldFromDb);
**************
Projecting levelSet_recon_prc_cont onto shockLevelSetField... 

==============
**************
==============
// Load CNS solution (rho, m0, m1, rhoE)
ConventionalDGField rho  = tsiFromDb.Fields.Where(f => f.Identification == "rho").SingleOrDefault() as ConventionalDGField;
ConventionalDGField m0   = tsiFromDb.Fields.Where(f => f.Identification == "m0").SingleOrDefault() as ConventionalDGField;
ConventionalDGField m1   = tsiFromDb.Fields.Where(f => f.Identification == "m1").SingleOrDefault() as ConventionalDGField;
ConventionalDGField rhoE = tsiFromDb.Fields.Where(f => f.Identification == "rhoE").SingleOrDefault() as ConventionalDGField;
**************
==============
**************
==============
// Create level set objects
LevelSet levelSet = new LevelSet(new Basis(grid.iGridData, degree: 2), "levelSet");

CellQuadratureScheme scheme = new CellQuadratureScheme(true, CellMask.GetFullMask(grid.iGridData));
Func<double[], double> levelSetPos = delegate (double[] X) {
    // Circle 1
    double x0 = 0.0;
    double y0 = 0.5;
    double r0 = 0.5;

    // Circle 2
    double x1 = 0.0;
    double y1 = -0.5;
    double r1 = 0.5;

    // Signed distance formulation
    //if (X[1] >= 0.5) {
    //    return Math.Sqrt((X[0] - x0) * (X[0] - x0) + (X[1] - y0) * (X[1] - y0)) - r0;
    //} else if (X[1] <= -0.5) {
    //    return Math.Sqrt((X[0] - x1) * (X[0] - x1) + (X[1] - y1) * (X[1] - y1)) - r1;
    //} else {
    //    return -(X[0] + 0.5);
    //}

    // Quadratic formulation
    if (X[1] >= 0.5) {
        return (X[0] - x0) * (X[0] - x0) + (X[1] - y0) * (X[1] - y0) - r0 * r0;
    } else if (X[1] <= -0.5) {
        return (X[0] - x1) * (X[0] - x1) + (X[1] - y1) * (X[1] - y1) - r1 * r1;
    } else {
        return X[0] * X[0] - 0.5 * 0.5;
    }
};
levelSet.ProjectField(1.0, levelSetPos, scheme);
            
string[,] speciesTable = new string[2, 2];
speciesTable[0, 0] = "X"; // 'Forbidden' species
speciesTable[0, 1] = "V"; // Void area (inside the blunt body)
speciesTable[1, 0] = "L"; // Pre-shock region (on the left of the shock)
speciesTable[1, 1] = "R"; // Post-shock region (on the right of the shock)

LevelSet shockLevelSet = new LevelSet(new Basis(grid.iGridData, degree: 5), "shockLevelSet");
shockLevelSet.Acc(1.0, ShockLevelSetField);
**************
==============
**************
==============
// Create level set tracker
LevelSetTracker LsTrk = new LevelSetTracker((GridData)grid.iGridData, XQuadFactoryHelper.MomentFittingVariants.Saye, 1, speciesTable, levelSet, shockLevelSet);
LsTrk.UpdateTracker();
**************
==============
**************
==============
// Create XDGFields (rho, m0, m1, rhoE)
int D      = LsTrk.GridDat.SpatialDimension;
int degree = 2;

XDGField Density = new XDGField(new XDGBasis(LsTrk, degree), "rho");

XDGField[] momentumFields = new XDGField[D];
XDGBasis momentumBasis = new XDGBasis(LsTrk, degree);

momentumFields[0] = new XDGField(momentumBasis, "m0");
momentumFields[1] = new XDGField(momentumBasis, "m1");
VectorField<XDGField> Momentum = new VectorField<XDGField>(momentumFields);

XDGField Energy = new XDGField(new XDGBasis(LsTrk, degree), "rhoE");
**************
==============
**************
==============
// Project CNS solution onto XDGFields  (rho, m0, m1, rhoE)
string[] speciesToEvaluate = new string[] { "L", "R" };

foreach (string s in speciesToEvaluate) {
    Density.GetSpeciesShadowField(s).ProjectFromForeignGrid(1.0, rho);
    Momentum[0].GetSpeciesShadowField(s).ProjectFromForeignGrid(1.0, m0);
    Momentum[1].GetSpeciesShadowField(s).ProjectFromForeignGrid(1.0, m1);
    Energy.GetSpeciesShadowField(s).ProjectFromForeignGrid(1.0, rhoE);
}
**************
Projecting rho onto rho-L... 
Projecting m0 onto m0-L... 
Projecting m1 onto m1-L... 
Projecting rhoE onto rhoE-L... 
Projecting rho onto rho-R... 
Projecting m0 onto m0-R... 
Projecting m1 onto m1-R... 
Projecting rhoE onto rhoE-R... 

==============
**************
==============
// Collect fields
List<DGField> fields = new List<DGField>();
fields.Add(Density);
fields.Add(Momentum[0]);
fields.Add(Momentum[1]);
fields.Add(Energy);
fields.Add(levelSet);
fields.Add(shockLevelSet);
**************
==============
**************
==============
// Save grid and time step
databases.Pick(0).SaveGridAndTimestep(fields.ToArray(), si.ProjectName, si.Name);
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
