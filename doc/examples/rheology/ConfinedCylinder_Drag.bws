restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 3 instances of IDatabaseInfo {
  0: { Session Count = 72; Grid Count = 8; Path = \\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_ConvergenceStudy_2 }
  1: { Session Count = 58; Grid Count = 10; Path = \\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_Drag }
  2: { Session Count = 45; Grid Count = 6; Path = \\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_unsteady }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.Rheology;
using BoSSS.Solution.AdvancedSolvers;
**************
==============
WorkflowMgm.Init("ConfinedCylinder_BodyforcesFix");
**************
Project name is set to 'ConfinedCylinder_BodyforcesFix'.

==============
// steady drag calculation
var myDb = OpenOrCreateDatabase(@"\\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_Drag");
// unsteady calculation
//var myDb = OpenOrCreateDatabase(@"\\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_unsteady");
**************
Opening existing database '\\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_Drag'.

==============
//var myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\kikker\deploy_dir\","hpccluster",ComputeNodes : new[] {"hpccluster"});
var myBatch = new MiniBatchProcessorClient(@"\\dc1\userspace\kikker\cluster\ConfinedCylinder");
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Mini batch processor is already running.

==============
// ======================
// Convergence Parameters
// ======================
**************
==============
int degree = 2;
int gridNo = 0;
int[] procs = new int[] {4};
**************
==============
// ======================
// Physical Parameters
// ======================
**************
==============
double u0                   = 1.5; // 0.375;// 0.66;// 3 / 2;
double h                    = 4;
double beta                 = 0.59;
double Reynolds             = 0.0001;
double Weissenberg          = 0; //aim Weissenberg number!
bool RaiseWeissenberg       = false;
double WeissenbergIncrement = 0.1;
**************
==============
// ======================
// Timestepping: steady/unsteady
// ======================
**************
==============
int NoOfTimesteps  = 1;//5000;
double dt          = 1e6;//0.01;
string SessionName = "ConfinedCylinder_drag_p"+degree+"_meshNo"+gridNo+"_Wi="+Weissenberg+"_Re0.0001_BodyforcesHalfCylinder";
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
//GridCommons grid; //     = new GridCommons[numberGrids];
Gmsh gmshGrid         = new Gmsh(@"c:\Users\kikker\AnnesBoSSSdb\Cylinder_GRIDS\mesh_karman_OriginalBox_MEDIUM_"+gridNo+"_half.msh");
GridCommons bosssGrid = gmshGrid.GenerateBoSSSGrid();
bosssGrid.Name        = "confined_cylinder";
bosssGrid.EdgeTagNames.Add(1, "Velocity_inlet");
//bosssGrid.EdgeTagNames.Add(2, "Wall_bottom");
bosssGrid.EdgeTagNames.Add(2, "Freeslip");
bosssGrid.EdgeTagNames.Add(3, "Wall_top");
bosssGrid.EdgeTagNames.Add(4, "Pressure_Outlet");
bosssGrid.EdgeTagNames.Add(5, "Wall_cylinder");

Func<double[], byte> edgeTagFunc = delegate (double[] X) {
                    double x = X[0];
                    double y = X[1];
//                  if (!C.FixedStreamwisePeriodicBC)
//                  {
                      if (Math.Abs(x - (-15)) < 1.0e-10)
                          return 1;
                      if (Math.Abs(x - (15)) < 1.0e-10)
                          return 4;
//                  }
                    //if (Math.Abs(y - (-2)) < 1.0e-10)
                    //    return 2;
                    
                    if (Math.Abs(y - (0)) < 1.0e-10)
                        return 2;
                                        
                    if (Math.Abs(y - (+2)) < 1.0e-10)
                        return 3;
                    //if (-1.0 < y && y < 1.0 && -1.0 < x  && x < 1.0)
                    //    return 5;
                    if (0 < y && y < 1.0 && -1.0 < x  && x < 1.0)
                        return 5;
                    
                    throw new ArgumentOutOfRangeException("at x = " + x + "and y = " +y);
};
bosssGrid.DefineEdgeTags(edgeTagFunc);            
//myDb.Controller.SaveGridInfo(bosssGrid);
myDb.SaveGrid(ref bosssGrid);
//grid = bosssGrid;                
**************

438c8559-c572-464a-808f-5d5f4b443bdd
==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
// Set Initial Conditions  
static class InitialValues {
    
    static double u0             = 1.5; // 0.375;// 0.66;// 3 / 2;
    static double h                    = 4;
    static double beta                 = 0.59;
    static double Reynolds             = 0.0001;
    static double Weissenberg          = 0; //aim Weissenberg number!
    
    public static double VelocityXfunction(double[] X) {
        return u0 * (1  - (X[1] *  X[1])/h);
    }

    public static double VelocityYfunction(double[] X) {
        return 0.0;
    }

    public static double Pressurefunction(double[] X) {
        return u0 * 0.5 * Reynolds * (35 - X[0]);
    }
    
    public static double StressXXfunction(double[] X) {
        return 2 * Weissenberg * (1 - beta) * u0 * (-2 / h) * X[1] * u0 * (-2 / h) * X[1];
    }
    
    public static double StressXYfunction(double[] X) {
        return (1 - beta) * u0 * (-2 / h) * X[1];
    }
    
    public static double StressYYfunction(double[] X) {
        return 0.0;
    }
    public static double Phi(double[] X) {
        return -1.0;
    }
}          
**************
==============
//Set boundary conditions
var Wall = new Formula("X => 0");
**************
==============
//List<RheologyControl> Controls = new List<RheologyControl>();
**************
==============
//Controls.Clear();

    //Database
    RheologyControl C = new RheologyControl();
    C.savetodb        = true;
    C.DbPath          = myDb.Path;
    C.ProjectName     = "Cylinder";
    C.SetGrid(bosssGrid);

    //SolverChooser
    C.NonLinearSolver.SolverCode           = NonLinearSolverCode.Newton;
    C.NonLinearSolver.MaxSolverIterations  = 100;
    C.NonLinearSolver.MinSolverIterations  = 3;
    C.NonLinearSolver.ConvergenceCriterion = 1E-6;
    C.LinearSolver.MaxSolverIterations     = 100;
    C.LinearSolver.MinSolverIterations     = 3;          
    C.LinearSolver.ConvergenceCriterion    = 1E-6;
    C.LinearSolver.SolverCode              = LinearSolverCode.classic_pardiso; //.exp_gmres_levelpmg;
    C.useJacobianForOperatorMatrix         = true;

    //Timestepping
    C.NoOfTimesteps      = NoOfTimesteps;
    C.dt                 = dt;
    C.dtMax              = C.dt;
    C.dtMin              = C.dt;
    C.Timestepper_Scheme = RheologyControl.TimesteppingScheme.ImplicitEuler;
    C.ObjectiveParam     = 1.0;

    //Configuration Shock capturing and body forces
    C.UsePerssonSensor       = false;
    C.SensorLimit            = 1e-4;
    C.AdaptiveMeshRefinement = false;
    C.RefinementLevel        = 10;
    C.UseArtificialDiffusion = false;
    C.Bodyforces             = true;
    
    //Configuration IC and BC and Solver analytics
    C.OperatorMatrixAnalysis       = false;
    C.SkipSolveAndEvaluateResidual = false;
    C.SetInitialConditions         = true;
    C.SetInitialPressure           = false;
    C.SetParamsAnalyticalSol       = false;
    C.ComputeL2Error               = false;
    C.Stokes                       = false;
    C.FixedStreamwisePeriodicBC    = false;

    //Physical parameters
    C.beta                 = beta;
    C.Reynolds             = Reynolds;
    C.Weissenberg          = Weissenberg; //aim Weissenberg number!
    C.RaiseWeissenberg     = RaiseWeissenberg;
    C.WeissenbergIncrement = WeissenbergIncrement;

    //Penalties
    C.ViscousPenaltyScaling = 1;
    C.Penalty2              = 1;
    C.Penalty1[0]           = 0;
    C.Penalty1[1]           = 0;
    C.PresPenalty2 = 1.0;
    C.PresPenalty1[0]       = 0.0;
    C.PresPenalty1[1]       = 0.0;
    C.alpha         = 1;
    C.StressPenalty = 1.0;

    //Create Fields
    C.FieldOptions.Add("VelocityX", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("VelocityY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("Pressure", new FieldOpts() { Degree = degree - 1, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });

    C.FieldOptions.Add("StressXX", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("StressXY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("StressYY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });

    C.FieldOptions.Add("ResidualMomentumX", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("ResidualMomentumY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("ResidualConti", new FieldOpts() { Degree = degree - 1, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });

    C.FieldOptions.Add("ResidualStressXX", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("ResidualStressXY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("ResidualStressYY", new FieldOpts() { Degree = degree, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });

    C.FieldOptions.Add("PhiDG", new FieldOpts() { Degree = 1, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });
    C.FieldOptions.Add("Phi", new FieldOpts() { Degree = 1, SaveToDB = FieldOpts.SaveToDBOpt.TRUE });

    //Set initial values
    C.InitialValues.Add("VelocityX", GetFormulaObject(InitialValues.VelocityXfunction));
    C.InitialValues.Add("VelocityY", GetFormulaObject(InitialValues.VelocityYfunction));
    C.InitialValues.Add("StressXX", GetFormulaObject(InitialValues.StressXXfunction));
    C.InitialValues.Add("StressXY", GetFormulaObject(InitialValues.StressXYfunction));
    C.InitialValues.Add("StressYY", GetFormulaObject(InitialValues.StressYYfunction));
    C.InitialValues.Add("Phi", GetFormulaObject(InitialValues.Phi));

    //Set Boundary Conditions
    //C.AddBoundaryValue("Wall_bottom", "VelocityX", Wall);
    //C.AddBoundaryValue("Wall_bottom", "VelocityY", Wall);
    C.AddBoundaryValue("Wall_top", "VelocityX", Wall);
    C.AddBoundaryValue("Wall_top", "VelocityY", Wall);
    C.AddBoundaryValue("Wall_cylinder", "VelocityX", Wall);
    C.AddBoundaryValue("Wall_cylinder", "VelocityY", Wall);

    C.AddBoundaryValue("Velocity_inlet", "VelocityX", GetFormulaObject(InitialValues.VelocityXfunction));
    C.AddBoundaryValue("Velocity_inlet", "VelocityY", GetFormulaObject(InitialValues.VelocityYfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressXX", GetFormulaObject(InitialValues.StressXXfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressXY", GetFormulaObject(InitialValues.StressXYfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressYY", GetFormulaObject(InitialValues.StressYYfunction)); 
    C.AddBoundaryValue("Pressure_Outlet");
    C.AddBoundaryValue("FreeSlip");
            
    //Save Session and next...
    C.SessionName = SessionName;   
    //Controls.Add(C);
    Console.WriteLine("Created control: " + C.SessionName);
**************
Created control: ConfinedCylinder_drag_p2_meshNo0_Wi=0_Re0.0001_BodyforcesHalfCylinder

==============
**************
==============
// ===========
// Launch Jobs
// ===========
**************
==============
//Controls.Count;
**************
==============
foreach (int element in procs){
var oneJob              = C.CreateJob();
oneJob.NumberOfMPIProcs = element;
oneJob.ExecutionTime    = "24:00:00";
oneJob.Activate(myBatch);
}
**************
Job not submitted yet, or no result session is known - starting submission.
Deploying executables and additional files ...
Deployment directory: \\dc1\userspace\kikker\cluster\ConfinedCylinder\RheologySolver2019Oct01_12-08-26
Source directory: C:\Users\kikker\BoSSS-code\public\src\L4-application\BoSSSpad\bin\Release
copied 26 files.
   writing file: control.obj
deployment finished.

==============
WorkflowMgm.AllJobs.Pick(0).Value.
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
