restart
**************

  BoSSSpad C# interpreter
  _______________________

Unable to open 'allowed database' for SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 at path Y:\CounterDiffusionFlame_fullGeom. Check configuration file 'BatchProcessorConfig.json'. (ArgumentException : Database Directory 'Y:\CounterDiffusionFlame_fullGeom' does not exist.)
SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 will continue to work, but database synchronization on job submission might not work correctly.
Unable to open 'allowed database' for SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 at path Y:\SquareCavityConvStudy. Check configuration file 'BatchProcessorConfig.json'. (ArgumentException : Database Directory 'Y:\SquareCavityConvStudy' does not exist.)
SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 will continue to work, but database synchronization on job submission might not work correctly.
Unable to open 'allowed database' for SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 at path Y:\CounterDiffusionFlame_fullGeom. Check configuration file 'BatchProcessorConfig.json'. (ArgumentException : Database Directory 'Y:\CounterDiffusionFlame_fullGeom' does not exist.)
SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 will continue to work, but database synchronization on job submission might not work correctly.
Unable to open 'allowed database' for SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 at path Y:\BoSSS_DB. Check configuration file 'BatchProcessorConfig.json'. (ArgumentException : Database Directory 'Y:\BoSSS_DB' does not exist.)
SlurmClient: jg11bano@lcluster2.hrz.tu-darmstadt.de, Slurm account: project01299 will continue to work, but database synchronization on job submission might not work correctly.
Databases loaded:
List of 0 instances of IDatabaseInfo {
}

 Console ready for input. Type 'help' for help.

==============
using ilPSP.Connectors.Matlab;
**************
==============
using System.Diagnostics;
using BoSSS.Solution.NSECommon;
using static System.Math;
using BoSSS.Solution.Queries;

**************
==============
using System.IO;
**************
==============
using BoSSS.Application.LowMachCombustionNSE;
**************
==============
string WFlowName = "UnstrainedDiffusionFlame";
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'UnstrainedDiffusionFlame'.

==============
var myBatch = new MiniBatchProcessorClient(@"C:\deploy-Mini");
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Starting mini batch processor in external process...
Started mini batch processor on local machine, process id is 12972.
started.
True
==============
string dbPath = @"C:\Databases\UnstrainedFlame_constantChemParams";
var myDb      = OpenOrCreateDatabase(dbPath);
**************
Opening existing database 'C:\Databases\UnstrainedFlame_constantChemParams'.

==============
**************
==============
**************
==============
Type solver = typeof(BoSSS.Application.LowMachCombustionNSE.LowMachCombustionNSEMain);
**************
==============
// ==========
// Parameters
// ==========
int[] dgDegree = new int[]{1,2,3,4};
int[] Resolutions = new int[]{3,4,5,6,7,8,9};
//int[] dgDegree = new int[]{2};
//int[] Resolutions = new int[]{5};

//int[] dgDegree = new int[]{3};
//int[] Resolutions = new int[]{4};
 
int[] Refinements = new int[]{1};
var  NofCells = Resolutions.ToList().Select(r=> (int)Math.Pow(2,r)).ToArray();
string baseJobName = "CounterDifFlame"   
**************
==============
NofCells
**************
==============
for (int dg = 0; dg < dgDegree.Length; dg++) {
    for (int r = 0; r < NofCells.Length; r++) {
        string ending        = "P" + dgDegree[dg] + "K" + NofCells[r];
        string jobName       = string.Format("FS_" + baseJobName + ending);
        string StartupString = string.Format("cs:BoSSS.Application.LowMachCombustionNSE.FullNSEControlExamples.FS_UnstrainedDiffusionFlame({0}, {1}, @\"{2}\")", dgDegree[dg], NofCells[r], dbPath);
        var oneJob           = new Job(jobName, solver);
        oneJob.SetControlStatement(StartupString);
        oneJob.NumberOfMPIProcs = NofCells[r] < 32? 1: 10;
        oneJob.Activate(myBatch);
    }
}
**************
==============
WorkflowMgm.BlockUntilAllJobsTerminate();
**************
==============
for (int dg = 0; dg < dgDegree.Length; dg++) {
    for (int r = 0; r < NofCells.Length; r++) {
        string ending        = "P" + dgDegree[dg] + "K" + NofCells[r];
        string jobName       = string.Format("Full_" + baseJobName + ending);
        string StartupString = string.Format("cs:BoSSS.Application.LowMachCombustionNSE.FullNSEControlExamples.Full_UnstrainedDiffusionFlame({0}, {1}, @\"{2}\")", dgDegree[dg], NofCells[r], dbPath);
        var oneJob           = new Job(jobName, solver);
        oneJob.SetControlStatement(StartupString);
        oneJob.NumberOfMPIProcs = NofCells[r] < 32? 1: 10;
        oneJob.Activate(myBatch);
    }
}
**************
==============
string dbPath = @"C:\Databases3\UnstrainedFlame";
var myDb      = OpenOrCreateDatabase(dbPath);
**************
==============
myDb.Sessions
**************
List of 34 instances of ISessionInfo {
  0: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K2048	12/21/2020 22:42:26	2231c243...
  1: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K2048	12/21/2020 22:30:26	2d47dac7...
  2: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K1024	12/21/2020 20:24:55	230304de...
  3: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K1024	12/21/2020 20:07:09	4eae662c...
  4: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K1024	12/21/2020 19:54:08	6ad4a668...
  5: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K1024	12/21/2020 19:47:38	cddce4e8...
  6: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K512	12/21/2020 18:15:59	1fb0d195...
  7: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K256	12/21/2020 18:09:13	687f8051...
  8: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K128	12/21/2020 18:05:13	c3371162...
  9: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K64	12/21/2020 18:02:27	88e42e16...
  10: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K32	12/21/2020 18:00:43	7028ea10...
  11: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K16	12/21/2020 17:57:52	6ff67822...
  12: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP4K8	12/21/2020 17:57:52	85776daa...
  13: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K512	12/21/2020 17:49:52	8f172b0e...
  14: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K256	12/21/2020 17:45:07	da673195...
  15: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K128	12/21/2020 17:42:22	5200a13b...
  16: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K64	12/21/2020 17:40:36	266ca88e...
  17: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K32	12/21/2020 17:39:21	b012bced...
  18: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K16	12/21/2020 17:37:31	698c2e59...
  19: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP3K8	12/21/2020 17:37:31	c7cf9862...
  20: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K512	12/21/2020 17:31:16	ca6da896...
  21: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K256	12/21/2020 17:27:46	48c4af08...
  22: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K128	12/21/2020 17:25:46	fa4efba8...
  23: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K64	12/21/2020 17:24:16	1c082545...
  24: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K32	12/21/2020 17:23:16	4fa46107...
  25: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K16	12/21/2020 17:21:35	fffc2671...
  26: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP2K8	12/21/2020 17:21:35	e7ffca8b...
  27: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K512	12/21/2020 17:18:05	b07f6341...
  28: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K256	12/21/2020 17:16:05	9c0e54c6...
  29: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K128	12/21/2020 17:14:50	71364131...
  30: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K64	12/21/2020 17:13:50	1b8866ca...
  31: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K32	12/21/2020 17:13:05	de95359b...
  32: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K16	12/21/2020 17:12:05	b52cefd2...
  33: UnstrainedDiffusionFlame	Full_UnstrainedDifFlameP1K8	12/21/2020 17:11:55	b506890d...
}
==============
// Now the flame sheet estimations should be deleted
WorkflowMgm.Sessions.Where(s => s.Name.StartsWith("FS_")).ForEach(x=>x.Delete(true));
**************
Session 3dcfc1c4-f5db-40ca-b26c-d44262af825e deleted.
Session 3af210dd-d017-45c7-8634-8f05f3883577 deleted.
Session 493350cd-12f3-4756-bfe1-7d022c42cf15 deleted.
Session f81cffc8-88ad-463b-bfa8-5b1738d3291a deleted.

==============
WorkflowMgm.ResetSessionsCache();
**************
==============
a.KeysAndQueries
**************
==============
var a = myDb.Sessions.Pick(8);
**************
==============
var asd = (Convert.ToInt32(a.KeysAndQueries["Grid:NoOfCells"])) /3;
**************
==============
string dbPath = @"C:\Databases\UnstrainedFlame";
var myDb      = OpenOrCreateDatabase(dbPath);
**************
Opening existing database 'C:\Databases\UnstrainedFlame'.

==============
string basepath = @"C:\Users\jfgj8\Dropbox\PaperdiffusionFlame\ama\data\UnstrainedFlame_deleteme\";
System.IO.Directory.CreateDirectory(basepath); // Create folder for storing data
**************
==============
string[] varnames = new string[]{"VelocityX","VelocityY","Temperature", "Pressure",
"MassFraction0","MassFraction1","MassFraction2","MassFraction3","MassFraction4" }; 
**************
==============
foreach (var varname in varnames) {
    foreach (int pDeg in dgDegree) {
       var pDegSessions = myDb.Sessions.Where(
            Si => (Convert.ToInt32(Si.KeysAndQueries["DGdegree:Velocity*"]) == pDeg 
        && (Convert.ToInt32(Si.KeysAndQueries["Grid:NoOfCells"]))/ 3 > 31
            ) // function which is true on all sessions we are interested in: 
         ).ToArray();
        Plot2Ddata pDegPlot =
         pDegSessions.ToEstimatedGridConvergenceData(varname,
           xAxis_Is_hOrDof: true, // false selects DOFs for x-axis 
           normType: NormType.L2_embedded );
            //Saving to a txt file
        pDegPlot.SaveTextFileToPublish(basepath+"\\"+  varname + "DG" + pDeg,false);
    }
}
**************
==============
myDb.Sessions.Pick(0).Export().Do()
**************
Starting export process... Data will be written to the following directory:
C:\Users\jfgj8\AppData\Local\BoSSS\plots\sessions\UnstrainedDiffusionFlame__Full_UnstrainedDifFlameP4K1024__99c86c91-19a5-4085-adb4-a418bdadd169
==============
// Plot error as "Value- Value_fine"
foreach (int pDeg in dgDegree) {
ISessionInfo[]  pDegSessions = WorkflowMgm.Sessions.Where(
        Si => (Convert.ToInt32(Si.KeysAndQueries["DGdegree:Velocity*"]) == pDeg)  // function which is true on all sessions we are interested in: 
     ).ToArray(); // Select databases with a given dgdegree
     
     var sortedSessions = pDegSessions.OrderBy(o => o.Timesteps[1].Grid.NumberOfCells).ToList();
     
      // Select timestep corresponding to the converged solution
     ITimestepInfo[] timesteps = sortedSessions.Select(s => s.Timesteps.Last()).ToArray();

     // pick the timestep with the finest mesh
     var fine    = timesteps.Last();
     var notfine = timesteps.Take(timesteps.Length-1);
    
     int c = 0;
     foreach(var L in notfine){
         DGField[] allErrors = new DGField[]{};
         foreach (var varname in varnames) {
            var fieldFine   = (fine.Fields.Where(s => (s.Identification == varname)).First()).CloneAs();
            var fieldCoarse = (L.Fields.Where(s => (s.Identification == varname)).First()).CloneAs(); //////////////////////
            DGField err     = fieldFine.CloneAs();
       err = DGField_Arithmetic.ScaledSummation(err,-1.0, fieldCoarse ,-1.0);
            fieldFine.Identification   = fieldFine.Identification  + "Fine"; 
            fieldCoarse.Identification = fieldCoarse.Identification  + "Coarse"; 
     
            err.Identification         = varname + "err";
       
            allErrors = ArrayTools.Cat<DGField>(allErrors, new DGField[] {err});
         }
              BoSSS.Solution.Tecplot.Tecplot.PlotFields(allErrors,"Errors_DG"+pDeg+ "_Res"+c  ,0,2);
          c++;    
     }
     
}
**************
==============
  BatchmodeConnector connector = new BatchmodeConnector();
**************
==============
   bool useCantera = true;
**************
==============
//get initial estimate from Cantera
//=======================================

if(useCantera){
connector.Cmd("diffflame"); // Call the cantera diffusion flame
connector.Cmd("fprintf('Number of points %d', length(z))");

connector.GetMatrix(null, "x");
connector.GetMatrix(null, "Temperature");
connector.GetMatrix(null, "MassFraction0");
connector.GetMatrix(null, "MassFraction1");
connector.GetMatrix(null, "MassFraction2");
connector.GetMatrix(null, "MassFraction3");
connector.GetMatrix(null, "VelocityX");
connector.Execute(false);
 }
**************
==============
Temperature
**************
==============
**************
==============
string[] varnames = new string[]{"VelocityX","VelocityY","Temperature", "Pressure"}; 
**************
==============
var ts = databases.Last().Sessions.Pick(0).Timesteps.Pick(0);//
**************
==============
// Coordinate array 
double xleft  = -1.0; 
double xright = 1.0;
int nCells    = 10;
double[]  _xNodes = GenericBlas.Linspace(xleft, xright, nCells + 1);
double[] Yvalues = new double[nCells+1];
**************
==============
**************
==============
**************
==============
foreach(var varname in varnames){
    var field = ts.Fields.Where( Fi => (Fi.Identification == varname)).Last();
        for(int n = 0 ; n < _xNodes.Length; n++){
            Yvalues[n] = field.ProbeAt(new double[]{ _xNodes[n], 0.0});    // Pick value along the central axis. and Store it in array
    }
        
}
**************
==============
**************
==============
string bpath          = @"C:\tmp\ConvPlots\data\CanteraComparison";
string pathWithoutExt = System.IO.Path.ChangeExtension(bpath, null);
string newPath        = pathWithoutExt + "Data.txt";
**************
==============
using (StreamWriter s = new StreamWriter(newPath)) {
    s.WriteLine("x\ty");
    foreach (var varname in varnames) {
        for (int i = 0; i < group.Abscissas.Length; i++) {
            s.Write(_xNodes[i].ToString("E16", NumberFormatInfo.InvariantInfo) + "\t");
            s.WriteLine();
        }
    }
}
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
