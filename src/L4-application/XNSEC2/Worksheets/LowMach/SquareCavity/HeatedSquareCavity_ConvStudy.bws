restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 0 instances of IDatabaseInfo {
}

 Console ready for input. Type 'help' for help.

==============
**************
==============
using System.Diagnostics;
using BoSSS.Solution.NSECommon;
using static System.Math;
using BoSSS.Solution.Queries;
using BoSSS.Application.LowMachCombustionNSE;
using System.IO;
using System.Globalization;
**************
(5,25): error CS0234: The type or namespace name `LowMachCombustionNSE' does not exist in the namespace `BoSSS.Application'. Are you missing an assembly reference?
No. of errors|warnings: 1|0.

==============
string WFlowName = "HeatedSquareCavityConvStudy"; 
WorkflowMgm.Init(WFlowName);
**************
Project name is set to 'HeatedSquareCavityConvStudy'.

==============
**************
==============
**************
==============
**************
==============
**************
==============
var myBatch = new MiniBatchProcessorClient(@"C:\deploy-Mini");
MiniBatchProcessor.Server.StartIfNotRunning();

**************
Mini batch processor is already running.
False
==============
string dbPath = @"C:\Databases\HeatedSquareCavity_ConvStudy_Ra1e3_FINER";
var myDb      = OpenOrCreateDatabase(dbPath);
**************
Opening existing database 'C:\Databases\HeatedSquareCavity_ConvStudy_Ra1e3_FINER'.

==============
Type solver = typeof(BoSSS.Application.LowMachCombustionNSE.LowMachCombustionNSEMain);
**************
(1,41): error CS0234: The type or namespace name `LowMachCombustionNSE' does not exist in the namespace `BoSSS.Application'. Are you missing an assembly reference?
No. of errors|warnings: 1|0.

==============
// ==========
// Parameters
// ==========
int[] dgDegree = new int[]{1,2,3,4};
int[] Resolutions = new int[]{3,4,5,6,7,8};//
//int[] dgDegree = new int[]{1,2};
//int[] Resolutions = new int[]{3,4};

double[] RaArr = new double[]{1e3};
double[] newtonConvCriteria = new double[] {1e-10}; // 1e-5, 1e-7, 1e-9,
double dt = -1;
var  NofCells = Resolutions.ToList().Select(r=> (int)Math.Pow(2,r)).ToArray();
string baseJobName = "HeatedSquareCavity"   
**************
==============
NofCells
**************
List of 6 instances of Int32 {
  0: 8
  1: 16
  2: 32
  3: 64
  4: 128
  5: 256
}
==============
for(int n = 0; n < RaArr.Length; n++){
for (int dg = 0; dg < dgDegree.Length; dg++){
        for(int r = 0; r < NofCells.Length; r++){
        string ending = "P" + dgDegree[dg] + "K" +NofCells[r]+"Ra"+n;
         string jobName       = string.Format(baseJobName + ending);
         string StartupString = string.Format("cs:BoSSS.Application.LowMachCombustionNSE.FullNSEControlExamples.NaturalConvectionSquareCavity({0}, {1},{2}, {3}, @\"{4}\" )", dgDegree[dg], NofCells[r] ,RaArr[n], dt, dbPath);
Console.WriteLine(StartupString);
                var oneJob = new Job(jobName, solver);
          oneJob.ExecutionTime = "0:15:00"; // 
        oneJob.SetControlStatement(StartupString);
         oneJob.NumberOfMPIProcs = 1;//StaticFormulas.getNumberOfcores(NofCells[r]*NofCells[r],dgDegree[dg],4);
         oneJob.Activate(myBatch);
    }
}
}
**************
==============
**************
==============
WorkflowMgm.BlockUntilAllJobsTerminate();
**************
Mini batch processor is already running.
All jobs finished.

==============
string[] varnames = new string[]{"VelocityX","VelocityY","Temperature", "Pressure" };// 
**************
==============
string basepath = @"C:\tmp\ConvPlots\data\ConvStudy_HeatedCavity_Ra1e3";
System.IO.Directory.CreateDirectory(basepath); // Create folder for storing data
**************
ConvStudy_HeatedCavity_Ra1e3
==============
**************
==============
foreach (var varname in varnames) {
    foreach (int pDeg in dgDegree) {
       var pDegSessions = myDb.Sessions.Where(
            Si => (Convert.ToInt32(Si.KeysAndQueries["DGdegree:Velocity*"]) == pDeg) // function which is true on all sessions we are interested in: 
         ).ToArray();
        Plot2Ddata pDegPlot =
         pDegSessions.ToEstimatedGridConvergenceData(varname,
           xAxis_Is_hOrDof: true, // false selects DOFs for x-axis 
           normType: NormType.L2_approximate );
            //Saving to a txt file
        pDegPlot.SaveTextFileToPublish(basepath+"\\"+  varname + "DG" + pDeg, false);
    }
}
**************
==============
// Plot error as "Value- Value_fine"
foreach (int pDeg in dgDegree) {
ISessionInfo[]  pDegSessions = WorkflowMgm.Sessions.Where(
        Si => (Convert.ToInt32(Si.KeysAndQueries["DGdegree:Velocity*"]) == pDeg)  // function which is true on all sessions we are interested in: 
     ).ToArray(); // Select databases with a given dgdegree
     
     var sortedSessions = pDegSessions.OrderBy(o => o.Timesteps[1].Grid.NumberOfCells).ToList();
     
      // Select timestep corresponding to the converged solution
     ITimestepInfo[] timesteps = sortedSessions.Select(s => s.Timesteps.Last()).ToArray();

     // pick the timestep with the finest mesh
     var fine    = timesteps.Last();
     var notfine = timesteps.Take(timesteps.Length-1);
    
     int c = 0;
     foreach(var L in notfine){
         DGField[] allErrors = new DGField[]{};
         foreach (var varname in varnames) {
            var fieldFine   = (fine.Fields.Where(s => (s.Identification == varname)).First()).CloneAs();
            var fieldCoarse = (L.Fields.Where(s => (s.Identification == varname)).First()).CloneAs(); //////////////////////
            DGField err     = fieldFine.CloneAs();
       err = DGField_Arithmetic.ScaledSummation(err,-1.0, fieldCoarse ,-1.0);
            fieldFine.Identification   = fieldFine.Identification  + "Fine"; 
            fieldCoarse.Identification = fieldCoarse.Identification  + "Coarse"; 
     
            err.Identification         = varname + "err";
       
            allErrors = ArrayTools.Cat<DGField>(allErrors, new DGField[] {err});
         }
              BoSSS.Solution.Tecplot.Tecplot.PlotFields(allErrors,"Errors_DG"+pDeg+ "_Res"+c  ,0,2);
          c++;    
     }
     
}
**************
==============
var a = databases.Pick(0).Sessions.Pick(4).Timesteps.Pick(1).Fields.Pick(0);
**************
==============
a.ProbeAt(0,0)
**************
==============
Dictionary<int,double[]> All_p0values = new Dictionary<int,double[]>();
**************
==============
foreach (int pDeg in dgDegree) {
    double[] p0values;
    var pDegSessions = myDb.Sessions.Where(
         Si => (Convert.ToInt32(Si.KeysAndQueries["DGdegree:Velocity*"]) == pDeg) // function which is true on all sessions we are interested in: 
      ).ToArray();

    p0values = new double[pDegSessions.Length];
    int i = 0;
    foreach (var sess in pDegSessions) {
        double p0value = sess.Timesteps.Last().Fields.Pick(0).ProbeAt(0, 0);
        p0values[i] = p0value;
        i++;
    }
All_p0values.Add(pDeg,p0values);
}
**************
==============
int dgDg = 2;
**************
==============
            string basepath = @"C:\tmp\NaturalConvection\data\ThermoPress\";
            foreach (int dgDg in dgDegree) {

                if (dgDg != 5) {
                    string names = "p0" + dgDg.ToString() + ".txt";
                    string txtpath = basepath + names;
                    using (StreamWriter stw = new StreamWriter(txtpath)) {
                        stw.WriteLine("x\ty");
                        for (int i = 0; i < Resolutions.Length; i++) {
                    
                            stw.Write(Resolutions[i].ToString("E16", NumberFormatInfo.InvariantInfo) + "\t");
                            
                            stw.Write(All_p0values[dgDg][i].ToString("E16", NumberFormatInfo.InvariantInfo));
                            stw.WriteLine();
                        }
                    }
                }

            }
**************
==============
int a = 34;
**************
==============
string b = a.ToString();
**************
==============
NofCells
**************
==============
Resolutions
**************
==============
**************
==============
All_p0values[4]
**************
==============
**************
==============
**************
==============
myDb.Sessions
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
