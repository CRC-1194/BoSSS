<?xml version="1.0" encoding="utf-8"?>
<!--  BoSSS control file, specialized for the compressible Navier-Stokes solver:
      Soure Terms for a manufactured solution based on Masa Library: "Malaya, 
      Nicholas, et al. "MASA: a library for verification using manufactured 
      and analytical solutions." Engineering with Computers 29.4 (2013): 487-496."-->
<BoSSSControl>
	<Base>
		<dboptions path="c:\bosss_dbv2\MMS_exp\" />
		<!-- no grid-->
    <grid guid="00000000-0000-0000-0000-000000000000" />
    
    <!-- h = 1/16
    <grid guid="b8ed032c-3fb4-427a-9bdd-ed35ede16a48" />-->


    <description name="dtMax=5.e-7, sipg=1.0 viscosity=0.001">
			viscous NSE Test -> MMS
		</description>
		
		<tags>
			viscous, NSE, MMS
		</tags>
    <!-- Specify "solver" or "query" or "parameterStudy" -->
		<run mode="solver"/>
    
		<fields_degree>
			<!-- Specify DG polynomial degree; If degree for "u", "e", "p",
								"T", "Ma", "K" or "S" are given, these fields will also be
								calculated and included in IO operations -->
			<field	identification="rho"	degree="1" />
			<field	identification="m"		degree="1" />
			<field	identification="rhoE"	degree="1" />
      <field  identification="u" degree="1"/>
      <field  identification="p" degree="1"/>
      <field  identification="T" degree="1"/>
      <field  identification="Ma" degree="1"/>
		</fields_degree>
	</Base>

	<!-- Specify "values" or "restart" -->
	<initial mode="values">

		<restart>
			<session guid="969eb288-1c19-4cbc-bdf7-f8edc8d8da3b" timestepno="" />
		</restart>

		<values>
			<formula>
        rho(x) = (2.0 + sin(2*PI*x))
      </formula>
			<formula>
        m0(x) = (2.0 + sin(2*PI*x))*(2.0 + sin(2*PI*x))
      </formula>
			<formula>
        rhoE(x) = (2.0 +cos(2*PI*x))/(1.4-1) + (2.0 + sin(2*PI*x))^3 /2
      </formula>
		</values>
	</initial>

	<Solver>
		<logging savetodb="true" saveperiod="100" tracing="false"/>
		<termcond Endtime="3." NoOfTimesteps="10000000"/>
		<timestepping dtMin="0.0e-7" dtMax="5.0e-2" CFLFrac="0.01"/>
		<!--<timestepping dtMin="4.82e-6" dtMax="4.82e-6" CFLFrac="0.01"/>-->

		<boundary>
			<bc edgetagname="supersonicinlet">
				<formula>
          rho(x) = 2.0
        </formula>
				<formula>
          u0(x) = 2.0
        </formula>
				<formula>
          p(x) = 3.0
        </formula>
			</bc>

			<bc edgetagname="supersonicoutlet">
			</bc>

		</boundary>
		<properties>
		
			<string key="equationSystem">NavierStokes</string>
			<string key="convectiveFluxType">HLLC</string>
			
			<string key="diffusiveFluxType">SIPG</string>			
			<float key="SIPGPenaltyConstant">1.0</float> 

			<string key="timeStepping">explicit</string>
			<string key="explicitScheme">RungeKutta</string>
        <int key="explicitOrder">1</int>

      <!--<float key="Reynolds">5.5613479</float>-->
      <float key="Reynolds">1.0</float>
			<float key="Mach">1.0</float>
			<float key="Prandtl">1</float>
			<float key="kappa">1.4</float>
			<!-- Choose "IdealGas", "Tait" or "StiffenedGas". Omitting this
								 option will make CNS default to "IdealGas".-->
			<string key="equationOfState">IdealGas</string>
			<!-- "None": No residual calculation;
								 "SteadyState": Residuals for a steady state problem;
								 "Unsteady": Residuals for an unsteady problem -->
			<string key="residualType">ChangeRate,query</string>
			<int key="residualInterval">100</int>
			<!-- The following properties represent optional formulas defining 
								 source terms of the selected equation system. Each formula may
								 depend on independent variables as well as primal fields -->
			<string key="rhoSource">
        f(x)  = - 2*PI*(2.0 + sin(2*PI*x))*cos(2*PI*x)
              - 2*PI*(2.0 + sin(2*PI*x))*cos(2*PI*x)
      </string>
			<string key="m0Source">
        f(x)  =- 2*PI*(2.0 + sin(2*PI*x))^2 *cos(2*PI*x)
              + 2*PI*sin(2*PI*x)
              - 2*2*PI*(2.0 + sin(2*PI*x))*(2.0 + sin(2*PI*x))*cos(2*PI*x)
              - 4/3*2^2*PI^2*1*sin(2*PI*x)
      </string>
			<string key="rhoESource">
        f(x) =- 1/2*2*PI*(2.0 + sin(2*PI*x))^3*cos(2*PI*x)
        +1.4/0.4*2*PI*(2.0 + sin(2*PI*x))*sin(2*PI*x)
        -1.4/0.4*2*PI*(2.0 + cos(2*PI*x))*cos(2*PI*x)
        -3/2*2*PI*(2.0 + sin(2*PI*x))*(2.0 + sin(2*PI*x))^2 * cos(2*PI*x)
        +1.4/(1.4-1)*2*2^2*PI^2*1^2*(2.0 + cos(2*PI*x))/(2.0 + sin(2*PI*x))^3 *cos(2*PI*x)^2
        +1.4/(1.4-1)*2*2*2*PI^2*1*1/(2.0 + sin(2*PI*x))^2 *cos(2*PI*x)*sin(2*PI*x)
        +1.4/(1.4-1)*2^2*PI^2*1*(2.0 + cos(2*PI*x))/(2.0 + sin(2*PI*x))^2 *sin(2*PI*x)
        -1.4/(1.4-1)*2^2*PI^2*1/(2.0 + sin(2*PI*x)) *cos(2*PI*x)
        +4/3*2^2*PI^2*1 *cos(2*PI*x)^2
        -4/3*2^2*PI^2*1*(2.0 + sin(2*PI*x)) *sin(2*PI*x)
      </string>
			<!-- Choose "Symbolic" or "byFlux" for the calculation of the
								 derivatives of the primal variables -->
			<string key="derivativeOption">None</string>
		</properties>

   
    <Queries>
			<L2Error id="SolL2Err_rho">
				<computedSolution>
					<field identification="rho" />
				</computedSolution>
				<exactSolution>
          <formula degree="10">
            rho(x) = 2.0 + sin(2*PI*x)
          </formula>
				</exactSolution>
			</L2Error>
      <L2Error id="SolL2Err_m0">
        <computedSolution>
          <field identification="m0" />
        </computedSolution>
        <exactSolution>
          <formula degree="10">
            m0(x) = (2.0 + sin(2*PI*x))*(2.0 + sin(2*PI*x))
          </formula>
        </exactSolution>
      </L2Error>
      <L2Error id="SolL2Err_rhoE">
        <computedSolution>
          <field identification="rhoE" />
        </computedSolution>
        <exactSolution>
          <formula degree="10">
            rhoE(x) = (2.0 + cos(2*PI*x))/(1.4-1) + (2.0 + sin(2*PI*x))^3 /2
          </formula>
        </exactSolution>
      </L2Error>
      <L2Error id="SolL2Err_U0">
        <computedSolution>
          <field identification="u0" />
        </computedSolution>
        <exactSolution>
          <formula degree="10">
            p(x) = 2.0 + sin(2*PI*x)
          </formula>
        </exactSolution>
      </L2Error>
		</Queries>
	</Solver>

</BoSSSControl>
