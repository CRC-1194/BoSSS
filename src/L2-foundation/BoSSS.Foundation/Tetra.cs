/* =======================================================================
Copyright 2017 Technische Universitaet Darmstadt, Fachgebiet fuer Stroemungsdynamik (chair of fluid dynamics)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System;
using BoSSS.Platform;
using BoSSS.Platform.LinAlg;
using ilPSP.Utils;
using System.Diagnostics;
using BoSSS.Foundation.Quadrature;
using ilPSP;
using BoSSS.Foundation.Grid.Classic;

namespace BoSSS.Foundation.Grid.RefElements {

    /// <summary>
    /// The tetrahedral reference element \f$ K^{\textrm{tetra}}  \f$.
    /// </summary>
    /// <remarks>
    /// The vertices of the tetrahedron are:
    ///     \f[ 
    ///     \left[
    ///        \left( 0, 0, \sqrt{2}  \right),
    ///        \left( 0, \frac{4}{3}, -\frac{\sqrt{2}}{3}  \right),
    ///        \left( -\frac{2}{3} \sqrt(3), -\frac{2}{3}, -\frac{\sqrt{2}}{3}  \right),
    ///        \left(  \frac{2}{3} \sqrt(3), -\frac{2}{3}, -\frac{\sqrt{2}}{3}  \right)
    ///     \right]
    ///     \f]
    /// </remarks>
    public class Tetra : RefElement {

        /// <summary>
        /// Indicator for the edges (which are triangles, see
        /// <see cref="Triangle"/>)
        /// </summary>
        public enum Edge {
            /// <summary>
            /// The front edge. Formed by vertices 1, 2 and 3
            /// </summary>
            Front = 0,

            /// <summary>
            /// The bottom edge. Formed by vertices 0, 2 and 3
            /// </summary>
            Bottom = 1,

            /// <summary>
            /// The back left edge. Formed by vertices 0, 1 and 2
            /// </summary>
            BackLeft = 2,

            /// <summary>
            /// The back right edge. Formed by vertices 0, 1 and 3
            /// </summary>
            BackRight = 3
        }

        /// <summary>
        /// Matrix based on the vertices (see <see cref="RefElement.Vertices"/>)
        /// of this object. Required by <see cref="IsWithin"/>. Its layout is:
        /// (x1, y1, z1, 1; x2, y2, z2, 1; x3, y3, z3, 1; x4, y4, z4, 1)
        /// </summary>
        private MultidimensionalArray vertexMatrix;


        private static Tetra instance = null;
        private static readonly object padlock = new object();

        /// <summary>
        /// Access to the single, global instance.
        /// </summary>
        public static Tetra Instance {
            get {
                lock(padlock) {
                    if(instance == null) {
                        instance = new Tetra();
                    }
                    return instance;
                }
            }
        }


        /// <summary>
        /// Constructs a new tetrahedron simplex.
        /// </summary>
        private Tetra() {
            var _Vertices = new double[,] {
                { 0.0, 0.0, Math.Sqrt(2.0)},
                { 0.0, 4.0 / 3.0, -Math.Sqrt(2.0) / 3.0 },
                { -2.0 * Math.Sqrt(3.0) / 3.0, -2.0 / 3.0, -Math.Sqrt(2.0) / 3.0},
                { 2.0 * Math.Sqrt(3.0) / 3.0, -2.0 / 3.0, -Math.Sqrt(2.0) / 3.0}

                // kantenlänge 2:
                //{ 0.0 , 0.0, 0.5*Math.Sqrt(3)*Math.Sqrt(2) },
                //{ 0.0 , (2.0/3.0) *Math.Sqrt(3) , (-1.0/6.0) *Math.Sqrt(3) *Math.Sqrt(2) },
                //{ -1.0, (-1.0/3.0)  *Math.Sqrt(3), (-1.0/6.0) *Math.Sqrt(3) *Math.Sqrt(2) },
                //{ 1.0,  (-1.0/3.0)  *Math.Sqrt(3), (-1.0/6.0) *Math.Sqrt(3) *Math.Sqrt(2) }
            };
            this.m_Vertices = new NodeSet(this, 4, 3);
            this.m_Vertices.InitializeFrom(_Vertices);
            this.m_Vertices.LockForever();

            m_NoOfFaces = 4;
            m_FaceRefElement = Triangle.Instance;

            vertexMatrix = MultidimensionalArray.Create(SpatialDimension + 1, SpatialDimension + 1);
            for(int i = 0; i < SpatialDimension; i++) {
                for(int j = 0; j < SpatialDimension; j++) {
                    vertexMatrix[i, j] = Vertices[i, j];
                }
            }

            for(int i = 0; i < SpatialDimension + 1; i++) {
                vertexMatrix[i, SpatialDimension] = 1.0;
            }

            {
                var qrTemp = QuadRuleResource.DecodeFromBase64(Resource.TetraQuadRules_bin);
                foreach(var q in qrTemp) {
                    var realQr = QuadRule.CreateEmpty(this, q.Item2.GetLength(0), this.SpatialDimension);
                    realQr.Nodes.Set2DArray(q.Item2);
                    realQr.Weights.SetVector(q.Item3);
                    realQr.OrderOfPrecision = q.Item1;
                    realQr.Nodes.LockForever();
                    realQr.Weights.LockForever();
                    base.m_QuadRules.Add(realQr);
                }
            }

            /*
            #region QUADRULE_DEF

            //Keast quadrature rules imported from
            //http://people.sc.fsu.edu/~burkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
            //The rules with orders 6 and 8 have been sorted out because of
            //insufficient accuracy.
            {
                QuadRule q = QuadRule.CreateEmpty(this, 1, 3);
                q.Nodes[0, 0] = 0;
                q.Nodes[0, 1] = 0;
                q.Nodes[0, 2] = 0;
                q.Weights[0] = 1.45154947720484628041;
                q.OrderOfPrecision = 1;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 4, 3);
                q.Nodes[0, 0] = -5.1639777949432232e-01;
                q.Nodes[0, 1] = -2.9814239699997200e-01;
                q.Nodes[0, 2] = -2.1081851067789198e-01;
                q.Nodes[1, 0] = 0.0000000000000000e+00;
                q.Nodes[1, 1] = 0.0000000000000000e+00;
                q.Nodes[1, 2] = 6.3245553203367595e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 5.9628479399994400e-01;
                q.Nodes[2, 2] = -2.1081851067789198e-01;
                q.Nodes[3, 0] = 5.1639777949432232e-01;
                q.Nodes[3, 1] = -2.9814239699997200e-01;
                q.Nodes[3, 2] = -2.1081851067789198e-01;
                q.Weights[0] = 3.6288736930121157e-01;
                q.Weights[1] = 3.6288736930121157e-01;
                q.Weights[2] = 3.6288736930121157e-01;
                q.Weights[3] = 3.6288736930121157e-01;
                q.OrderOfPrecision = 1;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 5, 3);
                q.Nodes[0, 0] = 0.0000000000000000e+00;
                q.Nodes[0, 1] = -1.0000000000000000e-30;
                q.Nodes[0, 2] = 1.4142135623730950e-30;
                q.Nodes[1, 0] = -3.8490017945975047e-01;
                q.Nodes[1, 1] = -2.2222222222222220e-01;
                q.Nodes[1, 2] = -1.5713484026367735e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 1.0000000000000000e-30;
                q.Nodes[2, 2] = 4.7140452079103149e-01;
                q.Nodes[3, 0] = 0.0000000000000000e+00;
                q.Nodes[3, 1] = 4.4444444444444440e-01;
                q.Nodes[3, 2] = -1.5713484026367735e-01;
                q.Nodes[4, 0] = 3.8490017945975047e-01;
                q.Nodes[4, 1] = -2.2222222222222220e-01;
                q.Nodes[4, 2] = -1.5713484026367735e-01;
                q.Weights[0] = -1.1612395817638770e+00;
                q.Weights[1] = 6.5319726474218083e-01;
                q.Weights[2] = 6.5319726474218083e-01;
                q.Weights[3] = 6.5319726474218083e-01;
                q.Weights[4] = 6.5319726474218083e-01;
                q.OrderOfPrecision = 2;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 10, 3);
                q.Nodes[0, 0] = -4.9025595601135442e-01;
                q.Nodes[0, 1] = -2.8304940817497280e-01;
                q.Nodes[0, 2] = -2.0014615593136227e-01;
                q.Nodes[1, 0] = 0.0000000000000000e+00;
                q.Nodes[1, 1] = 0.0000000000000000e+00;
                q.Nodes[1, 2] = 6.0043846779408680e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 5.6609881634994560e-01;
                q.Nodes[2, 2] = -2.0014615593136227e-01;
                q.Nodes[3, 0] = 4.9025595601135442e-01;
                q.Nodes[3, 1] = -2.8304940817497280e-01;
                q.Nodes[3, 2] = -2.0014615593136227e-01;
                q.Nodes[4, 0] = 5.7735026918962576e-01;
                q.Nodes[4, 1] = 3.3333333333333333e-01;
                q.Nodes[4, 2] = -4.7140452079103168e-01;
                q.Nodes[5, 0] = -5.7735026918962576e-01;
                q.Nodes[5, 1] = 3.3333333333333333e-01;
                q.Nodes[5, 2] = -4.7140452079103168e-01;
                q.Nodes[6, 0] = 0.0000000000000000e+00;
                q.Nodes[6, 1] = -6.6666666666666667e-01;
                q.Nodes[6, 2] = -4.7140452079103168e-01;
                q.Nodes[7, 0] = -5.7735026918962576e-01;
                q.Nodes[7, 1] = -3.3333333333333333e-01;
                q.Nodes[7, 2] = 4.7140452079103168e-01;
                q.Nodes[8, 0] = 5.7735026918962576e-01;
                q.Nodes[8, 1] = -3.3333333333333333e-01;
                q.Nodes[8, 2] = 4.7140452079103168e-01;
                q.Nodes[9, 0] = 0.0000000000000000e+00;
                q.Nodes[9, 1] = 6.6666666666666667e-01;
                q.Nodes[9, 2] = 4.7140452079103168e-01;
                q.Weights[0] = 3.1609677333837928e-01;
                q.Weights[1] = 3.1609677333837928e-01;
                q.Weights[2] = 3.1609677333837928e-01;
                q.Weights[3] = 3.1609677333837928e-01;
                q.Weights[4] = 3.1193730641888245e-02;
                q.Weights[5] = 3.1193730641888245e-02;
                q.Weights[6] = 3.1193730641888245e-02;
                q.Weights[7] = 3.1193730641888245e-02;
                q.Weights[8] = 3.1193730641888245e-02;
                q.Weights[9] = 3.1193730641888245e-02;
                q.OrderOfPrecision = 3;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 11, 3);
                q.Nodes[0, 0] = 0.0000000000000000e+00;
                q.Nodes[0, 1] = -1.0000000000000000e-30;
                q.Nodes[0, 2] = 1.4142135623730950e-30;
                q.Nodes[1, 0] = -8.2478609884232254e-01;
                q.Nodes[1, 1] = -4.7619047619047620e-01;
                q.Nodes[1, 2] = -3.3671751485073678e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 0.0000000000000000e+00;
                q.Nodes[2, 2] = 1.0101525445522109e+00;
                q.Nodes[3, 0] = 0.0000000000000000e+00;
                q.Nodes[3, 1] = 9.5238095238095240e-01;
                q.Nodes[3, 2] = -3.3671751485073678e-01;
                q.Nodes[4, 0] = 8.2478609884232254e-01;
                q.Nodes[4, 1] = -4.7619047619047620e-01;
                q.Nodes[4, 2] = -3.3671751485073678e-01;
                q.Nodes[5, 0] = 3.4503277967117710e-01;
                q.Nodes[5, 1] = 1.9920476822239893e-01;
                q.Nodes[5, 2] = -2.8171808490950552e-01;
                q.Nodes[6, 0] = -3.4503277967117710e-01;
                q.Nodes[6, 1] = 1.9920476822239893e-01;
                q.Nodes[6, 2] = -2.8171808490950552e-01;
                q.Nodes[7, 0] = 0.0000000000000000e+00;
                q.Nodes[7, 1] = -3.9840953644479787e-01;
                q.Nodes[7, 2] = -2.8171808490950552e-01;
                q.Nodes[8, 0] = -3.4503277967117710e-01;
                q.Nodes[8, 1] = -1.9920476822239893e-01;
                q.Nodes[8, 2] = 2.8171808490950552e-01;
                q.Nodes[9, 0] = 3.4503277967117710e-01;
                q.Nodes[9, 1] = -1.9920476822239893e-01;
                q.Nodes[9, 2] = 2.8171808490950552e-01;
                q.Nodes[10, 0] = 0.0000000000000000e+00;
                q.Nodes[10, 1] = 3.9840953644479787e-01;
                q.Nodes[10, 2] = 2.8171808490950552e-01;
                q.Weights[0] = -1.1457563873403582e-01;
                q.Weights[1] = 6.6384196090834922e-02;
                q.Weights[2] = 6.6384196090834922e-02;
                q.Weights[3] = 6.6384196090834922e-02;
                q.Weights[4] = 6.6384196090834922e-02;
                q.Weights[5] = 2.1676472192925700e-01;
                q.Weights[6] = 2.1676472192925700e-01;
                q.Weights[7] = 2.1676472192925700e-01;
                q.Weights[8] = 2.1676472192925700e-01;
                q.Weights[9] = 2.1676472192925700e-01;
                q.Weights[10] = 2.1676472192925700e-01;
                q.OrderOfPrecision = 4;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 15, 3);
                q.Nodes[0, 0] = 0.0000000000000000e+000;
                q.Nodes[0, 1] = 0.0000000000000000e+000;
                q.Nodes[0, 2] = -2.7755575615628914e-017;
                q.Nodes[1, 0] = 0.0000000000000000e+000;
                q.Nodes[1, 1] = -4.4444444444444442e-001;
                q.Nodes[1, 2] = 1.5713484026367736e-001;
                q.Nodes[2, 0] = 0.0000000000000000e+000;
                q.Nodes[2, 1] = 0.0000000000000000e+000;
                q.Nodes[2, 2] = -4.7140452079103157e-001;
                q.Nodes[3, 0] = -3.8490017945975047e-001;
                q.Nodes[3, 1] = 2.2222222222222221e-001;
                q.Nodes[3, 2] = 1.5713484026367736e-001;
                q.Nodes[4, 0] = 3.8490017945975047e-001;
                q.Nodes[4, 1] = 2.2222222222222221e-001;
                q.Nodes[4, 2] = 1.5713484026367736e-001;
                q.Nodes[5, 0] = 0.0000000000000000e+000;
                q.Nodes[5, 1] = 8.4848484848484862e-001;
                q.Nodes[5, 2] = -2.9998469504883840e-001;
                q.Nodes[6, 0] = 0.0000000000000000e+000;
                q.Nodes[6, 1] = 0.0000000000000000e+000;
                q.Nodes[6, 2] = 8.9995408514651476e-001;
                q.Nodes[7, 0] = 7.3480943351406913e-001;
                q.Nodes[7, 1] = -4.2424242424242425e-001;
                q.Nodes[7, 2] = -2.9998469504883851e-001;
                q.Nodes[8, 0] = -7.3480943351406913e-001;
                q.Nodes[8, 1] = -4.2424242424242425e-001;
                q.Nodes[8, 2] = -2.9998469504883846e-001;
                q.Nodes[9, 0] = 0.0000000000000000e+000;
                q.Nodes[9, 1] = 4.8919959047022854e-001;
                q.Nodes[9, 2] = 3.4591634777518065e-001;
                q.Nodes[10, 0] = -4.2365927286816168e-001;
                q.Nodes[10, 1] = -2.4459979523511427e-001;
                q.Nodes[10, 2] = 3.4591634777518049e-001;
                q.Nodes[11, 0] = 4.2365927286816168e-001;
                q.Nodes[11, 1] = -2.4459979523511427e-001;
                q.Nodes[11, 2] = 3.4591634777518032e-001;
                q.Nodes[12, 0] = 0.0000000000000000e+000;
                q.Nodes[12, 1] = -4.8919959047022854e-001;
                q.Nodes[12, 2] = -3.4591634777518065e-001;
                q.Nodes[13, 0] = 4.2365927286816168e-001;
                q.Nodes[13, 1] = 2.4459979523511427e-001;
                q.Nodes[13, 2] = -3.4591634777518060e-001;
                q.Nodes[14, 0] = -4.2365927286816168e-001;
                q.Nodes[14, 1] = 2.4459979523511427e-001;
                q.Nodes[14, 2] = -3.4591634777518049e-001;
                q.Weights[0] = 2.6374954265801798e-001;
                q.Weights[1] = 5.2489065916782401e-002;
                q.Weights[2] = 5.2489065916782401e-002;
                q.Weights[3] = 5.2489065916782401e-002;
                q.Weights[4] = 5.2489065916782401e-002;
                q.Weights[5] = 1.0142193133647343e-001;
                q.Weights[6] = 1.0142193133647343e-001;
                q.Weights[7] = 1.0142193133647343e-001;
                q.Weights[8] = 1.0142193133647343e-001;
                q.Weights[9] = 9.5359324255634162e-002;
                q.Weights[10] = 9.5359324255634162e-002;
                q.Weights[11] = 9.5359324255634162e-002;
                q.Weights[12] = 9.5359324255634162e-002;
                q.Weights[13] = 9.5359324255634162e-002;
                q.Weights[14] = 9.5359324255634162e-002;
                q.OrderOfPrecision = 5;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 24, 3);
                q.Nodes[0, 0] = -1.6349233445654884e-01;
                q.Nodes[0, 1] = -9.4392343308928800e-02;
                q.Nodes[0, 2] = -6.6745466045832190e-02;
                q.Nodes[1, 0] = 0.0000000000000000e+00;
                q.Nodes[1, 1] = -1.0000000000000000e-30;
                q.Nodes[1, 2] = 2.0023639813749657e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 1.8878468661785760e-01;
                q.Nodes[2, 2] = -6.6745466045832190e-02;
                q.Nodes[3, 0] = 1.6349233445654884e-01;
                q.Nodes[3, 1] = -9.4392343308928800e-02;
                q.Nodes[3, 2] = -6.6745466045832190e-02;
                q.Nodes[4, 0] = -9.6683557110752733e-01;
                q.Nodes[4, 1] = -5.5820277724103647e-01;
                q.Nodes[4, 2] = -3.9470896906430056e-01;
                q.Nodes[5, 0] = 0.0000000000000000e+00;
                q.Nodes[5, 1] = 1.0000000000000000e-31;
                q.Nodes[5, 2] = 1.1841269071929023e+00;
                q.Nodes[6, 0] = 0.0000000000000000e+00;
                q.Nodes[6, 1] = 1.1164055544820729e+00;
                q.Nodes[6, 2] = -3.9470896906430056e-01;
                q.Nodes[7, 0] = 9.6683557110752733e-01;
                q.Nodes[7, 1] = -5.5820277724103647e-01;
                q.Nodes[7, 2] = -3.9470896906430056e-01;
                q.Nodes[8, 0] = 3.3411440277001938e-01;
                q.Nodes[8, 1] = 1.9290104037940173e-01;
                q.Nodes[8, 2] = 1.3640163375021471e-01;
                q.Nodes[9, 0] = 0.0000000000000000e+00;
                q.Nodes[9, 1] = 1.0000000000000000e-30;
                q.Nodes[9, 2] = -4.0920490125064525e-01;
                q.Nodes[10, 0] = 0.0000000000000000e+00;
                q.Nodes[10, 1] = -3.8580208075880347e-01;
                q.Nodes[10, 2] = 1.3640163375021471e-01;
                q.Nodes[11, 0] = -3.3411440277001938e-01;
                q.Nodes[11, 1] = 1.9290104037940173e-01;
                q.Nodes[11, 2] = 1.3640163375021471e-01;
                q.Nodes[12, 0] = -2.3788139318206009e-01;
                q.Nodes[12, 1] = -1.3734088638886560e-01;
                q.Nodes[12, 2] = 6.6563386499050764e-01;
                q.Nodes[13, 0] = 2.3788139318206009e-01;
                q.Nodes[13, 1] = -1.3734088638886560e-01;
                q.Nodes[13, 2] = 6.6563386499050764e-01;
                q.Nodes[14, 0] = 0.0000000000000000e+00;
                q.Nodes[14, 1] = 2.7468177277773120e-01;
                q.Nodes[14, 2] = 6.6563386499050764e-01;
                q.Nodes[15, 0] = -6.2278157264181045e-01;
                q.Nodes[15, 1] = -3.5956310861108773e-01;
                q.Nodes[15, 2] = 3.7094503935798977e-02;
                q.Nodes[16, 0] = 6.2278157264181045e-01;
                q.Nodes[16, 1] = -3.5956310861108773e-01;
                q.Nodes[16, 2] = 3.7094503935798977e-02;
                q.Nodes[17, 0] = 0.0000000000000000e+00;
                q.Nodes[17, 1] = 7.1912621722217547e-01;
                q.Nodes[17, 2] = 3.7094503935798977e-02;
                q.Nodes[18, 0] = 2.3788139318206009e-01;
                q.Nodes[18, 1] = 5.8178533083330987e-01;
                q.Nodes[18, 2] = -3.5136418446315331e-01;
                q.Nodes[19, 0] = 3.8490017945975036e-01;
                q.Nodes[19, 1] = -4.9690399499995333e-01;
                q.Nodes[19, 2] = -3.5136418446315331e-01;
                q.Nodes[20, 0] = -6.2278157264181045e-01;
                q.Nodes[20, 1] = -8.4881335833356533e-02;
                q.Nodes[20, 2] = -3.5136418446315331e-01;
                q.Nodes[21, 0] = 6.2278157264181045e-01;
                q.Nodes[21, 1] = -8.4881335833356533e-02;
                q.Nodes[21, 2] = -3.5136418446315331e-01;
                q.Nodes[22, 0] = -2.3788139318206009e-01;
                q.Nodes[22, 1] = 5.8178533083330987e-01;
                q.Nodes[22, 2] = -3.5136418446315331e-01;
                q.Nodes[23, 0] = -3.8490017945975036e-01;
                q.Nodes[23, 1] = -4.9690399499995333e-01;
                q.Nodes[23, 2] = -3.5136418446315331e-01;
                q.Weights[0] = 5.7949847265823257e-02;
                q.Weights[1] = 5.7949847265823257e-02;
                q.Weights[2] = 5.7949847265823257e-02;
                q.Weights[3] = 5.7949847265823257e-02;
                q.Weights[4] = 1.4627570439033659e-02;
                q.Weights[5] = 1.4627570439033659e-02;
                q.Weights[6] = 1.4627570439033659e-02;
                q.Weights[7] = 1.4627570439033659e-02;
                q.Weights[8] = 8.0353687929225310e-02;
                q.Weights[9] = 8.0353687929225310e-02;
                q.Weights[10] = 8.0353687929225310e-02;
                q.Weights[11] = 8.0353687929225310e-02;
                q.Weights[12] = 6.9985421222376496e-02;
                q.Weights[13] = 6.9985421222376496e-02;
                q.Weights[14] = 6.9985421222376496e-02;
                q.Weights[15] = 6.9985421222376496e-02;
                q.Weights[16] = 6.9985421222376496e-02;
                q.Weights[17] = 6.9985421222376496e-02;
                q.Weights[18] = 6.9985421222376496e-02;
                q.Weights[19] = 6.9985421222376496e-02;
                q.Weights[20] = 6.9985421222376496e-02;
                q.Weights[21] = 6.9985421222376496e-02;
                q.Weights[22] = 6.9985421222376496e-02;
                q.Weights[23] = 6.9985421222376496e-02;
                q.OrderOfPrecision = 6;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 31, 3);
                q.Nodes[0, 0] = 0.0000000000000000e+000;
                q.Nodes[0, 1] = 0.0000000000000000e+000;
                q.Nodes[0, 2] = -2.7755575615628914e-017;
                q.Nodes[1, 0] = 0.0000000000000000e+000;
                q.Nodes[1, 1] = 9.1619630757163373e-001;
                q.Nodes[1, 2] = -3.2392431099098912e-001;
                q.Nodes[2, 0] = 0.0000000000000000e+000;
                q.Nodes[2, 1] = 0.0000000000000000e+000;
                q.Nodes[2, 2] = 9.7177293297296707e-001;
                q.Nodes[3, 0] = 7.9344927721053593e-001;
                q.Nodes[3, 1] = -4.5809815378581692e-001;
                q.Nodes[3, 2] = -3.2392431099098912e-001;
                q.Nodes[4, 0] = -7.9344927721053593e-001;
                q.Nodes[4, 1] = -4.5809815378581692e-001;
                q.Nodes[4, 2] = -3.2392431099098912e-001;
                q.Nodes[5, 0] = 0.0000000000000000e+000;
                q.Nodes[5, 1] = 6.8350284445917642e-001;
                q.Nodes[5, 2] = -2.4165474813868892e-001;
                q.Nodes[6, 0] = 0.0000000000000000e+000;
                q.Nodes[6, 1] = 0.0000000000000000e+000;
                q.Nodes[6, 2] = 7.2496424441606655e-001;
                q.Nodes[7, 0] = 5.9193082686057064e-001;
                q.Nodes[7, 1] = -3.4175142222958821e-001;
                q.Nodes[7, 2] = -2.4165474813868892e-001;
                q.Nodes[8, 0] = -5.9193082686057064e-001;
                q.Nodes[8, 1] = -3.4175142222958821e-001;
                q.Nodes[8, 2] = -2.4165474813868892e-001;
                q.Nodes[9, 0] = 0.0000000000000000e+000;
                q.Nodes[9, 1] = -4.4020887704757627e-001;
                q.Nodes[9, 2] = 1.5563734104942797e-001;
                q.Nodes[10, 0] = 0.0000000000000000e+000;
                q.Nodes[10, 1] = 0.0000000000000000e+000;
                q.Nodes[10, 2] = -4.6691202314828473e-001;
                q.Nodes[11, 0] = -3.8123207049462154e-001;
                q.Nodes[11, 1] = 2.2010443852378814e-001;
                q.Nodes[11, 2] = 1.5563734104942803e-001;
                q.Nodes[12, 0] = 3.8123207049462154e-001;
                q.Nodes[12, 1] = 2.2010443852378814e-001;
                q.Nodes[12, 2] = 1.5563734104942803e-001;
                q.Nodes[13, 0] = 0.0000000000000000e+000;
                q.Nodes[13, 1] = -6.6666666666666663e-001;
                q.Nodes[13, 2] = -4.7140452079103173e-001;
                q.Nodes[14, 0] = 5.7735026918962573e-001;
                q.Nodes[14, 1] = 3.3333333333333331e-001;
                q.Nodes[14, 2] = -4.7140452079103173e-001;
                q.Nodes[15, 0] = -5.7735026918962573e-001;
                q.Nodes[15, 1] = 3.3333333333333331e-001;
                q.Nodes[15, 2] = -4.7140452079103173e-001;
                q.Nodes[16, 0] = 0.0000000000000000e+000;
                q.Nodes[16, 1] = 6.6666666666666663e-001;
                q.Nodes[16, 2] = 4.7140452079103168e-001;
                q.Nodes[17, 0] = -5.7735026918962573e-001;
                q.Nodes[17, 1] = -3.3333333333333331e-001;
                q.Nodes[17, 2] = 4.7140452079103168e-001;
                q.Nodes[18, 0] = 5.7735026918962573e-001;
                q.Nodes[18, 1] = -3.3333333333333331e-001;
                q.Nodes[18, 2] = 4.7140452079103168e-001;
                q.Nodes[19, 0] = 0.0000000000000000e+000;
                q.Nodes[19, 1] = 1.3333333333333336e-001;
                q.Nodes[19, 2] = 6.5996632910744446e-001;
                q.Nodes[20, 0] = -1.1547005383792515e-001;
                q.Nodes[20, 1] = -6.6666666666666666e-002;
                q.Nodes[20, 2] = 6.5996632910744424e-001;
                q.Nodes[21, 0] = 1.1547005383792515e-001;
                q.Nodes[21, 1] = -6.6666666666666666e-002;
                q.Nodes[21, 2] = 6.5996632910744446e-001;
                q.Nodes[22, 0] = 0.0000000000000000e+000;
                q.Nodes[22, 1] = 6.6666666666666663e-001;
                q.Nodes[22, 2] = -9.4280904158206294e-002;
                q.Nodes[23, 0] = -5.7735026918962562e-001;
                q.Nodes[23, 1] = -3.3333333333333326e-001;
                q.Nodes[23, 2] = -9.4280904158206280e-002;
                q.Nodes[24, 0] = 5.7735026918962562e-001;
                q.Nodes[24, 1] = -3.3333333333333331e-001;
                q.Nodes[24, 2] = -9.4280904158206225e-002;
                q.Nodes[25, 0] = 4.6188021535170054e-001;
                q.Nodes[25, 1] = -3.9999999999999997e-001;
                q.Nodes[25, 2] = -2.8284271247461906e-001;
                q.Nodes[26, 0] = -5.7735026918962562e-001;
                q.Nodes[26, 1] = -1.9999999999999996e-001;
                q.Nodes[26, 2] = -2.8284271247461890e-001;
                q.Nodes[27, 0] = 1.1547005383792515e-001;
                q.Nodes[27, 1] = 5.9999999999999998e-001;
                q.Nodes[27, 2] = -2.8284271247461895e-001;
                q.Nodes[28, 0] = -4.6188021535170054e-001;
                q.Nodes[28, 1] = -3.9999999999999991e-001;
                q.Nodes[28, 2] = -2.8284271247461895e-001;
                q.Nodes[29, 0] = 5.7735026918962562e-001;
                q.Nodes[29, 1] = -1.9999999999999996e-001;
                q.Nodes[29, 2] = -2.8284271247461890e-001;
                q.Nodes[30, 0] = -1.1547005383792515e-001;
                q.Nodes[30, 1] = 5.9999999999999998e-001;
                q.Nodes[30, 2] = -2.8284271247461901e-001;
                q.Weights[0] = 1.5906854414269622e-001;
                q.Weights[1] = 9.2318037468991906e-002;
                q.Weights[2] = 9.2318037468991906e-002;
                q.Weights[3] = 9.2318037468991906e-002;
                q.Weights[4] = 9.2318037468991906e-002;
                q.Weights[5] = -5.4448555787390451e-001;
                q.Weights[6] = -5.4448555787390451e-001;
                q.Weights[7] = -5.4448555787390451e-001;
                q.Weights[8] = -5.4448555787390451e-001;
                q.Weights[9] = 4.2600874700405821e-002;
                q.Weights[10] = 4.2600874700405821e-002;
                q.Weights[11] = 4.2600874700405821e-002;
                q.Weights[12] = 4.2600874700405821e-002;
                q.Weights[13] = 8.4481715604514292e-003;
                q.Weights[14] = 8.4481715604514292e-003;
                q.Weights[15] = 8.4481715604514292e-003;
                q.Weights[16] = 8.4481715604514292e-003;
                q.Weights[17] = 8.4481715604514292e-003;
                q.Weights[18] = 8.4481715604514292e-003;
                q.Weights[19] = 2.4000487387645572e-001;
                q.Weights[20] = 2.4000487387645572e-001;
                q.Weights[21] = 2.4000487387645572e-001;
                q.Weights[22] = 2.4000487387645572e-001;
                q.Weights[23] = 2.4000487387645572e-001;
                q.Weights[24] = 2.4000487387645572e-001;
                q.Weights[25] = 2.4000487387645572e-001;
                q.Weights[26] = 2.4000487387645572e-001;
                q.Weights[27] = 2.4000487387645572e-001;
                q.Weights[28] = 2.4000487387645572e-001;
                q.Weights[29] = 2.4000487387645572e-001;
                q.Weights[30] = 2.4000487387645572e-001;
                q.OrderOfPrecision = 7;
                m_QuadRules.Add(q);
            }
            {
                QuadRule q = QuadRule.CreateEmpty(this, 45, 3);
                q.Nodes[0, 0] = 0.0000000000000000e+00;
                q.Nodes[0, 1] = -1.0000000000000000e-30;
                q.Nodes[0, 2] = 1.4142135623730950e-30;
                q.Nodes[1, 0] = -5.6593750205442963e-01;
                q.Nodes[1, 1] = -3.2674416915562933e-01;
                q.Nodes[1, 2] = -2.3104301772310986e-01;
                q.Nodes[2, 0] = 0.0000000000000000e+00;
                q.Nodes[2, 1] = 0.0000000000000000e+00;
                q.Nodes[2, 2] = 6.9312905316932959e-01;
                q.Nodes[3, 0] = 0.0000000000000000e+00;
                q.Nodes[3, 1] = 6.5348833831125867e-01;
                q.Nodes[3, 2] = -2.3104301772310986e-01;
                q.Nodes[4, 0] = 5.6593750205442963e-01;
                q.Nodes[4, 1] = -3.2674416915562933e-01;
                q.Nodes[4, 2] = -2.3104301772310986e-01;
                q.Nodes[5, 0] = -1.0065347674794547e+00;
                q.Nodes[5, 1] = -5.8112311895298053e-01;
                q.Nodes[5, 2] = -4.1091609811592923e-01;
                q.Nodes[6, 0] = 0.0000000000000000e+00;
                q.Nodes[6, 1] = 1.0000000000000000e-31;
                q.Nodes[6, 2] = 1.2327482943477877e+00;
                q.Nodes[7, 0] = 0.0000000000000000e+00;
                q.Nodes[7, 1] = 1.1622462379059611e+00;
                q.Nodes[7, 2] = -4.1091609811592923e-01;
                q.Nodes[8, 0] = 1.0065347674794547e+00;
                q.Nodes[8, 1] = -5.8112311895298053e-01;
                q.Nodes[8, 2] = -4.1091609811592923e-01;
                q.Nodes[9, 0] = -4.6239499091312163e-01;
                q.Nodes[9, 1] = -2.6696387247562533e-01;
                q.Nodes[9, 2] = 3.7754392911867076e-01;
                q.Nodes[10, 0] = 4.6239499091312163e-01;
                q.Nodes[10, 1] = -2.6696387247562533e-01;
                q.Nodes[10, 2] = 3.7754392911867076e-01;
                q.Nodes[11, 0] = 0.0000000000000000e+00;
                q.Nodes[11, 1] = 5.3392774495125067e-01;
                q.Nodes[11, 2] = 3.7754392911867076e-01;
                q.Nodes[12, 0] = 4.6239499091312163e-01;
                q.Nodes[12, 1] = 2.6696387247562533e-01;
                q.Nodes[12, 2] = -3.7754392911867076e-01;
                q.Nodes[13, 0] = -4.6239499091312163e-01;
                q.Nodes[13, 1] = 2.6696387247562533e-01;
                q.Nodes[13, 2] = -3.7754392911867076e-01;
                q.Nodes[14, 0] = 0.0000000000000000e+00;
                q.Nodes[14, 1] = -5.3392774495125067e-01;
                q.Nodes[14, 2] = -3.7754392911867076e-01;
                q.Nodes[15, 0] = -1.5304297613409312e-01;
                q.Nodes[15, 1] = -8.8359403468600133e-02;
                q.Nodes[15, 2] = 1.2495906674849061e-01;
                q.Nodes[16, 0] = 1.5304297613409312e-01;
                q.Nodes[16, 1] = -8.8359403468600133e-02;
                q.Nodes[16, 2] = 1.2495906674849061e-01;
                q.Nodes[17, 0] = 0.0000000000000000e+00;
                q.Nodes[17, 1] = 1.7671880693720027e-01;
                q.Nodes[17, 2] = 1.2495906674849061e-01;
                q.Nodes[18, 0] = 1.5304297613409312e-01;
                q.Nodes[18, 1] = 8.8359403468600133e-02;
                q.Nodes[18, 2] = -1.2495906674849061e-01;
                q.Nodes[19, 0] = -1.5304297613409312e-01;
                q.Nodes[19, 1] = 8.8359403468600133e-02;
                q.Nodes[19, 2] = -1.2495906674849061e-01;
                q.Nodes[20, 0] = 0.0000000000000000e+00;
                q.Nodes[20, 1] = -1.7671880693720027e-01;
                q.Nodes[20, 2] = -1.2495906674849061e-01;
                q.Nodes[21, 0] = 2.4131313081475331e-01;
                q.Nodes[21, 1] = 1.3932220103488920e-01;
                q.Nodes[21, 2] = 4.9644559184133196e-01;
                q.Nodes[22, 0] = -2.4131313081475331e-01;
                q.Nodes[22, 1] = 1.3932220103488920e-01;
                q.Nodes[22, 2] = 4.9644559184133196e-01;
                q.Nodes[23, 0] = 0.0000000000000000e+00;
                q.Nodes[23, 1] = -2.7864440206977840e-01;
                q.Nodes[23, 2] = 4.9644559184133196e-01;
                q.Nodes[24, 0] = -3.2490841808350451e-01;
                q.Nodes[24, 1] = -1.8758596264248680e-01;
                q.Nodes[24, 2] = -4.2819032560472554e-01;
                q.Nodes[25, 0] = 3.2490841808350451e-01;
                q.Nodes[25, 1] = -1.8758596264248680e-01;
                q.Nodes[25, 2] = -4.2819032560472554e-01;
                q.Nodes[26, 0] = 0.0000000000000000e+00;
                q.Nodes[26, 1] = 3.7517192528497360e-01;
                q.Nodes[26, 2] = -4.2819032560472554e-01;
                q.Nodes[27, 0] = -2.4131313081475331e-01;
                q.Nodes[27, 1] = 5.1449412631986280e-01;
                q.Nodes[27, 2] = -3.4127633118303209e-02;
                q.Nodes[28, 0] = 5.6622154889825782e-01;
                q.Nodes[28, 1] = -4.8263761607597600e-02;
                q.Nodes[28, 2] = -3.4127633118303209e-02;
                q.Nodes[29, 0] = -3.2490841808350451e-01;
                q.Nodes[29, 1] = -4.6623036471226520e-01;
                q.Nodes[29, 2] = -3.4127633118303209e-02;
                q.Nodes[30, 0] = 3.2490841808350451e-01;
                q.Nodes[30, 1] = -4.6623036471226520e-01;
                q.Nodes[30, 2] = -3.4127633118303209e-02;
                q.Nodes[31, 0] = 2.4131313081475331e-01;
                q.Nodes[31, 1] = 5.1449412631986280e-01;
                q.Nodes[31, 2] = -3.4127633118303209e-02;
                q.Nodes[32, 0] = -5.6622154889825782e-01;
                q.Nodes[32, 1] = -4.8263761607597600e-02;
                q.Nodes[32, 2] = -3.4127633118303209e-02;
                q.Nodes[33, 0] = -7.9944927286225447e-01;
                q.Nodes[33, 1] = -4.6156225289047320e-01;
                q.Nodes[33, 2] = -1.0607266351257521e-01;
                q.Nodes[34, 0] = 7.9944927286225447e-01;
                q.Nodes[34, 1] = -4.6156225289047320e-01;
                q.Nodes[34, 2] = -1.0607266351257521e-01;
                q.Nodes[35, 0] = 0.0000000000000000e+00;
                q.Nodes[35, 1] = 9.2312450578094640e-01;
                q.Nodes[35, 2] = -1.0607266351257521e-01;
                q.Nodes[36, 0] = -1.7987512386617001e-01;
                q.Nodes[36, 1] = -1.0385095118465053e-01;
                q.Nodes[36, 2] = 9.0568768506044172e-01;
                q.Nodes[37, 0] = 1.7987512386617001e-01;
                q.Nodes[37, 1] = -1.0385095118465053e-01;
                q.Nodes[37, 2] = 9.0568768506044172e-01;
                q.Nodes[38, 0] = 0.0000000000000000e+00;
                q.Nodes[38, 1] = 2.0770190236930107e-01;
                q.Nodes[38, 2] = 9.0568768506044172e-01;
                q.Nodes[39, 0] = 7.9944927286225447e-01;
                q.Nodes[39, 1] = -2.5386035052117213e-01;
                q.Nodes[39, 2] = -3.9980751077393326e-01;
                q.Nodes[40, 0] = -6.1957414899608446e-01;
                q.Nodes[40, 1] = -5.6541320407512373e-01;
                q.Nodes[40, 2] = -3.9980751077393326e-01;
                q.Nodes[41, 0] = -1.7987512386617001e-01;
                q.Nodes[41, 1] = 8.1927355459629587e-01;
                q.Nodes[41, 2] = -3.9980751077393326e-01;
                q.Nodes[42, 0] = 1.7987512386617001e-01;
                q.Nodes[42, 1] = 8.1927355459629587e-01;
                q.Nodes[42, 2] = -3.9980751077393326e-01;
                q.Nodes[43, 0] = -7.9944927286225447e-01;
                q.Nodes[43, 1] = -2.5386035052117213e-01;
                q.Nodes[43, 2] = -3.9980751077393326e-01;
                q.Nodes[44, 0] = 6.1957414899608446e-01;
                q.Nodes[44, 1] = -5.6541320407512373e-01;
                q.Nodes[44, 2] = -3.9980751077393326e-01;
                q.Weights[0] = -3.4251057558119889e-01;
                q.Weights[1] = 3.5545393153479837e-02;
                q.Weights[2] = 3.5545393153479837e-02;
                q.Weights[3] = 3.5545393153479837e-02;
                q.Weights[4] = 3.5545393153479837e-02;
                q.Weights[5] = 5.7314730704721206e-03;
                q.Weights[6] = 5.7314730704721206e-03;
                q.Weights[7] = 5.7314730704721206e-03;
                q.Weights[8] = 5.7314730704721206e-03;
                q.Weights[9] = 3.8183811633226839e-02;
                q.Weights[10] = 3.8183811633226839e-02;
                q.Weights[11] = 3.8183811633226839e-02;
                q.Weights[12] = 3.8183811633226839e-02;
                q.Weights[13] = 3.8183811633226839e-02;
                q.Weights[14] = 3.8183811633226839e-02;
                q.Weights[15] = 1.2045013164182863e-01;
                q.Weights[16] = 1.2045013164182863e-01;
                q.Weights[17] = 1.2045013164182863e-01;
                q.Weights[18] = 1.2045013164182863e-01;
                q.Weights[19] = 1.2045013164182863e-01;
                q.Weights[20] = 1.2045013164182863e-01;
                q.Weights[21] = 3.6931228361517082e-02;
                q.Weights[22] = 3.6931228361517082e-02;
                q.Weights[23] = 3.6931228361517082e-02;
                q.Weights[24] = 3.6931228361517082e-02;
                q.Weights[25] = 3.6931228361517082e-02;
                q.Weights[26] = 3.6931228361517082e-02;
                q.Weights[27] = 3.6931228361517082e-02;
                q.Weights[28] = 3.6931228361517082e-02;
                q.Weights[29] = 3.6931228361517082e-02;
                q.Weights[30] = 3.6931228361517082e-02;
                q.Weights[31] = 3.6931228361517082e-02;
                q.Weights[32] = 3.6931228361517082e-02;
                q.Weights[33] = 1.9497848991808234e-02;
                q.Weights[34] = 1.9497848991808234e-02;
                q.Weights[35] = 1.9497848991808234e-02;
                q.Weights[36] = 1.9497848991808234e-02;
                q.Weights[37] = 1.9497848991808234e-02;
                q.Weights[38] = 1.9497848991808234e-02;
                q.Weights[39] = 1.9497848991808234e-02;
                q.Weights[40] = 1.9497848991808234e-02;
                q.Weights[41] = 1.9497848991808234e-02;
                q.Weights[42] = 1.9497848991808234e-02;
                q.Weights[43] = 1.9497848991808234e-02;
                q.Weights[44] = 1.9497848991808234e-02;
                q.OrderOfPrecision = 8;
                m_QuadRules.Add(q);
            }

            #endregion QUADRULE_DEF

            foreach(var qr in this.m_QuadRules)
                qr.Nodes.LockForever();
            */
#pragma warning disable 612
            #region POLY_DEF

            OrthonormalPolynomials = new Polynomial[84];
            Polynomial p;

            p = new Polynomial(new Guid("{9EEF42AE-2769-4616-9D07-0376768A08A7}"));
            OrthonormalPolynomials[0] = p;
            p.AddCoeff(8.3001143977524119e-01, new int[] { 0, 0, 0 });


            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{CAB89B4C-AE3B-4d71-8E7F-92D3E1356716}"));
            OrthonormalPolynomials[1] = p;
            p.AddCoeff(2.2730799427612013e+00, new int[] { 0, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{EAA1B3D8-E697-472e-A28A-F411E6E73997}"));
            OrthonormalPolynomials[2] = p;
            p.AddCoeff(2.2730799427612013e+00, new int[] { 0, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E3D58E1B-ECE9-44fb-8E4D-E9880BF94C37}"));
            OrthonormalPolynomials[3] = p;
            p.AddCoeff(2.2730799427612013e+00, new int[] { 1, 0, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E592B16A-75D5-4c80-9AF4-66BFAD5864B1}"));
            OrthonormalPolynomials[4] = p;
            p.AddCoeff(-7.1317317195924811e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-1.6809652868423469e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(5.3487987896943608e+00, new int[] { 0, 0, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{CBF9550B-FF7C-4eb9-8FCE-1AF877A4090F}"));
            OrthonormalPolynomials[5] = p;
            p.AddCoeff(1.3447722294738776e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(8.5580780635109773e+00, new int[] { 0, 1, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{0B1D2779-8A27-4383-BEB6-BD3FDBD3CA6E}"));
            OrthonormalPolynomials[6] = p;
            p.AddCoeff(-6.8625120468248527e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(9.7050576085684550e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-3.4312560234124264e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.0980019274919764e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(7.7640460868547640e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(5.4900096374598822e+00, new int[] { 0, 2, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{F48B73B4-9309-4fb0-B85F-88A27CFE50B0}"));
            OrthonormalPolynomials[7] = p;
            p.AddCoeff(1.3447722294738776e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(8.5580780635109773e+00, new int[] { 1, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{6A4169DF-B99F-4d3b-8D37-9CD2E46A3010}"));
            OrthonormalPolynomials[8] = p;
            p.AddCoeff(1.6470028912379646e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.1646069130282146e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(8.2350144561898232e+00, new int[] { 1, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{CBF6EF94-E62D-4cc4-9B74-B1C531D4C863}"));
            OrthonormalPolynomials[9] = p;
            p.AddCoeff(-6.1380173732446362e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(8.6804674153242443e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-3.0690086866223181e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(1.2276034746489272e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-8.6804674153242443e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(-6.1380173732446362e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(5.5242156359201726e+00, new int[] { 2, 0, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{86CEE7FE-2A5E-4f14-B0D9-C889724FE533}"));
            OrthonormalPolynomials[10] = p;
            p.AddCoeff(6.2895961824242447e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.2872425716374197e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-8.4909548462727303e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.2008023501096454e+01, new int[] { 0, 0, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{4E8E3C33-4203-4dac-A69C-88617F556631}"));
            OrthonormalPolynomials[11] = p;
            p.AddCoeff(-2.2872425716374197e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(2.4016047002192907e+01, new int[] { 0, 1, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{37E4F89B-3319-40d7-A439-3D763700807B}"));
            OrthonormalPolynomials[12] = p;
            p.AddCoeff(-7.7813572478928862e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.2009001907280603e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(4.2797464863410874e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.6506751430460452e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-1.2450171596628618e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-4.4018003814561206e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(3.7350514789885854e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(6.2250857983143090e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(2.6410802288736723e+01, new int[] { 0, 2, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{8395F7E8-C33B-4e2d-9FC6-E4A3BCDAD56F}"));
            OrthonormalPolynomials[13] = p;
            p.AddCoeff(3.5940549613852827e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-7.6241419054580658e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(5.3910824420779240e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.2706903175763443e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(-2.6955412210389620e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(3.8120709527290329e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.3477706105194810e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-5.3910824420779240e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(3.8120709527290329e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(1.2579192364848489e+01, new int[] { 0, 3, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{02A77065-FBD8-42b7-9269-9F355A196E6C}"));
            OrthonormalPolynomials[14] = p;
            p.AddCoeff(-2.2872425716374197e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(2.4016047002192907e+01, new int[] { 1, 0, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{B6D3EA6D-36FC-433a-ACBB-2DE4613E65A4}"));
            OrthonormalPolynomials[15] = p;
            p.AddCoeff(1.8675257394942927e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(6.6027005721841809e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-5.6025772184828781e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(9.3376286974714634e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(3.9616203433105085e+01, new int[] { 1, 1, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{284F06DE-BA10-4ee3-9E6E-AE4425251A65}"));
            OrthonormalPolynomials[16] = p;
            p.AddCoeff(-1.6173247326233772e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(2.2872425716374197e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-8.0866236631168860e-01, new int[] { 1, 0, 2 });
            p.AddCoeff(3.2346494652467544e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-2.2872425716374197e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(2.2642546256727281e+01, new int[] { 1, 2, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{B00F66C5-8A10-4f33-9C2D-B36700E79D94}"));
            OrthonormalPolynomials[17] = p;
            p.AddCoeff(-6.9598575053996703e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-1.9685449752640781e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(3.8279216279698187e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.4764087314480585e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(1.3919715010799341e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(4.9213624381601952e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-4.1759145032398022e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-6.9598575053996703e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.9528174628961171e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(6.2638717548597033e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(2.6575357166065054e+01, new int[] { 2, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{A1C4AC4E-46FD-4273-A542-EB270DDA4018}"));
            OrthonormalPolynomials[18] = p;
            p.AddCoeff(-8.0365512085278738e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.7048099570709010e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-1.2054826812791811e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(2.8413499284515017e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(-1.2054826812791811e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(1.7048099570709010e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-6.0274134063959053e-01, new int[] { 0, 1, 2 });
            p.AddCoeff(4.8219307251167243e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-3.4096199141418020e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-2.8127929229847558e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(7.2328960876750864e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-5.1144298712127030e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(2.5315136306862802e+01, new int[] { 2, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{748830E0-0B63-4147-BC3B-668D27CFBE8F}"));
            OrthonormalPolynomials[19] = p;
            p.AddCoeff(-2.4705043368569470e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(3.4938207390846438e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-1.2352521684284735e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(4.9410086737138939e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-3.4938207390846438e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(-2.4705043368569470e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(1.2352521684284735e+01, new int[] { 3, 0, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E7FE3BFB-6BAE-443a-ADCA-6EFA0039F507}"));
            OrthonormalPolynomials[20] = p;
            p.AddCoeff(1.1175123546403357e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(5.1626436849693922e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-2.3467759447447050e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.9869581320180055e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(2.6401229378377932e+01, new int[] { 0, 0, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{8D7B8032-CDD2-4c8f-85D4-9948E7DB8D1F}"));
            OrthonormalPolynomials[21] = p;
            p.AddCoeff(4.2144030081382794e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-1.3410148255684029e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.7068332182960031e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(6.0345667150578130e+01, new int[] { 0, 1, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{EBB8C174-CE78-4c11-A842-543004E60CCD}"));
            OrthonormalPolynomials[22] = p;
            p.AddCoeff(5.9142972054313617e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.8894092195763674e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-7.6885863670607702e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.4371009013156143e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-5.4438417459084125e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(9.4628755286901788e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-3.9539284057360818e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.5097587775319331e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(1.2318007725562409e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-4.7314377643450894e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(1.6424010300749878e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(8.7101467934534600e+01, new int[] { 0, 2, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{7D74B4C2-2DCF-420e-BDFD-F63AD8FAF0D2}"));
            OrthonormalPolynomials[23] = p;
            p.AddCoeff(5.9600658914151239e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(8.4288060162765587e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-3.5760395348490744e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(2.9500821056967955e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-7.4500823642689049e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(-4.4700494185613429e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-9.4824067683111285e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(2.0115222383526043e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-7.9020056402592738e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(-8.9400988371226859e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.5286418048829676e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.2350247092806715e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(2.0860230619952934e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(7.3752052642419889e+01, new int[] { 0, 3, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{773D14C7-BEC7-4f7f-ADD9-DA04975EA847}"));
            OrthonormalPolynomials[24] = p;
            p.AddCoeff(2.9153058557835838e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-8.2457301594296930e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(8.7459175673507514e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-4.1228650797148465e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(7.2882646394589595e-02, new int[] { 0, 0, 4 });
            p.AddCoeff(2.9986003088059719e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-6.3609918372743346e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(4.4979004632089579e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.0601653062123891e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(-6.9967340538806011e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(9.8948761913156317e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-3.4983670269403006e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(-1.8657957477014936e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(1.3193168255087509e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(2.7986936215522404e+01, new int[] { 0, 4, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{353800BC-86E7-4e85-9D4A-962173EA5B3D}"));
            OrthonormalPolynomials[25] = p;
            p.AddCoeff(4.2144030081382794e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.3410148255684029e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-1.7068332182960031e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(6.0345667150578130e+01, new int[] { 1, 0, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E8B57576-261F-4a72-9E21-067991CC0C19}"));
            OrthonormalPolynomials[26] = p;
            p.AddCoeff(-1.4194313293035268e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(5.9308926086041227e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(2.2646381662978996e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-1.8477011588343613e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-7.0971566465176341e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(2.4636015451124817e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(1.3065220190180190e+02, new int[] { 1, 1, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{26D46E61-DACD-4676-B771-49010785D93C}"));
            OrthonormalPolynomials[27] = p;
            p.AddCoeff(-2.6820296511368058e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-5.6894440609866771e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(1.2069133430115626e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-4.7412033841555643e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(5.3640593022736115e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(1.5171850829297806e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-1.3410148255684029e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(3.7548415115915281e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(1.3275369475635580e+02, new int[] { 1, 2, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{F6E40092-ACEC-485c-8F03-3EA89CAB0B6E}"));
            OrthonormalPolynomials[28] = p;
            p.AddCoeff(-4.9976671813432865e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(1.0601653062123891e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-7.4965007720149298e-01, new int[] { 1, 0, 2 });
            p.AddCoeff(1.7669421770206485e-01, new int[] { 1, 0, 3 });
            p.AddCoeff(-1.0495101080820902e+01, new int[] { 1, 1, 0 });
            p.AddCoeff(1.4842314286973447e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-5.2475505404104508e+00, new int[] { 1, 1, 2 });
            p.AddCoeff(5.5973872431044809e+01, new int[] { 1, 3, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{301B0B26-D503-4154-908D-BDFAF2262A98}"));
            OrthonormalPolynomials[29] = p;
            p.AddCoeff(5.2899082361926253e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.5843661719149495e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-6.8768807070504129e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.2853821223471722e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-4.8691200810409392e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.0579816472385251e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(4.4206263466966241e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(1.6879616280941923e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.3771951310862560e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(5.2899082361926253e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(-1.8362601747816746e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-9.7382401620818784e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(-4.7609174125733628e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(1.6526341573035072e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(8.7644161458736905e+01, new int[] { 2, 0, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{ACA544E7-69FC-4131-97F1-E8F976F40BBA}"));
            OrthonormalPolynomials[30] = p;
            p.AddCoeff(-1.3327112483582097e+00, new int[] { 0, 0, 0 });
            p.AddCoeff(-1.8847383221553584e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(7.9962674901492584e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-6.5965841275437544e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(1.6658890604477622e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.9990668725373146e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-4.2406612248495564e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(8.9958009264179157e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-3.5338843540412970e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(7.9962674901492584e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(2.2616859865864301e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.9990668725373146e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-4.6644893692537341e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.6491460318859386e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(1.1994401235223888e+01, new int[] { 2, 0, 0 });
            p.AddCoeff(3.3925289798796451e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-2.9986003088059719e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(4.1980404323283607e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(1.4842314286973447e+02, new int[] { 2, 1, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{525677BB-4A10-4c7e-8EAB-9BC37CAE4180}"));
            OrthonormalPolynomials[31] = p;
            p.AddCoeff(1.8625205910672262e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-5.2680037601728492e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(5.5875617732016787e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.6340018800864246e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(4.6563014776680656e-02, new int[] { 0, 0, 4 });
            p.AddCoeff(-3.3525370639210072e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(7.1118050762333464e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-5.0288055958815108e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(1.1853008460388911e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(-2.7937808866008393e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(3.9510028201296369e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.3968904433004197e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(1.4900164728537810e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.0536007520345698e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-8.9400988371226859e+00, new int[] { 0, 4, 0 });
            p.AddCoeff(-1.6762685319605036e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(2.3706016920777821e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(-8.3813426598025180e-01, new int[] { 2, 0, 2 });
            p.AddCoeff(2.6820296511368058e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(-1.8964813536622257e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(8.0460889534104173e+01, new int[] { 2, 2, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{18441479-4B62-42bb-9C8F-C972D3B15D84}"));
            OrthonormalPolynomials[32] = p;
            p.AddCoeff(-4.0968679641501389e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-8.6907693572294662e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(1.8435905838675625e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-7.2423077976912218e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(8.1937359283002779e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(2.3175384952611910e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-2.0484339820750695e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-4.0968679641501389e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.4484615595382444e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(2.0484339820750695e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(7.2423077976912218e+01, new int[] { 3, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{31D95C2D-DD68-4373-B834-035EEF5551A4}"));
            OrthonormalPolynomials[33] = p;
            p.AddCoeff(-4.5804376313404411e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(9.7165755297686199e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-6.8706564470106616e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(1.6194292549614366e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(-4.5804376313404411e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(6.4777170198457466e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(-2.2902188156702205e+00, new int[] { 1, 1, 2 });
            p.AddCoeff(2.2902188156702205e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.6194292549614366e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-1.3741312894021323e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(2.2902188156702205e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(-1.6194292549614366e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(6.8706564470106616e+01, new int[] { 3, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{18C76C65-6D17-4bda-8EC5-1B7DAEA62B6B}"));
            OrthonormalPolynomials[34] = p;
            p.AddCoeff(2.4988335906716433e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-7.0677687080825940e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(7.4965007720149298e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-3.5338843540412970e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(6.2470839766791081e-02, new int[] { 0, 0, 4 });
            p.AddCoeff(-9.9953343626865730e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(2.1203306124247782e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.4993001544029860e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(3.5338843540412970e-01, new int[] { 0, 1, 3 });
            p.AddCoeff(1.4993001544029860e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.1203306124247782e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(7.4965007720149298e-01, new int[] { 0, 2, 2 });
            p.AddCoeff(-9.9953343626865730e-01, new int[] { 0, 3, 0 });
            p.AddCoeff(7.0677687080825940e-01, new int[] { 0, 3, 1 });
            p.AddCoeff(2.4988335906716433e-01, new int[] { 0, 4, 0 });
            p.AddCoeff(-7.4965007720149298e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(1.0601653062123891e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-3.7482503860074649e+00, new int[] { 2, 0, 2 });
            p.AddCoeff(1.4993001544029860e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(-1.0601653062123891e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-7.4965007720149298e+00, new int[] { 2, 2, 0 });
            p.AddCoeff(2.6237752702052254e+01, new int[] { 4, 0, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{24B3AACF-8B5E-4949-989C-F671D8497C08}"));
            OrthonormalPolynomials[35] = p;
            p.AddCoeff(-7.2891840656870914e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.4339426443553502e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(2.1867552197061274e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(1.1597020834869610e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-9.0203652812877756e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(5.7405253132604568e+01, new int[] { 0, 0, 5 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{90D04D54-9B32-48e3-8EAD-B759714AC4DE}"));
            OrthonormalPolynomials[36] = p;
            p.AddCoeff(1.8182983284301734e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(1.2027153708383701e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-4.0589572922043634e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-9.0203652812877756e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(1.4351313283151142e+02, new int[] { 0, 1, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{B939B35B-C76D-4c44-BF22-A24E8E833DA2}"));
            OrthonormalPolynomials[37] = p;
            p.AddCoeff(3.5070103187476442e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(5.0836530950591922e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-7.7154227012448172e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.7898096253373616e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(4.3399252694502097e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.5343952939355489e+01, new int[] { 0, 0, 5 });
            p.AddCoeff(5.6112165099962307e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(8.5306178765871322e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-6.3126185737457595e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-4.9100649405937563e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(3.4719402155601677e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(-2.8056082549981153e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-4.4636954005397785e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.4550324702968782e+02, new int[] { 0, 2, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{CEC32449-ADC9-4ee4-95E0-FBA0E4A28F23}"));
            OrthonormalPolynomials[38] = p;
            p.AddCoeff(-1.6198186812637981e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(2.8634619345357061e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(2.4297280218956971e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.3171924898864248e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(1.1136253433688612e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-2.8348273151903491e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(1.2148640109478486e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-2.0616925928657084e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-3.2801328295591911e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(7.5595395071742641e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-3.0067884270959252e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(2.4297280218956971e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-3.9515774696592744e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-9.3544528842984340e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(8.5044819455710472e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(-5.6693653844232933e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(8.8194627583699748e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(2.8063358652895302e+02, new int[] { 0, 3, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9D12B0AF-8D1F-4056-AFB4-3031002E2B1B}"));
            OrthonormalPolynomials[39] = p;
            p.AddCoeff(6.3385431944273556e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(2.2410134378117121e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-3.8031259166564134e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(5.1543309069669377e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-2.6938808576316261e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(5.0422802350763521e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(6.5196444285538515e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(6.9151271795332829e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-3.4228133249907720e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(2.8813029914722012e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-7.3345999821230829e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(-1.5212503666625653e+01, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.6892161253740545e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(6.0850014666502614e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-2.4202945128366490e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(-4.0566676444335076e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.0039740201396470e+02, new int[] { 0, 3, 1 });
            p.AddCoeff(9.1275021999753921e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(6.0850014666502614e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(1.9362356102693192e+02, new int[] { 0, 4, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C3366A0F-A4DE-4a72-99CA-BB3246D56EC8}"));
            OrthonormalPolynomials[40] = p;
            p.AddCoeff(-3.9677292449242475e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.4028041274990577e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-1.9838646224621238e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.4028041274990577e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-4.9596615561553094e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(7.0140206374952883e-02, new int[] { 0, 0, 5 });
            p.AddCoeff(8.6794077232717915e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-2.4549072231233509e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(2.6038223169815374e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.2274536115616755e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(2.1698519308179479e-01, new int[] { 0, 1, 4 });
            p.AddCoeff(1.3887052357234866e+01, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.9458886677480211e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.0830578535852300e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-4.9098144462467018e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-1.3887052357234866e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(1.9639257784986807e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-6.9435261786174332e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(-5.5548209428939466e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(3.9278515569973615e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(6.1103030371833412e+01, new int[] { 0, 5, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{BD977A65-2A8A-4598-B97D-A1ADA8F811BE}"));
            OrthonormalPolynomials[41] = p;
            p.AddCoeff(1.8182983284301734e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(1.2027153708383701e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-4.0589572922043634e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-9.0203652812877756e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(1.4351313283151142e+02, new int[] { 1, 0, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{A9A1924D-78A5-4998-94B9-4E6E60DBC2A4}"));
            OrthonormalPolynomials[42] = p;
            p.AddCoeff(-8.4168247649943460e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.2795926814880698e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(9.4689278606186393e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(7.3650974108906345e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-5.2079103233402516e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(-4.2084123824971730e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-6.6955431008096677e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(3.6825487054453172e+02, new int[] { 1, 1, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{2166CFA0-0EE6-4f29-AAE0-2BF3E2209CEC}"));
            OrthonormalPolynomials[43] = p;
            p.AddCoeff(7.2891840656870914e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.2370155557194250e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-1.9680796977355147e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(4.5357237043045585e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-1.8040730562575551e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(-1.4578368131374183e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(2.3709464817955647e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(5.6126717305790604e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-5.1026891673426283e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(-1.0204857691961928e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(1.5875032965065955e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(5.0514045575211544e+02, new int[] { 1, 2, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{90BBE033-0809-4a98-862F-6011987DAFE5}"));
            OrthonormalPolynomials[44] = p;
            p.AddCoeff(-1.0866074047589752e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.1525211965888805e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(5.7046888749846200e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(-4.8021716524536687e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(1.2224333303538472e+00, new int[] { 1, 0, 4 });
            p.AddCoeff(-2.2818755499938480e+01, new int[] { 1, 1, 0 });
            p.AddCoeff(-4.0338241880610817e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(9.1275021999753921e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-3.6304417692549735e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(1.2170002933300523e+02, new int[] { 1, 3, 0 });
            p.AddCoeff(3.8724712205386384e+02, new int[] { 1, 3, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C23A86B3-9ED2-4386-B588-661396519542}"));
            OrthonormalPolynomials[45] = p;
            p.AddCoeff(1.2647136968196039e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-3.5771505251225971e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(3.7941410904588117e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(-1.7885752625612985e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(3.1617842420490098e-01, new int[] { 1, 0, 4 });
            p.AddCoeff(1.1903187734772743e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-2.5250474294983038e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(1.7854781602159114e+00, new int[] { 1, 1, 2 });
            p.AddCoeff(-4.2084123824971730e-01, new int[] { 1, 1, 3 });
            p.AddCoeff(-3.9280519524750051e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(5.5551043448962684e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-1.9640259762375025e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(-2.3806375469545485e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(1.6833649529988692e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(1.3093506508250017e+02, new int[] { 1, 4, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{A780AF61-7A38-4b77-8334-61EDBEE2DDD9}"));
            OrthonormalPolynomials[46] = p;
            p.AddCoeff(3.1367653882051750e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(4.5469575578318216e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-6.9008838540513850e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.4952815866150240e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(3.8817471679039041e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.3724048726382632e+01, new int[] { 0, 0, 5 });
            p.AddCoeff(-6.2735307764103500e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-9.5375207310618696e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(7.0577221234616437e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(5.4896194905530529e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-3.8817471679039041e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(3.1367653882051750e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(4.9905631732300481e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-2.7448097452765264e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(-2.8230888493846575e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-4.4915068559070433e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(2.4703287707488738e+02, new int[] { 2, 0, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9C6008DA-1541-422e-B0D2-C73C221749E8}"));
            OrthonormalPolynomials[47] = p;
            p.AddCoeff(3.6220246825299175e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-6.4028955366048916e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-5.4330370237948762e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(2.9453319468382501e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-2.4901419692393183e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(6.3388665812388427e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(5.4330370237948762e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-9.2201695727110439e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.4669199964246166e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(3.3807288433273828e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-1.3446766633892319e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(-2.1732148095179505e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(3.5343983362059002e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(8.3668770166441094e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-7.6066398974866112e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(1.2677086388854711e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.9720918252743066e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-6.2751577624830821e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(-3.2598222142769257e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(5.3015975043088502e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(1.2550315524966164e+02, new int[] { 2, 0, 2 });
            p.AddCoeff(-1.1409959846229917e+02, new int[] { 2, 0, 3 });
            p.AddCoeff(-1.1409377749969240e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(1.7748826427468759e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(5.6476419862347738e+02, new int[] { 2, 1, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{691C560F-4E21-4629-B73D-0492CC0D1738}"));
            OrthonormalPolynomials[48] = p;
            p.AddCoeff(4.0495467031594952e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.4317309672678531e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-2.4297280218956971e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(3.2929812247160620e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-1.7210573488427855e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(3.2213946763526694e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(-7.2891840656870914e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-7.7313472232464065e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(3.8268216344857230e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-3.2213946763526694e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(8.2003320738979778e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(-6.0743200547392428e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-1.0737982254508898e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.4297280218956971e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-9.6641840290580081e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(3.2396373625275962e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(8.0176934166999771e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-7.2891840656870914e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(-1.9437824175165577e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(-6.1850777785971252e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(-3.6445920328435457e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-6.4427893527053388e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(1.4578368131374183e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(-5.7985104174348049e+00, new int[] { 2, 0, 3 });
            p.AddCoeff(5.8313472525496731e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(1.4431848150059959e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(-1.3120531318236765e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(1.7494041757649019e+02, new int[] { 2, 2, 0 });
            p.AddCoeff(5.5665700007374127e+02, new int[] { 2, 2, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E5AF691F-AB0C-400f-9AF8-CFCDF441CB72}"));
            OrthonormalPolynomials[49] = p;
            p.AddCoeff(4.4360561539822650e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-1.5683826941025875e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(2.2180280769911325e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.5683826941025875e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(5.5450701924778312e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(-7.8419134705129375e-02, new int[] { 0, 0, 5 });
            p.AddCoeff(1.7744224615929060e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-5.0188246211282800e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(5.3232673847787179e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-2.5094123105641400e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(4.4360561539822650e-01, new int[] { 0, 1, 4 });
            p.AddCoeff(-1.1533746000353889e+01, new int[] { 0, 2, 0 });
            p.AddCoeff(2.4466770028000365e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.7300619000530833e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(4.0777950046667275e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-8.4285066925663034e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(1.1919708475179665e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-4.2142533462831517e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(4.2142533462831517e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(-2.9799271187949162e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(-2.4398308846902457e+01, new int[] { 0, 5, 0 });
            p.AddCoeff(-3.9924505385840385e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(8.4692665481539725e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(-5.9886758078760577e+00, new int[] { 2, 0, 2 });
            p.AddCoeff(1.4115444246923287e+00, new int[] { 2, 0, 3 });
            p.AddCoeff(-2.3954703231504231e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(3.3877066192615890e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-1.1977351615752115e+01, new int[] { 2, 1, 2 });
            p.AddCoeff(5.9886758078760577e+01, new int[] { 2, 2, 0 });
            p.AddCoeff(-4.2346332740769862e+01, new int[] { 2, 2, 1 });
            p.AddCoeff(2.1958477962212212e+02, new int[] { 2, 3, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{41176092-D412-4913-B0DD-99949E1865AD}"));
            OrthonormalPolynomials[50] = p;
            p.AddCoeff(1.1134412578492353e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.8895724733073763e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-3.0062913961929352e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(6.9284324021270464e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-2.7557671131768573e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(-2.2268825156984706e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(3.6216805738391379e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(8.5734976854391116e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-7.7944864523929272e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(1.1134412578492353e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.7321081005317616e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-5.5115342263537146e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(-5.5672062892461764e+00, new int[] { 3, 0, 0 });
            p.AddCoeff(8.6605405026588079e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(2.7557671131768573e+02, new int[] { 3, 0, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{26C9BC83-4932-4694-9FC7-72A2ECC4A7FE}"));
            OrthonormalPolynomials[51] = p;
            p.AddCoeff(-9.9589213660150455e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.0563031246819251e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(5.2284337171578989e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-4.4012630195080211e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(1.1203786536766926e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(-9.9589213660150455e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-1.7605052078032084e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(3.9835685464060182e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-1.5844546870228876e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(4.9794606830075227e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(1.2323536454622459e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(-1.1203786536766926e+02, new int[] { 1, 2, 2 });
            p.AddCoeff(-2.9876764098045136e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(-9.5067281221373255e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(4.9794606830075227e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(1.2323536454622459e+02, new int[] { 3, 0, 1 });
            p.AddCoeff(-1.1203786536766926e+02, new int[] { 3, 0, 2 });
            p.AddCoeff(1.4938382049022568e+02, new int[] { 3, 1, 0 });
            p.AddCoeff(4.7533640610686628e+02, new int[] { 3, 1, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{A74C12F6-1EFD-4759-AACA-E14F496FCD5A}"));
            OrthonormalPolynomials[52] = p;
            p.AddCoeff(-9.0912098009776720e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(2.5713824397843660e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-2.7273629402933016e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(1.2856912198921830e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(-2.2728024502444180e-01, new int[] { 1, 0, 4 });
            p.AddCoeff(-2.0909782542248646e+01, new int[] { 1, 1, 0 });
            p.AddCoeff(4.4356347086280313e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-3.1364673813372968e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(7.3927245143800522e+00, new int[] { 1, 1, 3 });
            p.AddCoeff(-5.4547258805866032e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(7.7141473193530980e+00, new int[] { 1, 2, 1 });
            p.AddCoeff(-2.7273629402933016e+00, new int[] { 1, 2, 2 });
            p.AddCoeff(7.7275283308310212e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(-5.4641876845417777e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(-5.0001653905377196e+01, new int[] { 1, 4, 0 });
            p.AddCoeff(4.5456049004888360e+00, new int[] { 3, 0, 0 });
            p.AddCoeff(-6.4284560994609150e+00, new int[] { 3, 0, 1 });
            p.AddCoeff(2.2728024502444180e+00, new int[] { 3, 0, 2 });
            p.AddCoeff(1.1364012251222090e+02, new int[] { 3, 1, 0 });
            p.AddCoeff(-8.0355701243261437e+01, new int[] { 3, 1, 1 });
            p.AddCoeff(2.5000826952688598e+02, new int[] { 3, 2, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{1D9771DD-C568-4225-BD02-414DD3B111A3}"));
            OrthonormalPolynomials[53] = p;
            p.AddCoeff(5.4330370237948762e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.9208686609814675e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-3.2598222142769257e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(4.4179979202573752e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-2.3090407351128224e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(4.3219544872083018e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(-2.1732148095179505e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-2.3050423931777610e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(1.1409377749969240e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-9.6043433049073374e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(2.4448666607076943e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(3.2598222142769257e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(5.7626059829444024e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.3039288857107703e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(5.1863453846499622e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-2.1732148095179505e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-5.3784322507481089e+00, new int[] { 0, 3, 1 });
            p.AddCoeff(4.8897333214153886e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(5.4330370237948762e-01, new int[] { 0, 4, 0 });
            p.AddCoeff(1.7287817948833207e+00, new int[] { 0, 4, 1 });
            p.AddCoeff(-1.6299111071384629e+01, new int[] { 2, 0, 0 });
            p.AddCoeff(-2.8813029914722012e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(6.5196444285538515e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(-2.5931726923249811e+01, new int[] { 2, 0, 3 });
            p.AddCoeff(3.2598222142769257e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(8.0676483761221634e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-7.3345999821230829e+01, new int[] { 2, 1, 2 });
            p.AddCoeff(-1.6299111071384629e+01, new int[] { 2, 2, 0 });
            p.AddCoeff(-5.1863453846499622e+01, new int[] { 2, 2, 1 });
            p.AddCoeff(5.7046888749846200e+01, new int[] { 4, 0, 0 });
            p.AddCoeff(1.8152208846274868e+02, new int[] { 4, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9501A7A8-5ABA-4e96-9AFD-51693C46EF02}"));
            OrthonormalPolynomials[54] = p;
            p.AddCoeff(5.9515938673863713e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.1042061912485865e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(2.9757969336931857e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.1042061912485865e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(7.4394923342329641e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.0521030956242933e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(-7.4394923342329641e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(2.1042061912485865e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-2.2318477002698892e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(1.0521030956242933e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(-1.8598730835582410e-01, new int[] { 0, 1, 4 });
            p.AddCoeff(-2.9757969336931857e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(6.3126185737457595e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-4.4636954005397785e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(1.0521030956242933e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(7.4394923342329641e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.0521030956242933e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(3.7197461671164821e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(-5.9515938673863713e+00, new int[] { 0, 4, 0 });
            p.AddCoeff(4.2084123824971730e+00, new int[] { 0, 4, 1 });
            p.AddCoeff(1.6366883135312521e+00, new int[] { 0, 5, 0 });
            p.AddCoeff(-1.7854781602159114e+01, new int[] { 2, 0, 0 });
            p.AddCoeff(3.7875711442474557e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-2.6782172403238671e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(6.3126185737457595e+00, new int[] { 2, 0, 3 });
            p.AddCoeff(-1.3391086201619335e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(1.8937855721237279e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-6.6955431008096677e+00, new int[] { 2, 1, 2 });
            p.AddCoeff(8.0346517209716013e+01, new int[] { 2, 2, 0 });
            p.AddCoeff(-5.6813567163711836e+01, new int[] { 2, 2, 1 });
            p.AddCoeff(-4.9100649405937563e+01, new int[] { 2, 3, 0 });
            p.AddCoeff(6.2491735607556899e+01, new int[] { 4, 0, 0 });
            p.AddCoeff(-4.4188330016220317e+01, new int[] { 4, 0, 1 });
            p.AddCoeff(1.7185227292078147e+02, new int[] { 4, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9D7F1F24-6FC6-40e7-BE8B-C8B78EEE1FAA}"));
            OrthonormalPolynomials[55] = p;
            p.AddCoeff(1.4245543257480231e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-4.0292480956202284e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(4.2736629772440693e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(-2.0146240478101142e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(3.5613858143700577e-01, new int[] { 1, 0, 4 });
            p.AddCoeff(-5.6982173029920924e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(1.2087744286860685e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-8.5473259544881386e+00, new int[] { 1, 1, 2 });
            p.AddCoeff(2.0146240478101142e+00, new int[] { 1, 1, 3 });
            p.AddCoeff(8.5473259544881386e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.2087744286860685e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(4.2736629772440693e+00, new int[] { 1, 2, 2 });
            p.AddCoeff(-5.6982173029920924e+00, new int[] { 1, 3, 0 });
            p.AddCoeff(4.0292480956202284e+00, new int[] { 1, 3, 1 });
            p.AddCoeff(1.4245543257480231e+00, new int[] { 1, 4, 0 });
            p.AddCoeff(-1.9943760560472323e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(2.8204736669341599e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(-9.9718802802361617e+00, new int[] { 3, 0, 2 });
            p.AddCoeff(3.9887521120944647e+01, new int[] { 3, 1, 0 });
            p.AddCoeff(-2.8204736669341599e+01, new int[] { 3, 1, 1 });
            p.AddCoeff(-1.9943760560472323e+01, new int[] { 3, 2, 0 });
            p.AddCoeff(5.3848153513275273e+01, new int[] { 5, 0, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{73901700-63F3-4ffb-8D17-84C05F4867CA}"));
            OrthonormalPolynomials[56] = p;
            p.AddCoeff(5.9584717575524521e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-4.3427178702358910e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-2.4131810618087431e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(6.5659817998188073e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(8.6296455841487562e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-2.5050647953656536e+02, new int[] { 0, 0, 5 });
            p.AddCoeff(1.2399438128803213e+02, new int[] { 0, 0, 6 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C3175CA7-8FE3-491e-BC62-A2887D85599B}"));
            OrthonormalPolynomials[57] = p;
            p.AddCoeff(-2.0069931193122046e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(6.6064272414535933e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(7.9933691476055045e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-7.2670699655989526e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-3.3400863938208715e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(3.3065168343475234e+02, new int[] { 0, 1, 5 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{6358E672-8DDC-4d0a-A1AF-48A2C7F48223}"));
            OrthonormalPolynomials[58] = p;
            p.AddCoeff(-7.8874355122758918e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.6648534737020518e-02, new int[] { 0, 0, 1 });
            p.AddCoeff(2.5634165414896648e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.3735041158041927e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-9.7607014464414160e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(1.2320331918763608e+02, new int[] { 0, 0, 5 });
            p.AddCoeff(-3.9771216341470247e+01, new int[] { 0, 0, 6 });
            p.AddCoeff(-1.2619896819641427e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-8.6572380632506691e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(4.0402505489747553e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(6.5928197558601249e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(-1.5150939558655332e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(8.9991989667490705e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(6.3099484098207134e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(8.7904263411468333e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.9579675737339199e+02, new int[] { 0, 2, 2 });
            p.AddCoeff(-1.7141331365236325e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(6.3633946146352396e+02, new int[] { 0, 2, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{2B8EF0D9-0392-4430-ACC2-18495D731515}"));
            OrthonormalPolynomials[59] = p;
            p.AddCoeff(-4.3499109408747939e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-2.2146130971720878e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(1.1092272899230725e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(9.8427248763203903e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-4.4695334917488508e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(3.5987462829046427e+01, new int[] { 0, 0, 5 });
            p.AddCoeff(-8.9064426514411406e+00, new int[] { 0, 0, 6 });
            p.AddCoeff(3.2624332056560954e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(1.8916486871678250e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-6.9816070601040443e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.2318785353019739e+02, new int[] { 0, 1, 3 });
            p.AddCoeff(2.4810804529014606e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(-9.4467089926246871e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(6.5248664113121909e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(4.2446751029131683e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.0961775571004481e+02, new int[] { 0, 2, 2 });
            p.AddCoeff(-3.2388716546141784e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(2.6719327954323422e+02, new int[] { 0, 2, 4 });
            p.AddCoeff(-1.5224688293061779e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.0980789940144935e+02, new int[] { 0, 3, 1 });
            p.AddCoeff(1.7812885302882281e+02, new int[] { 0, 3, 2 });
            p.AddCoeff(8.8169283931163747e+02, new int[] { 0, 3, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{6E9C9B76-31C3-4448-AB77-A3E1A4CF3531}"));
            OrthonormalPolynomials[60] = p;
            p.AddCoeff(6.3831446174121332e-02, new int[] { 0, 0, 0 });
            p.AddCoeff(3.3400379847572321e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-1.0532188618730020e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.4172593610996904e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(2.1176082268264752e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.1441886880215653e+01, new int[] { 0, 0, 5 });
            p.AddCoeff(2.1782481006918905e+00, new int[] { 0, 0, 6 });
            p.AddCoeff(6.5655201779096227e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(3.4818928798627516e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(1.3787592373610208e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.3602594850663816e+02, new int[] { 0, 1, 3 });
            p.AddCoeff(1.2162626129577576e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(-3.1685225206751040e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(-1.5319547081789120e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-8.2327422759421505e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-9.0385327782555806e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(2.5348180165400832e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(-1.0455590883321074e+02, new int[] { 0, 2, 4 });
            p.AddCoeff(-4.0852125551437653e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-2.2242847552545459e+02, new int[] { 0, 3, 1 });
            p.AddCoeff(-3.9830822412651711e+02, new int[] { 0, 3, 2 });
            p.AddCoeff(3.9430502479512405e+02, new int[] { 0, 3, 3 });
            p.AddCoeff(6.1278188327156479e+00, new int[] { 0, 4, 0 });
            p.AddCoeff(3.3797573553867776e+02, new int[] { 0, 4, 1 });
            p.AddCoeff(8.3644727066568594e+02, new int[] { 0, 4, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{DE24BD46-DECE-40ac-BF06-1A3EB0DC8D8A}"));
            OrthonormalPolynomials[61] = p;
            p.AddCoeff(-1.0655062231693131e+00, new int[] { 0, 0, 0 });
            p.AddCoeff(6.0274134063959053e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(5.8602842274312222e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.2054826812791811e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(9.8559325643161464e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(-3.7671333789974408e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(5.5939076716388939e-01, new int[] { 0, 0, 6 });
            p.AddCoeff(2.3307948631828725e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(3.2962417066227607e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.2586292261187511e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(1.7470081045100632e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-9.2066397095723462e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(1.7305268959769494e+00, new int[] { 0, 1, 5 });
            p.AddCoeff(3.7292717810925959e+01, new int[] { 0, 2, 0 });
            p.AddCoeff(3.1643920383578503e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.7900504549244460e+02, new int[] { 0, 2, 2 });
            p.AddCoeff(1.5294561518729610e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(-3.9157353701472257e+01, new int[] { 0, 2, 4 });
            p.AddCoeff(-3.7292717810925959e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-5.8013854036560589e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(1.3798305590042605e+02, new int[] { 0, 3, 2 });
            p.AddCoeff(-5.5376860671262380e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(-1.4917087124370384e+02, new int[] { 0, 4, 0 });
            p.AddCoeff(-3.3753515075817070e+02, new int[] { 0, 4, 1 });
            p.AddCoeff(3.1325882961177806e+02, new int[] { 0, 4, 2 });
            p.AddCoeff(1.6408795836807422e+02, new int[] { 0, 5, 0 });
            p.AddCoeff(4.8731637390710895e+02, new int[] { 0, 5, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{AAD4EBC5-F9CE-4af6-96CA-A808EB1EA4AF}"));
            OrthonormalPolynomials[62] = p;
            p.AddCoeff(1.7982472773177645e-02, new int[] { 0, 0, 0 });
            p.AddCoeff(-7.6293170642498241e-02, new int[] { 0, 0, 1 });
            p.AddCoeff(1.3486854579883234e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.2715528440416374e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(6.7434272899416169e-02, new int[] { 0, 0, 4 });
            p.AddCoeff(-1.9073292660624560e-02, new int[] { 0, 0, 5 });
            p.AddCoeff(2.2478090966472056e-03, new int[] { 0, 0, 6 });
            p.AddCoeff(-3.2800030338276025e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(1.1596561937659733e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.6400015169138012e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(1.1596561937659733e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-4.1000037922845031e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(5.7982809688298663e-01, new int[] { 0, 1, 5 });
            p.AddCoeff(-8.6315869311252696e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(2.4413814605599437e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-2.5894760793375809e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(1.2206907302799719e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-2.1578967327813174e-01, new int[] { 0, 2, 4 });
            p.AddCoeff(4.9487765071784879e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.0497940280407758e+02, new int[] { 0, 3, 1 });
            p.AddCoeff(7.4231647607677319e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(-1.7496567134012930e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(-1.8989491248475593e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(2.6855196066159381e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(-9.4947456242377966e+00, new int[] { 0, 4, 2 });
            p.AddCoeff(-1.5191592998780475e+02, new int[] { 0, 5, 0 });
            p.AddCoeff(1.0742078426463752e+02, new int[] { 0, 5, 1 });
            p.AddCoeff(1.3166047265609745e+02, new int[] { 0, 6, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C8EFF6AD-1493-41cd-AE5C-E73B970A149D}"));
            OrthonormalPolynomials[63] = p;
            p.AddCoeff(-2.0069931193122046e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(6.6064272414535933e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(7.9933691476055045e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-7.2670699655989526e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-3.3400863938208715e+02, new int[] { 1, 0, 4 });
            p.AddCoeff(3.3065168343475234e+02, new int[] { 1, 0, 5 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{77565A59-FF9D-45b1-B351-F999CE51479E}"));
            OrthonormalPolynomials[64] = p;
            p.AddCoeff(1.8929845229462140e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(1.2985857094876004e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-6.0603758234621330e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-9.8892296337901874e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(2.2726409337982999e+02, new int[] { 1, 0, 4 });
            p.AddCoeff(-1.3498798450123606e+02, new int[] { 1, 0, 5 });
            p.AddCoeff(9.4649226147310701e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(1.3185639511720250e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-2.9369513606008798e+02, new int[] { 1, 1, 2 });
            p.AddCoeff(-2.5711997047854487e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(9.5450919219528594e+02, new int[] { 1, 1, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{46020A78-0C18-4eb3-A79D-0AB038600C29}"));
            OrthonormalPolynomials[65] = p;
            p.AddCoeff(1.9574599233936573e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(1.1349892123006950e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-4.1889642360624266e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-7.3912712118118431e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(1.4886482717408764e+02, new int[] { 1, 0, 4 });
            p.AddCoeff(-5.6680253955748123e+01, new int[] { 1, 0, 5 });
            p.AddCoeff(-3.9149198467873145e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-2.5468050617479010e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(6.5770653426026884e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(1.9433229927685071e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(-1.6031596772594053e+02, new int[] { 1, 1, 4 });
            p.AddCoeff(-2.7404438927511202e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.9765421892260884e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(3.2063193545188106e+02, new int[] { 1, 2, 2 });
            p.AddCoeff(1.5870471107609474e+03, new int[] { 1, 2, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{3A013548-CEF6-4608-8835-8E1F2144A378}"));
            OrthonormalPolynomials[66] = p;
            p.AddCoeff(-1.0942533629849371e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(-5.8031547997712527e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(-2.2979320622683680e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(2.2670991417773027e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-2.0271043549295960e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(5.2808708677918400e+00, new int[] { 1, 0, 5 });
            p.AddCoeff(-2.2979320622683680e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-1.2349113413913226e+02, new int[] { 1, 1, 1 });
            p.AddCoeff(-1.3557799167383371e+02, new int[] { 1, 1, 2 });
            p.AddCoeff(3.8022270248101248e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(-1.5683386324981611e+02, new int[] { 1, 1, 4 });
            p.AddCoeff(1.2255637665431296e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(6.7595147107735552e+02, new int[] { 1, 3, 1 });
            p.AddCoeff(1.6728945413313719e+03, new int[] { 1, 3, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{6879049B-D24D-4905-A779-8AA0E5B8C74C}"));
            OrthonormalPolynomials[67] = p;
            p.AddCoeff(3.3963010863521856e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(4.8030950582217371e-01, new int[] { 1, 0, 1 });
            p.AddCoeff(-1.8340025866301802e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(2.5456403808575206e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-1.3415389291091133e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(2.5216249055664120e+00, new int[] { 1, 0, 5 });
            p.AddCoeff(3.1965186695079394e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(2.7123360328781574e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(-1.5343289613638109e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(1.3109624158911094e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(-3.3563446029833363e+00, new int[] { 1, 1, 4 });
            p.AddCoeff(-1.0548511609376200e+02, new int[] { 1, 2, 0 });
            p.AddCoeff(-1.6409632998912852e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(3.9029492954691940e+02, new int[] { 1, 2, 2 });
            p.AddCoeff(-1.5663740589871359e+02, new int[] { 1, 2, 3 });
            p.AddCoeff(-6.3930373390158787e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(-1.4465792175350173e+02, new int[] { 1, 3, 1 });
            p.AddCoeff(1.3425378411933345e+02, new int[] { 1, 3, 2 });
            p.AddCoeff(3.5161705364587333e+02, new int[] { 1, 4, 0 });
            p.AddCoeff(1.0442493726580906e+03, new int[] { 1, 4, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C0100718-6175-4540-AADF-2323B5C7442C}"));
            OrthonormalPolynomials[68] = p;
            p.AddCoeff(-2.5894760793375809e-01, new int[] { 1, 0, 0 });
            p.AddCoeff(9.1551804770997889e-01, new int[] { 1, 0, 1 });
            p.AddCoeff(-1.2947380396687904e+00, new int[] { 1, 0, 2 });
            p.AddCoeff(9.1551804770997889e-01, new int[] { 1, 0, 3 });
            p.AddCoeff(-3.2368450991719761e-01, new int[] { 1, 0, 4 });
            p.AddCoeff(4.5775902385498945e-02, new int[] { 1, 0, 5 });
            p.AddCoeff(9.0631662776815331e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-2.5634505335879409e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(2.7189498833044599e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-1.2817252667939705e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(2.2657915694203833e+00, new int[] { 1, 1, 4 });
            p.AddCoeff(2.0715808634700647e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(-4.3944866290078987e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(3.1073712952050971e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(-7.3241443816798312e+00, new int[] { 1, 2, 3 });
            p.AddCoeff(-1.1393694749085356e+02, new int[] { 1, 3, 0 });
            p.AddCoeff(1.6113117639695629e+02, new int[] { 1, 3, 1 });
            p.AddCoeff(-5.6968473745426780e+01, new int[] { 1, 3, 2 });
            p.AddCoeff(-1.1393694749085356e+02, new int[] { 1, 4, 0 });
            p.AddCoeff(8.0565588198478143e+01, new int[] { 1, 4, 1 });
            p.AddCoeff(2.9623606347621925e+02, new int[] { 1, 5, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{1DD2D1F7-2A9E-499f-BBF5-ADDA30E55B52}"));
            OrthonormalPolynomials[69] = p;
            p.AddCoeff(-7.0547367894379084e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.4890902159097785e-02, new int[] { 0, 0, 1 });
            p.AddCoeff(2.2927894565673202e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.2284994281255672e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-8.7302367769294116e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(1.1019639870286338e+02, new int[] { 0, 0, 5 });
            p.AddCoeff(-3.5572457314951185e+01, new int[] { 0, 0, 6 });
            p.AddCoeff(1.4109473578875817e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(9.6790864034135601e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(-4.5171374368191981e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-7.3709965687534034e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(1.6939265388071993e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(-1.0061410316348396e+02, new int[] { 0, 1, 5 });
            p.AddCoeff(-7.0547367894379084e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(-9.8279954250045379e-01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.1890742963046883e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(1.9164591078758849e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(-7.1144914629902369e+01, new int[] { 0, 2, 4 });
            p.AddCoeff(6.3492631104941175e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(8.8451958825040841e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(-1.9701668666742195e+02, new int[] { 2, 0, 2 });
            p.AddCoeff(-1.7248131970882964e+02, new int[] { 2, 0, 3 });
            p.AddCoeff(6.4030423166912132e+02, new int[] { 2, 0, 4 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{394C31B3-4BC4-4e6c-BD81-C560EBEE59C0}"));
            OrthonormalPolynomials[70] = p;
            p.AddCoeff(9.7266965598661077e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(4.9520254291381357e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-2.4803076227658575e+01, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.2009001907280603e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(9.9941807152624257e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-8.0470413223494704e+01, new int[] { 0, 0, 5 });
            p.AddCoeff(1.9915411206325856e+01, new int[] { 0, 0, 6 });
            p.AddCoeff(1.4590044839799162e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(8.4597101081109817e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(-3.1222695957170206e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-5.5091282899161759e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(1.1095729100667262e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(-4.2246966942334720e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(-5.8360179359196646e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-3.7965528290059040e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(9.8045101323450366e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(2.8969348760458094e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(-2.3898493447591027e+02, new int[] { 0, 2, 4 });
            p.AddCoeff(3.4043437959531377e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(2.4553792752809923e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-3.9830822412651711e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(-1.9715251239756203e+02, new int[] { 0, 3, 3 });
            p.AddCoeff(-8.7540269038794970e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-5.6948292435088560e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(1.4706765198517555e+02, new int[] { 2, 0, 2 });
            p.AddCoeff(4.3454023140687140e+02, new int[] { 2, 0, 3 });
            p.AddCoeff(-3.5847740171386540e+02, new int[] { 2, 0, 4 });
            p.AddCoeff(-3.0639094163578239e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(-2.2098413477528930e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(3.5847740171386540e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(1.7743726115780582e+03, new int[] { 2, 1, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9BAB9EE5-31AA-45bd-8C6E-6516BDF2C5FE}"));
            OrthonormalPolynomials[71] = p;
            p.AddCoeff(4.0780415070701193e-02, new int[] { 0, 0, 0 });
            p.AddCoeff(2.1338719946710221e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-6.7287684866656969e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-9.0545379233337966e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(1.3528902699705121e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-7.3099533871500555e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(1.3916316642876782e+00, new int[] { 0, 0, 6 });
            p.AddCoeff(-7.3404747127262148e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-3.8928745848728106e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-1.5414996896725051e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(1.5208163378236447e+02, new int[] { 0, 1, 3 });
            p.AddCoeff(-1.3598229405325313e+02, new int[] { 0, 1, 4 });
            p.AddCoeff(3.5425158722342577e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(-6.1170622606051790e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(-3.2873163161148179e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-3.6090667337570556e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(1.0121473920669308e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(-4.1748949928630346e+01, new int[] { 0, 2, 4 });
            p.AddCoeff(3.2624332056560954e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(1.7763042550234454e+02, new int[] { 0, 3, 1 });
            p.AddCoeff(3.1808723755146931e+02, new int[] { 0, 3, 2 });
            p.AddCoeff(-3.1489029975415624e+02, new int[] { 0, 3, 3 });
            p.AddCoeff(-1.9574599233936573e+00, new int[] { 0, 4, 0 });
            p.AddCoeff(-1.0796238848713928e+02, new int[] { 0, 4, 1 });
            p.AddCoeff(-2.6719327954323422e+02, new int[] { 0, 4, 2 });
            p.AddCoeff(-3.6702373563631074e-01, new int[] { 2, 0, 0 });
            p.AddCoeff(-1.9723897896688907e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-2.1654400402542334e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(6.0728843524015846e+01, new int[] { 2, 0, 3 });
            p.AddCoeff(-2.5049369957178208e+01, new int[] { 2, 0, 4 });
            p.AddCoeff(5.8723797701809718e+00, new int[] { 2, 1, 0 });
            p.AddCoeff(3.1973476590422018e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(5.7255702759264475e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(-5.6680253955748123e+02, new int[] { 2, 1, 3 });
            p.AddCoeff(1.7617139310542915e+01, new int[] { 2, 2, 0 });
            p.AddCoeff(9.7166149638425353e+02, new int[] { 2, 2, 1 });
            p.AddCoeff(2.4047395158891080e+03, new int[] { 2, 2, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{C5E83B5C-2232-471a-8834-5B8DA1CDED13}"));
            OrthonormalPolynomials[72] = p;
            p.AddCoeff(1.1912721727278228e+00, new int[] { 0, 0, 0 });
            p.AddCoeff(-6.7388530525974050e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-6.5519969500030253e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.3477706105194810e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-1.1019267597732361e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(4.2117831578733781e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(-6.2541789068210696e-01, new int[] { 0, 0, 6 });
            p.AddCoeff(4.7650886909112911e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(6.7388530525974050e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(-2.5731478930920972e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(3.5715921178766247e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-1.8822100329099600e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(3.5378978526136376e+00, new int[] { 0, 1, 5 });
            p.AddCoeff(-3.0973076490923392e+01, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.6281526905129880e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(1.4867076715643228e+02, new int[] { 0, 2, 2 });
            p.AddCoeff(-1.2702738004146108e+02, new int[] { 0, 2, 3 });
            p.AddCoeff(3.2521730315469562e+01, new int[] { 0, 2, 4 });
            p.AddCoeff(-2.2634171281828633e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(-3.5210507199821441e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(8.3746433742765941e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(-3.3610029599829558e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(1.1317085640914316e+02, new int[] { 0, 4, 0 });
            p.AddCoeff(2.5607641599870139e+02, new int[] { 0, 4, 1 });
            p.AddCoeff(-2.3765879845920064e+02, new int[] { 0, 4, 2 });
            p.AddCoeff(-6.5519969500030253e+01, new int[] { 0, 5, 0 });
            p.AddCoeff(-1.9458438189375007e+02, new int[] { 0, 5, 1 });
            p.AddCoeff(-1.0721449554550405e+01, new int[] { 2, 0, 0 });
            p.AddCoeff(-9.0974516210064968e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(5.1462957861841944e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(-4.3971016168198068e+01, new int[] { 2, 0, 3 });
            p.AddCoeff(1.1257522032277925e+01, new int[] { 2, 0, 4 });
            p.AddCoeff(-6.4328697327302430e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(-1.0007196783107146e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(2.3801618011101899e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(-9.5523242020568216e+01, new int[] { 2, 1, 3 });
            p.AddCoeff(1.6082174331825607e+02, new int[] { 2, 2, 0 });
            p.AddCoeff(3.6389806484025987e+02, new int[] { 2, 2, 1 });
            p.AddCoeff(-3.3772566096833776e+02, new int[] { 2, 2, 2 });
            p.AddCoeff(5.8967972550027227e+02, new int[] { 2, 3, 0 });
            p.AddCoeff(1.7512594370437506e+03, new int[] { 2, 3, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{40591845-8797-498d-A645-8DAD2A5AC4F8}"));
            OrthonormalPolynomials[73] = p;
            p.AddCoeff(-2.4662152668276814e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(1.0463265234237866e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-1.8496614501207611e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.7438775390396443e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(-9.2483072506038054e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(2.6158163085594664e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(-3.0827690835346018e-02, new int[] { 0, 0, 6 });
            p.AddCoeff(2.6377780679983028e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-9.3259537957337497e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(1.3188890339991514e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-9.3259537957337497e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(3.2972225849978784e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(-4.6629768978668749e-01, new int[] { 0, 1, 5 });
            p.AddCoeff(9.6182395406279576e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-2.7204489609018450e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(2.8854718621883873e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-1.3602244804509225e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(2.4045598851569894e+00, new int[] { 0, 2, 4 });
            p.AddCoeff(-3.5599281242903923e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(7.5517479516673290e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-5.3398921864355885e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(1.2586246586112215e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(-2.8307862193152517e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(4.0033362635344877e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(-1.4153931096576259e+01, new int[] { 0, 4, 2 });
            p.AddCoeff(1.1323144877261007e+02, new int[] { 0, 5, 0 });
            p.AddCoeff(-8.0066725270689754e+01, new int[] { 0, 5, 1 });
            p.AddCoeff(-6.1333701418497121e+01, new int[] { 0, 6, 0 });
            p.AddCoeff(2.2195937401449133e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-6.2779591405427193e+00, new int[] { 2, 0, 1 });
            p.AddCoeff(6.6587812204347399e+00, new int[] { 2, 0, 2 });
            p.AddCoeff(-3.1389795702713597e+00, new int[] { 2, 0, 3 });
            p.AddCoeff(5.5489843503622832e-01, new int[] { 2, 0, 4 });
            p.AddCoeff(-1.9300815131694898e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(4.0943211786148170e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-2.8951222697542347e+01, new int[] { 2, 1, 2 });
            p.AddCoeff(6.8238686310246949e+00, new int[] { 2, 1, 3 });
            p.AddCoeff(-1.2738537986918633e+02, new int[] { 2, 2, 0 });
            p.AddCoeff(1.8015013185905195e+02, new int[] { 2, 2, 1 });
            p.AddCoeff(-6.3692689934593164e+01, new int[] { 2, 2, 2 });
            p.AddCoeff(8.4923586579457552e+01, new int[] { 2, 3, 0 });
            p.AddCoeff(-6.0050043953017315e+01, new int[] { 2, 3, 1 });
            p.AddCoeff(5.5200331276647409e+02, new int[] { 2, 4, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{9D257E64-0EE8-4020-9C15-CC029EC0873D}"));
            OrthonormalPolynomials[74] = p;
            p.AddCoeff(2.9900694229312981e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(1.7337246594420796e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-6.3987485650729779e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-1.1290353270025250e+02, new int[] { 1, 0, 3 });
            p.AddCoeff(2.2739477961392522e+02, new int[] { 1, 0, 4 });
            p.AddCoeff(-8.6580518053845318e+01, new int[] { 1, 0, 5 });
            p.AddCoeff(-5.9801388458625962e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-3.8903089919188128e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(1.0046633261049162e+02, new int[] { 1, 1, 2 });
            p.AddCoeff(2.9684749047032680e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(-2.4488668573807331e+02, new int[] { 1, 1, 4 });
            p.AddCoeff(2.9900694229312981e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(2.1565843324767332e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-3.4983812248296188e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(-1.7316103610769064e+02, new int[] { 1, 2, 3 });
            p.AddCoeff(-1.4950347114656491e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(-1.0782921662383666e+02, new int[] { 3, 0, 1 });
            p.AddCoeff(1.7491906124148094e+02, new int[] { 3, 0, 2 });
            p.AddCoeff(8.6580518053845318e+02, new int[] { 3, 0, 3 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{F85FD566-EE92-41f5-BA23-6E4B02E36519}"));
            OrthonormalPolynomials[75] = p;
            p.AddCoeff(-1.0028997730676927e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-5.3186792278996134e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(-2.1060895234421546e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(2.0778306850327823e+02, new int[] { 1, 0, 3 });
            p.AddCoeff(-1.8578718296079006e+02, new int[] { 1, 0, 4 });
            p.AddCoeff(4.8399980973886482e+01, new int[] { 1, 0, 5 });
            p.AddCoeff(-1.0028997730676927e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(-5.3895949509382749e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-5.9171086610993867e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(1.6594279191046794e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(-6.8447909511870024e+01, new int[] { 1, 1, 4 });
            p.AddCoeff(5.0144988653384633e+00, new int[] { 1, 2, 0 });
            p.AddCoeff(2.7302553369884682e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(4.8891363937050017e+02, new int[] { 1, 2, 2 });
            p.AddCoeff(-4.8399980973886482e+02, new int[] { 1, 2, 3 });
            p.AddCoeff(-3.0086993192030780e+00, new int[] { 1, 3, 0 });
            p.AddCoeff(-1.6594279191046794e+02, new int[] { 1, 3, 1 });
            p.AddCoeff(-4.1068745707122014e+02, new int[] { 1, 3, 2 });
            p.AddCoeff(5.0144988653384633e+00, new int[] { 3, 0, 0 });
            p.AddCoeff(2.7302553369884682e+02, new int[] { 3, 0, 1 });
            p.AddCoeff(4.8891363937050017e+02, new int[] { 3, 0, 2 });
            p.AddCoeff(-4.8399980973886482e+02, new int[] { 3, 0, 3 });
            p.AddCoeff(1.5043496596015390e+01, new int[] { 3, 1, 0 });
            p.AddCoeff(8.2971395955233969e+02, new int[] { 3, 1, 1 });
            p.AddCoeff(2.0534372853561007e+03, new int[] { 3, 1, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{E65D2959-60D2-4bb0-A9A3-27377FFE4DFA}"));
            OrthonormalPolynomials[76] = p;
            p.AddCoeff(-2.4413814605599437e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-3.4526347724501079e-01, new int[] { 1, 0, 1 });
            p.AddCoeff(1.3183459887023696e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-1.8298964293985572e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(9.6434567692117777e+00, new int[] { 1, 0, 4 });
            p.AddCoeff(-1.8126332555363066e+00, new int[] { 1, 0, 5 });
            p.AddCoeff(-5.6151773592878706e+01, new int[] { 1, 1, 0 });
            p.AddCoeff(-4.7646359859811488e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(2.6952851324581779e+02, new int[] { 1, 1, 2 });
            p.AddCoeff(-2.3029073932242219e+02, new int[] { 1, 1, 3 });
            p.AddCoeff(5.8959362272522641e+01, new int[] { 1, 1, 4 });
            p.AddCoeff(-1.4648288763359662e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(-2.2787389498170712e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(5.4198668424430751e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(-2.1751599066435679e+01, new int[] { 1, 2, 3 });
            p.AddCoeff(2.0751742414759522e+02, new int[] { 1, 3, 0 });
            p.AddCoeff(4.6955832905321467e+02, new int[] { 1, 3, 1 });
            p.AddCoeff(-4.3578659070994995e+02, new int[] { 1, 3, 2 });
            p.AddCoeff(-1.3427598033079690e+02, new int[] { 1, 4, 0 });
            p.AddCoeff(-3.9877931621798746e+02, new int[] { 1, 4, 1 });
            p.AddCoeff(1.2206907302799719e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(1.8989491248475593e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(-4.5165557020358959e+01, new int[] { 3, 0, 2 });
            p.AddCoeff(1.8126332555363066e+01, new int[] { 3, 0, 3 });
            p.AddCoeff(3.0517268256999296e+02, new int[] { 3, 1, 0 });
            p.AddCoeff(6.9052695449002157e+02, new int[] { 3, 1, 1 });
            p.AddCoeff(-6.4086263339698523e+02, new int[] { 3, 1, 2 });
            p.AddCoeff(6.7137990165398452e+02, new int[] { 3, 2, 0 });
            p.AddCoeff(1.9938965810899373e+03, new int[] { 3, 2, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{44831B16-0AF6-44cf-B133-C73E685D3492}"));
            OrthonormalPolynomials[77] = p;
            p.AddCoeff(2.5051436970332982e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-8.8570204800949153e+00, new int[] { 1, 0, 1 });
            p.AddCoeff(1.2525718485166491e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-8.8570204800949153e+00, new int[] { 1, 0, 3 });
            p.AddCoeff(3.1314296212916227e+00, new int[] { 1, 0, 4 });
            p.AddCoeff(-4.4285102400474577e-01, new int[] { 1, 0, 5 });
            p.AddCoeff(-6.5924834132455215e-01, new int[] { 1, 1, 0 });
            p.AddCoeff(1.8646358905462980e+00, new int[] { 1, 1, 1 });
            p.AddCoeff(-1.9777450239736564e+00, new int[] { 1, 1, 2 });
            p.AddCoeff(9.3231794527314898e-01, new int[] { 1, 1, 3 });
            p.AddCoeff(-1.6481208533113804e-01, new int[] { 1, 1, 4 });
            p.AddCoeff(-7.5813559252323497e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(1.6082484555961820e+02, new int[] { 1, 2, 1 });
            p.AddCoeff(-1.1372033887848525e+02, new int[] { 1, 2, 2 });
            p.AddCoeff(2.6804140926603033e+01, new int[] { 1, 2, 3 });
            p.AddCoeff(-7.2517317545700736e+00, new int[] { 1, 3, 0 });
            p.AddCoeff(1.0255497398004639e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(-3.6258658772850368e+00, new int[] { 1, 3, 2 });
            p.AddCoeff(2.3205541614624236e+02, new int[] { 1, 4, 0 });
            p.AddCoeff(-1.6408795836807422e+02, new int[] { 1, 4, 1 });
            p.AddCoeff(-1.5083602049505753e+02, new int[] { 1, 5, 0 });
            p.AddCoeff(-1.2525718485166491e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(2.6571061440284746e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(-1.8788577727749736e+01, new int[] { 3, 0, 2 });
            p.AddCoeff(4.4285102400474577e+00, new int[] { 3, 0, 3 });
            p.AddCoeff(-2.1755195263710221e+01, new int[] { 3, 1, 0 });
            p.AddCoeff(3.0766492194013916e+01, new int[] { 3, 1, 1 });
            p.AddCoeff(-1.0877597631855110e+01, new int[] { 3, 1, 2 });
            p.AddCoeff(3.4808312421936353e+02, new int[] { 3, 2, 0 });
            p.AddCoeff(-2.4613193755211133e+02, new int[] { 3, 2, 1 });
            p.AddCoeff(7.5418010247528766e+02, new int[] { 3, 3, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{08345187-4129-4657-9FFD-27B1B6DAD8CB}"));
            OrthonormalPolynomials[78] = p;
            p.AddCoeff(5.4712668149246856e-02, new int[] { 0, 0, 0 });
            p.AddCoeff(2.8628897012204847e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(-9.0275902446257313e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(-1.2147937380854489e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(1.8150927658512645e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(-9.8073316116134171e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(1.8670698005930490e+00, new int[] { 0, 0, 6 });
            p.AddCoeff(-2.1885067259698742e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-1.1606309599542505e+01, new int[] { 0, 1, 1 });
            p.AddCoeff(-4.5958641245367359e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(4.5341982835546055e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(-4.0542087098591920e+01, new int[] { 0, 1, 4 });
            p.AddCoeff(1.0561741735583680e+01, new int[] { 0, 1, 5 });
            p.AddCoeff(3.2827600889548114e-01, new int[] { 0, 2, 0 });
            p.AddCoeff(1.7641590591304608e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(1.9368284524833387e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-5.4317528925858925e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(2.2404837607116588e+01, new int[] { 0, 2, 4 });
            p.AddCoeff(-2.1885067259698742e-01, new int[] { 0, 3, 0 });
            p.AddCoeff(-1.1915811188863639e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-2.1337940578206274e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(2.1123483471167360e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(5.4712668149246856e-02, new int[] { 0, 4, 0 });
            p.AddCoeff(3.0176404958810514e+00, new int[] { 0, 4, 1 });
            p.AddCoeff(7.4682792023721959e+00, new int[] { 0, 4, 2 });
            p.AddCoeff(-1.6413800444774057e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-8.8207952956523041e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-9.6841422624166935e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(2.7158764462929463e+02, new int[] { 2, 0, 3 });
            p.AddCoeff(-1.1202418803558294e+02, new int[] { 2, 0, 4 });
            p.AddCoeff(3.2827600889548114e+00, new int[] { 2, 1, 0 });
            p.AddCoeff(1.7873716783295458e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(3.2006910867309411e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(-3.1685225206751040e+02, new int[] { 2, 1, 3 });
            p.AddCoeff(-1.6413800444774057e+00, new int[] { 2, 2, 0 });
            p.AddCoeff(-9.0529214876431542e+01, new int[] { 2, 2, 1 });
            p.AddCoeff(-2.2404837607116588e+02, new int[] { 2, 2, 2 });
            p.AddCoeff(5.7448301556709199e+00, new int[] { 4, 0, 0 });
            p.AddCoeff(3.1685225206751040e+02, new int[] { 4, 0, 1 });
            p.AddCoeff(7.8416931624908056e+02, new int[] { 4, 0, 2 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{07DE94A8-FF22-4484-9C70-7247B8377794}"));
            OrthonormalPolynomials[79] = p;
            p.AddCoeff(1.5982593347539697e+00, new int[] { 0, 0, 0 });
            p.AddCoeff(-9.0411201095938580e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-8.7904263411468333e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(1.8082240219187716e+01, new int[] { 0, 0, 3 });
            p.AddCoeff(-1.4783898846474220e+01, new int[] { 0, 0, 4 });
            p.AddCoeff(5.6507000684961613e+00, new int[] { 0, 0, 5 });
            p.AddCoeff(-8.3908615074583408e-01, new int[] { 0, 0, 6 });
            p.AddCoeff(-1.9978241684424621e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-2.8253500342480806e-01, new int[] { 0, 1, 1 });
            p.AddCoeff(1.0788250509589295e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.4974355181514827e+01, new int[] { 0, 1, 3 });
            p.AddCoeff(7.8914054653477253e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(-1.4833087679802423e+00, new int[] { 0, 1, 5 });
            p.AddCoeff(-7.9912966737698484e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(-6.7808400821953935e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(3.8358224034095272e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(-3.2774060397277735e+01, new int[] { 0, 2, 3 });
            p.AddCoeff(8.3908615074583408e+00, new int[] { 0, 2, 4 });
            p.AddCoeff(1.9978241684424621e+01, new int[] { 0, 3, 0 });
            p.AddCoeff(3.1078850376728887e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-7.3919494232371098e+01, new int[] { 0, 3, 2 });
            p.AddCoeff(2.9666175359604847e+01, new int[] { 0, 3, 3 });
            p.AddCoeff(-1.5982593347539697e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(-3.6164480438375432e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(3.3563446029833363e+01, new int[] { 0, 4, 2 });
            p.AddCoeff(4.3952131705734166e+00, new int[] { 0, 5, 0 });
            p.AddCoeff(1.3053117158226133e+01, new int[] { 0, 5, 1 });
            p.AddCoeff(-4.7947780042619090e+01, new int[] { 2, 0, 0 });
            p.AddCoeff(-4.0685040493172361e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(2.3014934420457163e+02, new int[] { 2, 0, 2 });
            p.AddCoeff(-1.9664436238366641e+02, new int[] { 2, 0, 3 });
            p.AddCoeff(5.0345169044750045e+01, new int[] { 2, 0, 4 });
            p.AddCoeff(-3.5960835031964318e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(-5.5941930678111996e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(1.3305508961826798e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(-5.3399115647288724e+01, new int[] { 2, 1, 3 });
            p.AddCoeff(2.1576501019178591e+02, new int[] { 2, 2, 0 });
            p.AddCoeff(4.8822048591806833e+02, new int[] { 2, 2, 1 });
            p.AddCoeff(-4.5310652140275041e+02, new int[] { 2, 2, 2 });
            p.AddCoeff(-1.3185639511720250e+02, new int[] { 2, 3, 0 });
            p.AddCoeff(-3.9159351474678398e+02, new int[] { 2, 3, 1 });
            p.AddCoeff(1.6781723014916682e+02, new int[] { 4, 0, 0 });
            p.AddCoeff(3.7972704460294204e+02, new int[] { 4, 0, 1 });
            p.AddCoeff(-3.5241618331325032e+02, new int[] { 4, 0, 2 });
            p.AddCoeff(4.6149738291020875e+02, new int[] { 4, 1, 0 });
            p.AddCoeff(1.3705773016137439e+03, new int[] { 4, 1, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{EBE92317-786A-420d-966D-8312B6604B61}"));
            OrthonormalPolynomials[80] = p;
            p.AddCoeff(3.2368450991719761e-01, new int[] { 0, 0, 0 });
            p.AddCoeff(-1.3732770715649683e+00, new int[] { 0, 0, 1 });
            p.AddCoeff(2.4276338243789821e+00, new int[] { 0, 0, 2 });
            p.AddCoeff(-2.2887951192749472e+00, new int[] { 0, 0, 3 });
            p.AddCoeff(1.2138169121894910e+00, new int[] { 0, 0, 4 });
            p.AddCoeff(-3.4331926789124209e-01, new int[] { 0, 0, 5 });
            p.AddCoeff(4.0460563739649701e-02, new int[] { 0, 0, 6 });
            p.AddCoeff(2.3305284714038228e+00, new int[] { 0, 1, 0 });
            p.AddCoeff(-8.2396624293898100e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(1.1652642357019114e+01, new int[] { 0, 1, 2 });
            p.AddCoeff(-8.2396624293898100e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(2.9131605892547785e+00, new int[] { 0, 1, 4 });
            p.AddCoeff(-4.1198312146949050e-01, new int[] { 0, 1, 5 });
            p.AddCoeff(-5.8263211785095570e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(1.6479324858779620e+01, new int[] { 0, 2, 1 });
            p.AddCoeff(-1.7478963535528671e+01, new int[] { 0, 2, 2 });
            p.AddCoeff(8.2396624293898100e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-1.4565802946273893e+00, new int[] { 0, 2, 4 });
            p.AddCoeff(-6.4736901983439522e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(1.3732770715649683e+01, new int[] { 0, 3, 1 });
            p.AddCoeff(-9.7105352975159283e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(2.2887951192749472e+00, new int[] { 0, 3, 3 });
            p.AddCoeff(2.6218445303293007e+01, new int[] { 0, 4, 0 });
            p.AddCoeff(-3.7078480932254145e+01, new int[] { 0, 4, 1 });
            p.AddCoeff(1.3109222651646503e+01, new int[] { 0, 4, 2 });
            p.AddCoeff(-2.3305284714038228e+01, new int[] { 0, 5, 0 });
            p.AddCoeff(1.6479324858779620e+01, new int[] { 0, 5, 1 });
            p.AddCoeff(6.7326378062777103e+00, new int[] { 0, 6, 0 });
            p.AddCoeff(-9.7105352975159283e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(2.7465541431299367e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(-2.9131605892547785e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(1.3732770715649683e+01, new int[] { 2, 0, 3 });
            p.AddCoeff(-2.4276338243789821e+00, new int[] { 2, 0, 4 });
            p.AddCoeff(-8.9336924737146541e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(1.8951223587596563e+02, new int[] { 2, 1, 1 });
            p.AddCoeff(-1.3400538710571981e+02, new int[] { 2, 1, 2 });
            p.AddCoeff(3.1585372645994272e+01, new int[] { 2, 1, 3 });
            p.AddCoeff(5.8263211785095570e+00, new int[] { 2, 2, 0 });
            p.AddCoeff(-8.2396624293898100e+00, new int[] { 2, 2, 1 });
            p.AddCoeff(2.9131605892547785e+00, new int[] { 2, 2, 2 });
            p.AddCoeff(2.9520027304448422e+02, new int[] { 2, 3, 0 });
            p.AddCoeff(-2.0873811487787519e+02, new int[] { 2, 3, 1 });
            p.AddCoeff(-2.0197913418833131e+02, new int[] { 2, 4, 0 });
            p.AddCoeff(3.3986873541305749e+01, new int[] { 4, 0, 0 });
            p.AddCoeff(-4.8064697504773892e+01, new int[] { 4, 0, 1 });
            p.AddCoeff(1.6993436770652875e+01, new int[] { 4, 0, 2 });
            p.AddCoeff(3.8065298366262439e+02, new int[] { 4, 1, 0 });
            p.AddCoeff(-2.6916230602673379e+02, new int[] { 4, 1, 1 });
            p.AddCoeff(7.0692696965915958e+02, new int[] { 4, 2, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{F7389DE9-7EF1-4728-9283-68D5626E91AE}"));
            OrthonormalPolynomials[81] = p;
            p.AddCoeff(3.8255420307951555e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(5.4101334233788213e-01, new int[] { 1, 0, 1 });
            p.AddCoeff(-2.0657926966293840e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(2.8673707143907753e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(-1.5110891021640864e+01, new int[] { 1, 0, 4 });
            p.AddCoeff(2.8403200472738812e+00, new int[] { 1, 0, 5 });
            p.AddCoeff(-1.5302168123180622e+01, new int[] { 1, 1, 0 });
            p.AddCoeff(-1.2984320216109171e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(7.3450406991266985e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(-6.2757547711194327e+01, new int[] { 1, 1, 3 });
            p.AddCoeff(1.6067276529339653e+01, new int[] { 1, 1, 4 });
            p.AddCoeff(2.2953252184770933e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(3.5706880594300221e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-8.4927033083652452e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(3.4083840567286574e+01, new int[] { 1, 2, 3 });
            p.AddCoeff(-1.5302168123180622e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(-3.4624853909624456e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(3.2134553058679306e+01, new int[] { 1, 3, 2 });
            p.AddCoeff(3.8255420307951555e+00, new int[] { 1, 4, 0 });
            p.AddCoeff(1.1361280189095525e+01, new int[] { 1, 4, 1 });
            p.AddCoeff(-5.3557588431132177e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(-8.3316054720033848e+01, new int[] { 3, 0, 1 });
            p.AddCoeff(1.9816307719518905e+02, new int[] { 3, 0, 2 });
            p.AddCoeff(-7.9528961323668673e+01, new int[] { 3, 0, 3 });
            p.AddCoeff(1.0711517686226435e+02, new int[] { 3, 1, 0 });
            p.AddCoeff(2.4237397736737120e+02, new int[] { 3, 1, 1 });
            p.AddCoeff(-2.2494187141075514e+02, new int[] { 3, 1, 2 });
            p.AddCoeff(-5.3557588431132177e+01, new int[] { 3, 2, 0 });
            p.AddCoeff(-1.5905792264733735e+02, new int[] { 3, 2, 1 });
            p.AddCoeff(1.4460548876405688e+02, new int[] { 5, 0, 0 });
            p.AddCoeff(4.2945639114781084e+02, new int[] { 5, 0, 1 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{2CED32EB-F7E9-44b2-9D76-56C61C37C3FA}"));
            OrthonormalPolynomials[82] = p;
            p.AddCoeff(4.1320576554073367e+00, new int[] { 1, 0, 0 });
            p.AddCoeff(-1.4609029941961571e+01, new int[] { 1, 0, 1 });
            p.AddCoeff(2.0660288277036683e+01, new int[] { 1, 0, 2 });
            p.AddCoeff(-1.4609029941961571e+01, new int[] { 1, 0, 3 });
            p.AddCoeff(5.1650720692591708e+00, new int[] { 1, 0, 4 });
            p.AddCoeff(-7.3045149709807855e-01, new int[] { 1, 0, 5 });
            p.AddCoeff(-5.7848807175702713e+00, new int[] { 1, 1, 0 });
            p.AddCoeff(1.6362113534996959e+01, new int[] { 1, 1, 1 });
            p.AddCoeff(-1.7354642152710814e+01, new int[] { 1, 1, 2 });
            p.AddCoeff(8.1810567674984797e+00, new int[] { 1, 1, 3 });
            p.AddCoeff(-1.4462201793925678e+00, new int[] { 1, 1, 4 });
            p.AddCoeff(-1.8181053683792281e+01, new int[] { 1, 2, 0 });
            p.AddCoeff(3.8567839046778547e+01, new int[] { 1, 2, 1 });
            p.AddCoeff(-2.7271580525688422e+01, new int[] { 1, 2, 2 });
            p.AddCoeff(6.4279731744630912e+00, new int[] { 1, 2, 3 });
            p.AddCoeff(4.7931868802725105e+01, new int[] { 1, 3, 0 });
            p.AddCoeff(-6.7785898930701689e+01, new int[] { 1, 3, 1 });
            p.AddCoeff(2.3965934401362553e+01, new int[] { 1, 3, 2 });
            p.AddCoeff(-3.8841341960828965e+01, new int[] { 1, 4, 0 });
            p.AddCoeff(2.7464976290887753e+01, new int[] { 1, 4, 1 });
            p.AddCoeff(1.0743349904059075e+01, new int[] { 1, 5, 0 });
            p.AddCoeff(-5.7848807175702713e+01, new int[] { 3, 0, 0 });
            p.AddCoeff(1.2271585151247720e+02, new int[] { 3, 0, 1 });
            p.AddCoeff(-8.6773210763554070e+01, new int[] { 3, 0, 2 });
            p.AddCoeff(2.0452641918746199e+01, new int[] { 3, 0, 3 });
            p.AddCoeff(-3.4709284305421628e+01, new int[] { 3, 1, 0 });
            p.AddCoeff(4.9086340604990878e+01, new int[] { 3, 1, 1 });
            p.AddCoeff(-1.7354642152710814e+01, new int[] { 3, 1, 2 });
            p.AddCoeff(2.4296499013795140e+02, new int[] { 3, 2, 0 });
            p.AddCoeff(-1.7180219211746807e+02, new int[] { 3, 2, 1 });
            p.AddCoeff(-1.5040689865682705e+02, new int[] { 3, 3, 0 });
            p.AddCoeff(1.5619177937439733e+02, new int[] { 5, 0, 0 });
            p.AddCoeff(-1.1044426636122948e+02, new int[] { 5, 0, 1 });
            p.AddCoeff(4.0609862637343305e+02, new int[] { 5, 1, 0 });

            //----------------------------------------------------------------------------------------
            p = new Polynomial(new Guid("{15D2FD34-4710-4743-BD57-912A34EDC4AB}"));
            OrthonormalPolynomials[83] = p;
            p.AddCoeff(-8.6448970191102825e-02, new int[] { 0, 0, 0 });
            p.AddCoeff(3.6677191829233509e-01, new int[] { 0, 0, 1 });
            p.AddCoeff(-6.4836727643327119e-01, new int[] { 0, 0, 2 });
            p.AddCoeff(6.1128653048722515e-01, new int[] { 0, 0, 3 });
            p.AddCoeff(-3.2418363821663559e-01, new int[] { 0, 0, 4 });
            p.AddCoeff(9.1692979573083772e-02, new int[] { 0, 0, 5 });
            p.AddCoeff(-1.0806121273887853e-02, new int[] { 0, 0, 6 });
            p.AddCoeff(5.1869382114661695e-01, new int[] { 0, 1, 0 });
            p.AddCoeff(-1.8338595914616754e+00, new int[] { 0, 1, 1 });
            p.AddCoeff(2.5934691057330848e+00, new int[] { 0, 1, 2 });
            p.AddCoeff(-1.8338595914616754e+00, new int[] { 0, 1, 3 });
            p.AddCoeff(6.4836727643327119e-01, new int[] { 0, 1, 4 });
            p.AddCoeff(-9.1692979573083772e-02, new int[] { 0, 1, 5 });
            p.AddCoeff(-1.2967345528665424e+00, new int[] { 0, 2, 0 });
            p.AddCoeff(3.6677191829233509e+00, new int[] { 0, 2, 1 });
            p.AddCoeff(-3.8902036585996271e+00, new int[] { 0, 2, 2 });
            p.AddCoeff(1.8338595914616754e+00, new int[] { 0, 2, 3 });
            p.AddCoeff(-3.2418363821663559e-01, new int[] { 0, 2, 4 });
            p.AddCoeff(1.7289794038220565e+00, new int[] { 0, 3, 0 });
            p.AddCoeff(-3.6677191829233509e+00, new int[] { 0, 3, 1 });
            p.AddCoeff(2.5934691057330848e+00, new int[] { 0, 3, 2 });
            p.AddCoeff(-6.1128653048722515e-01, new int[] { 0, 3, 3 });
            p.AddCoeff(-1.2967345528665424e+00, new int[] { 0, 4, 0 });
            p.AddCoeff(1.8338595914616754e+00, new int[] { 0, 4, 1 });
            p.AddCoeff(-6.4836727643327119e-01, new int[] { 0, 4, 2 });
            p.AddCoeff(5.1869382114661695e-01, new int[] { 0, 5, 0 });
            p.AddCoeff(-3.6677191829233509e-01, new int[] { 0, 5, 1 });
            p.AddCoeff(-8.6448970191102825e-02, new int[] { 0, 6, 0 });
            p.AddCoeff(5.4462851220394780e+00, new int[] { 2, 0, 0 });
            p.AddCoeff(-1.5404420568278074e+01, new int[] { 2, 0, 1 });
            p.AddCoeff(1.6338855366118434e+01, new int[] { 2, 0, 2 });
            p.AddCoeff(-7.7022102841390369e+00, new int[] { 2, 0, 3 });
            p.AddCoeff(1.3615712805098695e+00, new int[] { 2, 0, 4 });
            p.AddCoeff(-2.1785140488157912e+01, new int[] { 2, 1, 0 });
            p.AddCoeff(4.6213261704834221e+01, new int[] { 2, 1, 1 });
            p.AddCoeff(-3.2677710732236868e+01, new int[] { 2, 1, 2 });
            p.AddCoeff(7.7022102841390369e+00, new int[] { 2, 1, 3 });
            p.AddCoeff(3.2677710732236868e+01, new int[] { 2, 2, 0 });
            p.AddCoeff(-4.6213261704834221e+01, new int[] { 2, 2, 1 });
            p.AddCoeff(1.6338855366118434e+01, new int[] { 2, 2, 2 });
            p.AddCoeff(-2.1785140488157912e+01, new int[] { 2, 3, 0 });
            p.AddCoeff(1.5404420568278074e+01, new int[] { 2, 3, 1 });
            p.AddCoeff(5.4462851220394780e+00, new int[] { 2, 4, 0 });
            p.AddCoeff(-4.9016566098355302e+01, new int[] { 4, 0, 0 });
            p.AddCoeff(6.9319892557251332e+01, new int[] { 4, 0, 1 });
            p.AddCoeff(-2.4508283049177651e+01, new int[] { 4, 0, 2 });
            p.AddCoeff(9.8033132196710604e+01, new int[] { 4, 1, 0 });
            p.AddCoeff(-6.9319892557251332e+01, new int[] { 4, 1, 1 });
            p.AddCoeff(-4.9016566098355302e+01, new int[] { 4, 2, 0 });
            p.AddCoeff(1.0783644541638166e+02, new int[] { 6, 0, 0 });

            #endregion POLY_DEF
#pragma warning restore 612
        }

        /// <summary>
        /// Transforms the coordinates of the <paramref name="EdgeVertices"/>
        /// (which are given ins local coordinate system of the edge simplex)
        /// to the coordinate system of this simplex.
        /// </summary>
        /// <param name="EdgeIndex">
        /// The <see cref="Edge"/> on which <paramref name="EdgeVertices"/> are
        /// placed.
        /// </param>
        /// <param name="EdgeVertices">
        /// The 2D-coordinates of the vertices to be transformed
        /// </param>
        /// <param name="VolumeVertices">
        /// The result (e.g. the 3D-coordinates of the vertices)
        /// </param>
        public override void TransformFaceCoordinates(int EdgeIndex, MultidimensionalArray EdgeVertices, MultidimensionalArray VolumeVertices) {
            int N = EdgeVertices.GetLength(0);

            if (EdgeVertices.Dimension != 2) {
                throw new ArgumentException("dimension must be 3.", "EdgeVertices");
            }
            if (VolumeVertices.Dimension != 2) {
                throw new ArgumentException("dimension of be 3.", "VolumeVertices");
            }
            if (VolumeVertices.GetLength(1) != 3) {
                throw new ArgumentException("wrong spatial dimension of output", "VolumeVertices");
            }
            if (EdgeVertices.GetLength(1) != 2) {
                throw new ArgumentException("wrong spatial dimension of input", "EdgeVertices");
            }
            if (N != VolumeVertices.GetLength(0)) {
                throw new ArgumentException("mismatch in number of vertices between input and output.", "VolumeVertices,EdgeVertices");
            }

            //Determine vertices bounding of the edge triangle
            Vector3D a = new Vector3D();
            Vector3D b = new Vector3D();
            Vector3D c = new Vector3D();
            switch (EdgeIndex) {
                case (int)Edge.Front:
                    a.Set(Vertices[2, 0], Vertices[2, 1], Vertices[2, 2]);
                    b.Set(Vertices[3, 0], Vertices[3, 1], Vertices[3, 2]);
                    c.Set(Vertices[1, 0], Vertices[1, 1], Vertices[1, 2]);
                    break;

                case (int)Edge.Bottom:
                    a.Set(Vertices[2, 0], Vertices[2, 1], Vertices[2, 2]);
                    b.Set(Vertices[3, 0], Vertices[3, 1], Vertices[3, 2]);
                    c.Set(Vertices[0, 0], Vertices[0, 1], Vertices[0, 2]);
                    break;

                case (int)Edge.BackLeft:
                    a.Set(Vertices[0, 0], Vertices[0, 1], Vertices[0, 2]);
                    b.Set(Vertices[2, 0], Vertices[2, 1], Vertices[2, 2]);
                    c.Set(Vertices[1, 0], Vertices[1, 1], Vertices[1, 2]);
                    break;

                case (int)Edge.BackRight:
                    b.Set(Vertices[0, 0], Vertices[0, 1], Vertices[0, 2]);
                    a.Set(Vertices[3, 0], Vertices[3, 1], Vertices[3, 2]);
                    c.Set(Vertices[1, 0], Vertices[1, 1], Vertices[1, 2]);
                    break;

                default:
                    throw new ArgumentException("EdgeIndex out of bounds");
            }

            //Create 3D representation of the 2D basis on this triangle
            Vector3D e1 = b - a;
            Vector3D e2 = c - 0.5 * (a + b);

            e1.Normalize();
            e2.Normalize();
            // Test code: passed ok 31.5.2010
            //double scp = e1* e2;
            //if (Math.Abs(scp) > 1.0e-8)
            //    throw new ApplicationException("not orthonormal.");

            //Do the transformation
            Vector3D faceCenter = (1.0 / 3.0) * (a + b + c);
            for (int i = 0; i < N; i++) {
                Vector3D volumeCoordinate = faceCenter + (EdgeVertices[i, 0] * e1 + EdgeVertices[i, 1] * e2);
                VolumeVertices[i, 0] = volumeCoordinate.x;
                VolumeVertices[i, 1] = volumeCoordinate.y;
                VolumeVertices[i, 2] = volumeCoordinate.z;
            }
        }


        /// <summary>
        /// Evenly partitions this tetrahedron into eight sub-tetrahedrons of equal
        /// size.
        /// </summary>
        /// <remarks>
        /// Code taken from <see cref="Triangle"/> and adapted to 3D.
        /// </remarks>
        /// <returns>
        /// An array with eight elements containing the linear transformations
        /// </returns>
        public override AffineTrafo[] GetSubdivision() {
            AffineTrafo[] result = new AffineTrafo[8];

            result[0] = new AffineTrafo(3);
            result[0].Matrix[0, 0] = 0.5;
            result[0].Matrix[1, 1] = 0.5;
            result[0].Matrix[2, 2] = 0.5;
            result[0].Affine[2] = Math.Sqrt(2.0) / 2.0;

            result[1] = new AffineTrafo(3);
            result[1].Matrix[0, 0] = 0.5;
            result[1].Matrix[1, 1] = 0.5;
            result[1].Matrix[2, 2] = 0.5;
            result[1].Affine[1] = 2.0 / 3.0;
            result[1].Affine[2] = -Math.Sqrt(2.0) / 6.0;

            result[2] = new AffineTrafo(3);
            result[2].Matrix[0, 0] = 0.5;
            result[2].Matrix[1, 1] = 0.5;
            result[2].Matrix[2, 2] = 0.5;
            result[2].Affine[0] = -1.0 / 3.0 * Math.Sqrt(3.0);
            result[2].Affine[1] = -1.0 / 3.0;
            result[2].Affine[2] = -Math.Sqrt(2.0) / 6.0;

            result[3] = new AffineTrafo(3);
            result[3].Matrix[0, 0] = 0.5;
            result[3].Matrix[1, 1] = 0.5;
            result[3].Matrix[2, 2] = 0.5;
            result[3].Affine[0] = 1.0 / 3.0 * Math.Sqrt(3.0);
            result[3].Affine[1] = -1.0 / 3.0;
            result[3].Affine[2] = -Math.Sqrt(2.0) / 6.0;

            result[4] = new AffineTrafo(3);
            result[4].Matrix[0, 0] = 6.0;
            result[4].Matrix[0, 1] = 0.0;
            result[4].Matrix[0, 2] = 0.0;
            result[4].Matrix[1, 0] = 0.0;
            result[4].Matrix[1, 1] = -2.0;
            result[4].Matrix[1, 2] = 5.0 * Math.Sqrt(2.0);
            result[4].Matrix[2, 0] = 0.0;
            result[4].Matrix[2, 1] = -4.0 * Math.Sqrt(2.0);
            result[4].Matrix[2, 2] = 2.0;
            result[4].Matrix.Scale(1.0 / 12.0);
            result[4].Affine[0] = 0.0;
            result[4].Affine[1] = -1.0 / 6.0;
            result[4].Affine[2] = Math.Sqrt(2.0) / 6.0;

            result[5] = new AffineTrafo(3);
            result[5].Matrix[0, 0] = 6.0;
            result[5].Matrix[0, 1] = 0.0;
            result[5].Matrix[0, 2] = 0.0;
            result[5].Matrix[1, 0] = 0.0;
            result[5].Matrix[1, 1] = 2.0;
            result[5].Matrix[1, 2] = -5.0 * Math.Sqrt(2.0);
            result[5].Matrix[2, 0] = 0.0;
            result[5].Matrix[2, 1] = 4.0 * Math.Sqrt(2.0);
            result[5].Matrix[2, 2] = -2.0;
            result[5].Matrix.Scale(1.0 / 12.0);
            result[5].Affine[0] = 0.0;
            result[5].Affine[1] = 1.0 / 6.0;
            result[5].Affine[2] = -Math.Sqrt(2.0) / 6.0;

            result[6] = new AffineTrafo(3);
            result[6].Matrix[0, 0] = -3.0;
            result[6].Matrix[0, 1] = -Math.Sqrt(3.0);
            result[6].Matrix[0, 2] = Math.Sqrt(6.0);
            result[6].Matrix[1, 0] = 3.0 * Math.Sqrt(3.0);
            result[6].Matrix[1, 1] = -1.0;
            result[6].Matrix[1, 2] = 4.0 * Math.Sqrt(2.0);
            result[6].Matrix[2, 0] = 0.0;
            result[6].Matrix[2, 1] = 4.0 * Math.Sqrt(2.0);
            result[6].Matrix[2, 2] = 4.0;
            result[6].Matrix.Scale(1.0 / 12.0);
            result[6].Affine[0] = -Math.Sqrt(3.0) / 6.0;
            result[6].Affine[1] = 0;
            result[6].Affine[2] = 0;

            result[7] = new AffineTrafo(3);
            result[7].Matrix[0, 0] = -3.0;
            result[7].Matrix[0, 1] = Math.Sqrt(3.0);
            result[7].Matrix[0, 2] = -Math.Sqrt(6.0);
            result[7].Matrix[1, 0] = -3.0 * Math.Sqrt(3.0);
            result[7].Matrix[1, 1] = -1.0;
            result[7].Matrix[1, 2] = 4.0 * Math.Sqrt(2.0);
            result[7].Matrix[2, 0] = 0.0;
            result[7].Matrix[2, 1] = 4.0 * Math.Sqrt(2.0);
            result[7].Matrix[2, 2] = 4.0;
            result[7].Matrix.Scale(1.0 / 12.0);
            result[7].Affine[0] = Math.Sqrt(3.0) / 6.0;
            result[7].Affine[1] = 0;
            result[7].Affine[2] = 0;

            return result;
        }

        /// <summary>
        /// Tests whether <paramref name="pt"/> is within the convex hull of
        /// vertices.
        /// </summary>
        /// <param name="pt"></param>
        /// <param name="tolerance"></param>
        /// <returns>
        /// </returns>
        public override bool IsWithin(double[] pt, double tolerance) {
            if (pt.Length != SpatialDimension) {
                throw new ArgumentException("Wrong spatial dimension", "pt");
            }

            var edgeCenter = FaceCenters;
            var edgeNormal = FaceNormals;
            int D = SpatialDimension;

            int NE = NoOfFaces;
            for (int ne = 0; ne < NE; ne++) {

                double a = 0, b = 0;
                for (int d = 0; d < D; d++) {
                    a += pt[d] * edgeNormal[ne, d];
                    b += edgeCenter[ne, d] * edgeNormal[ne, d];
                }

                if (a > b + tolerance) {
                    return false;
                }
            }

            return true;
        }



        /// <summary>
        /// see <see cref="RefElement.GetNodeSet(int,out MultidimensionalArray,out int[])"/>
        /// </summary>
        protected override void GetNodeSet(int px, out MultidimensionalArray Nodes, out int[] Type) {
            if (px < 2)
                throw new ArgumentOutOfRangeException("at least two nodes in each direction are required.");

            int K = (px * px * px + 3 * px * px + 2 * px) / 6;
            Nodes = MultidimensionalArray.Create(K, 3);
            Type = new int[Nodes.GetLength(0)];

            var Nodes1D = GenericBlas.Linspace(0, 1, px);
            int cnt = 0;

            for (int k = 0; k < px; k++) {
                int k_edge = (k == 0 || k == px - 1) ? 1 : 0;

                for (int j = 0; j < (px - k); j++) {
                    int j_edge = (j == 0 || j == (px - k - 1)) ? 1 : 0;

                    for (int i = 0; i < (px - k - j); i++) {
                        int i_edge = (i == 0 || i == (px - k - j - 1)) ? 1 : 0;

                        Nodes[cnt, 0] = Nodes1D[i];
                        Nodes[cnt, 1] = Nodes1D[j];
                        Nodes[cnt, 2] = Nodes1D[k];

                        Debug.Assert(Nodes[cnt, 0] + Nodes[cnt, 1] + Nodes[cnt, 2] <= 1.0000001);

                        Type[cnt] = i_edge + j_edge + k_edge;
                        cnt++;
                    }
                }
            }

            var Image = this.Vertices;
            var preIm = MultidimensionalArray.Create(4, 3);
            preIm[0, 0] = 0;
            preIm[0, 1] = 0;
            preIm[0, 2] = 0;
            preIm[1, 0] = 0;
            preIm[1, 1] = 1;
            preIm[1, 2] = 0;
            preIm[2, 0] = 1;
            preIm[2, 1] = 0;
            preIm[2, 2] = 0;
            preIm[3, 0] = 0;
            preIm[3, 1] = 0;
            preIm[3, 2] = 1;

            var Trafo = AffineTrafo.FromPoints(preIm, Image);
            Trafo.Transform(Nodes.CloneAs(), Nodes);

#if DEBUG
            for (int k = 0; k < Nodes.GetLength(0); k++) {
                double[] Node_k = Nodes.GetRow(k);
                Node_k.ScaleV(0.999);
                Debug.Assert(this.IsWithin(Node_k));
            }
#endif
        }

        /// <summary>
        /// <see cref="RefElement.GetInterpolationNodes_NonLin"/>
        /// </summary>
        override protected void GetInterpolationNodes_NonLin(CellType Type, out NodeSet InterpolationNodes, out PolynomialList InterpolationPolynomials, out int[] NodeType, out int[] EntityIndex) {
            switch (Type) {
                case CellType.Tetra_10: {
                        base.SelectNodalPolynomials(3, out InterpolationNodes, out InterpolationPolynomials, out NodeType, out EntityIndex);
                        return;
                    }
                case CellType.Tetra_20: {
                        base.SelectNodalPolynomials(4, out InterpolationNodes, out InterpolationPolynomials, out NodeType, out EntityIndex);
                        return;
                    }
                case CellType.Tetra_35: {
                        base.SelectNodalPolynomials(5, out InterpolationNodes, out InterpolationPolynomials, out NodeType, out EntityIndex);
                        return;
                    }
                case CellType.Tetra_56: {
                        base.SelectNodalPolynomials(6, out InterpolationNodes, out InterpolationPolynomials, out NodeType, out EntityIndex);
                        return;
                    }
                default:
                    throw new NotImplementedException();
            }
        }

        /// <summary>
        /// <see cref="RefElement.GetForeignElementMapping"/>
        /// </summary>
        /// <param name="MinorCellTypeIndex"></param>
        /// <param name="conv"></param>
        /// <returns></returns>
        public override int[] GetForeignElementMapping(CellType MinorCellTypeIndex, RefElement.ExchangeFormats conv) {
            int[] permutationArray = new int[Vertices.GetLength(0)];
            for (int i = 0; i < permutationArray.Length; i++) {
                permutationArray[i] = i;
            }
            if (conv == ExchangeFormats.Gmsh || conv == ExchangeFormats.CGNS) {
                SwitchNode(ref permutationArray[0], ref permutationArray[3]);
                SwitchNode(ref permutationArray[3], ref permutationArray[1]);
                SwitchNode(ref permutationArray[3], ref permutationArray[2]);
                return permutationArray;
            }
            return permutationArray;
        }

        /// <summary>
        /// <see cref="RefElement.GetForeignElementType"/>
        /// </summary>
        /// <param name="Type"></param>
        /// <param name="conv"></param>
        /// <param name="ForeignName"></param>
        /// <param name="ForeignTypeConstant"></param>
        public override void GetForeignElementType(CellType Type, RefElement.ExchangeFormats conv, out string ForeignName, out int ForeignTypeConstant) {
            ForeignName = "Tetragon";
            ForeignTypeConstant = 0;
            if (conv == ExchangeFormats.Gmsh) {
                if (Type == CellType.Tetra_Linear) {
                    ForeignTypeConstant = 4;
                } else if (Type == CellType.Tetra_10) {
                    ForeignTypeConstant = 11;
                } else if (Type == CellType.Tetra_20) {
                    ForeignTypeConstant = 29;
                } else if (Type == CellType.Tetra_35) {
                    ForeignTypeConstant = 30;
                } else if (Type == CellType.Tetra_56) {
                    ForeignTypeConstant = 31;
                } else {
                    throw new NotSupportedException("Wrong minor cell type");
                }
            } else if (conv == ExchangeFormats.CGNS) {
                if (Type == 0) {
                    ForeignTypeConstant = 10;
                } else if (Type == CellType.Tetra_10) {
                    ForeignTypeConstant = 11;
                } else {
                    throw new NotSupportedException("Wrong minor cell type");
                }
            } else if (conv == ExchangeFormats.GambitNeutral) {
                ForeignName = "Tetrahedron";
                if (Type == CellType.Tetra_Linear) {
                    ForeignTypeConstant = 6;
                } else {
                    throw new NotSupportedException("Wrong minor cell type");
                }
            } else {
                throw new NotSupportedException("Wrong foreign convention type");
            }
        }

    }
}