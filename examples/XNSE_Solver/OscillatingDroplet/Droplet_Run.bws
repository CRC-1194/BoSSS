restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 3 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 41; Grid Count = 610; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
}

 Console ready for input. Type 'help' for help.

==============
//var myDb = OpenOrCreateDefaultDatabase();
var myDb = OpenOrCreateDatabase(@"\\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB")
**************
==============
ExecutionQueues;
**************
List of 1 instances of BatchProcessorClient {
  0: BoSSS.Application.BoSSSpad.MiniBatchProcessorClient
}
==============
ExecutionQueues[0].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
var myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\smuda\binaries", "hpccluster");
**************
==============
using BoSSS.Application.XNSE_Solver;
**************
==============
**************
==============
WorkflowMgm.Init("Droplet");   // set project name
**************
Project name is set to 'Droplet'.

==============
WorkflowMgm.SetEqualityBasedSessionJobControllCorrelation();
**************
==============
**************
==============
// Testcase setup
// ==============
bool steadyInterface = false;
bool oscillating     = true;

double radius = 0.25;  
double a      = 1.25*radius;
double b      = 0.8*radius;
**************
==============
// ========================
// physical parameter setup
// ========================
**************
==============
bool dropletConfig = true;    // if true heavy fluid inside and light fluid outside

double rho_h;                // heavy fluid
double mu_h;
double rho_l;                // light fluid
double mu_l;
double sigma;
 
double dt;
double t_end;

int setup = 0;
switch(setup) {
    case 0: {
        // Hysing: La = 500
        rho_h = 1;
        mu_h  = 0.1;
        rho_l = 1;
        mu_l  = 0.1;
        sigma = 0.2; 
        dt    = 0.02;
        t_end = 100;
        break;
    }
    case 1: {
        // Hysing: La = 5000
        rho_h = 1e4;
        mu_h  = 1;
        rho_l = 1e4;
        mu_l  = 1;
        sigma = 0.5; 
        dt    = 0.01;
        t_end = 125;
        break;
    }
    case 2: {
        // Hysing: La = 0.005
        rho_h = 1;
        mu_h  = 10;
        rho_l = 1;
        mu_l  = 10;
        sigma = 1; 
        dt    = 0.0 ;
        t_end = 125;
        break;
    }
    case 3: {
        // Air - Water: 
        rho_h = 1e-3;
        mu_h  = 1e-5;
        rho_l = 1.2e-6;
        mu_l  = 17.1e-8;
        sigma = 72.75e-3;
        dt    = 0.0;
        t_end = 0.0;
        break;
    }
}
**************
==============
// ===========================
// Grids for Convergence Study
// ===========================
**************
==============
var GridSeq = new IGridInfo[1];
int[] kelemSeq = new int[]{ 8 };
**************
==============
double L = 1.0;   
**************
==============
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
    
    int kelem = kelemSeq[iGrid];
    
    GridCommons grd;

    double[] xNodes = GenericBlas.Linspace(-(L/2.0), (L/2.0), kelem + 1);
    double[] yNodes = GenericBlas.Linspace(-(L/2.0), (L/2.0), kelem + 1);    
    grd = Grid2D.Cartesian2DGrid(xNodes, yNodes);

    grd.EdgeTagNames.Add(1, "wall");
 
    grd.DefineEdgeTags(delegate (double[] X) {
        byte et = 0;
        if (Math.Abs(X[1] + (L/2.0)) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[1] - (L/2.0)) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[0] + (L/2.0)) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[0] - (L/2.0)) <= 1.0e-8)
            et = 1;
        return et;
    });

    grd.Name = "Droplet_test";
    myDb.SaveGrid(ref grd);
    
    GridSeq[iGrid] = grd;
}
**************
Grid Edge Tags changed.
An equivalent grid is already present in the database -- the grid will not be saved.

==============
**************
==============
// ======================
// Create Control objects
// ======================
**************
==============
using BoSSS.Application.XNSE_Solver.PhysicalBasedTestcases;
**************
==============
int[] degS = new int[] { 2 };
**************
==============
**************
==============
XNSE_Control[,] controls = new XNSE_Control[GridSeq.Length, degS.Length];
**************
==============
for(int iDeg = 0; iDeg < degS.Length; iDeg++) {
for(int iGrd = 0; iGrd < GridSeq.Length; iGrd++) {
    
    var C = Droplet.Droplet_forWorksheet(steadyInterface);
    
    int pDeg = degS[iDeg];   
    var grd  = GridSeq[iGrd];

    C.SetDGdegree(pDeg);
    
    C.SetGrid(grd);
    C.AddBoundaryValue("wall");
    
    if(oscillating){
        string r_str = radius.ToString();
        string a_str = a.ToString();
        string b_str = b.ToString();
        C.AddInitialValue("Phi", "X => ((X[0]).Pow2() / "+a_str+".Pow2() + (X[1]).Pow2() / "+b_str+".Pow2()) - "+r_str, false);  
    } else {
        string r_str = radius.ToString();
        C.AddInitialValue("Phi", "X => ((X[0]).Pow2() + (X[1]).Pow2()).Sqrt() - "+r_str, false);
        double pJump     = (dropletConfig) ? (sigma/radius) : -(sigma/radius);
        string pJump_str = pJump.ToString();
        C.AddInitialValue("Pressure#A", "X => "+pJump_str, false);
    }
    
    if(dropletConfig){    // A inside, B outside
        C.PhysicalParameters.rho_A = rho_h;
        C.PhysicalParameters.rho_B = rho_l;
        C.PhysicalParameters.mu_A  = mu_h;
        C.PhysicalParameters.mu_B  = mu_l;
        C.PhysicalParameters.Sigma = sigma;
    } else {
        C.PhysicalParameters.rho_A = rho_l;
        C.PhysicalParameters.rho_B = rho_h;
        C.PhysicalParameters.mu_A  = mu_l;
        C.PhysicalParameters.mu_B  = mu_h;
        C.PhysicalParameters.Sigma = sigma;
    }
    
    C.dtMin         = dt;
    C.dtMax         = dt;
    C.NoOfTimesteps = (int)(t_end/dt);
    
    C.SessionName = "Droplet_test_k" + pDeg + "_mesh" + iGrd;
    
    controls[iDeg,iGrd] = C;
    C.CreateJob(); // job will be permanently linked to control object
}
}
**************
Info: setting database path to: \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB

==============
//Info(controls[0,0]);
**************
==============
var j00 = controls[0,0].GetJob();
**************
==============
j00.Activate(myBatch);
**************
Job is marked as failed by job manager, no database entry is found; performing new deployment and submission.
Warning: no database is set for the job to submit; nothing ma be saved.
Deploying executables and additional files ...
Deployment directory: \\hpccluster\hpccluster-scratch\smuda\binaries\Droplet-XNSE_Solver2020Mar19_165841
copied 32 files.
   writing file: control.obj
   copied 'amd64' runtime.
deployment finished.

==============
j00.Status;
**************
InProgress
==============
//j00.Stdout;
**************
==============
j00.Stderr;
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
//databases.Pick(2).Sessions.Pick(0).Delete()
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
