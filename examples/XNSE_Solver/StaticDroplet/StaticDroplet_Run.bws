restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 5 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 79; Grid Count = 777; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
  3: { Session Count = 390; Grid Count = 8681; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
  4: { Session Count = 121; Grid Count = 7; Path = D:\local\local_XNSE_StudyDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XNSE_Solver;
**************
==============
//var myDb = OpenOrCreateDefaultDatabase();
**************
==============
/*
bool local = true;
IDatabaseInfo myDb;
BatchProcessorClient myBatch;
if(!local){
    myDb    = OpenOrCreateDatabase(@"\\hpccluster\hpccluster-scratch\smuda\XNSE_studyDB");
    myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\smuda\binaries", "hpccluster");
}else{ 
    myDb    = OpenOrCreateDatabase(@"D:\local\local_XNSE_StudyDB");
    myBatch = new MiniBatchProcessorClient(@"D:\local\binaries");
    MiniBatchProcessor.Server.StartIfNotRunning(false);
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
ExecutionQueues;
**************
List of 2 instances of BatchProcessorClient {
  0: MiniBatchProcessor client @D:\local\binaries
  1: MiniBatchProcessor client @\\hpccluster\hpccluster-scratch\smuda\binaries
}
==============
ExecutionQueues[1].AllowedDatabases;
**************
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 390; Grid Count = 8681; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
}
==============
var myBatch = ExecutionQueues[1];
**************
==============
var myDb = ExecutionQueues[1].AllowedDatabases[0];
**************
==============
**************
==============
WorkflowMgm.Init("StaticDroplet");   // set project name
**************
Project name is set to 'StaticDroplet'.

==============
//WorkflowMgm.SetEqualityBasedSessionJobControllCorrelation();
**************
==============
bool kummer = true;
bool hysing = false;
**************
==============
// Testcase setup
// ==============
bool elliptic  = true;
bool quadratic = true;

double radius      = 0.2;  
double ellipsDelta = 0.1; 
double a           = (1.0 + ellipsDelta)*radius;
double b           = (1.0 - ellipsDelta)*radius;
if(kummer) {
    radius = 0.8;
    a      = 0.816;
    b      = 0.784;
}
if(hysing) {
    radius = 0.25;
}
**************
==============
bool onWall = false;

double theta0 = Math.PI/2.0;
double thetaE = Math.PI/3.0;
double beta   = 10; 
**************
==============
**************
==============
// ===========================
// Grids for Convergence Study
// ===========================
**************
==============
var GridSeq = new IGridInfo[6];
int[] kelemSeq = new int[]{4, 8, 16, 32, 64, 128, 256};
int[] NoProc;
if(kummer) {
    kelemSeq = new int[]{9, 18, 36, 72, 144, 288, 576};
    NoProc   = new int[]{1, 1, 1, 2, 3, 3 };
}
if(hysing) {
    kelemSeq = new int[]{20, 40, 80, 160};
}
**************
==============
**************
==============
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
    
    int kelem = kelemSeq[iGrid];
    
    GridCommons grd;

    if(!onWall){
        
        if(kummer) {
        
            double[] xNodes = GenericBlas.Linspace(-3.0/2.0, 3.0/2.0, kelem + 1);
            double[] yNodes = GenericBlas.Linspace(-3.0/2.0, 3.0/2.0, kelem + 1);    
            grd = Grid2D.Cartesian2DGrid(xNodes, yNodes);

            grd.EdgeTagNames.Add(1, "wall");
 
            grd.DefineEdgeTags(delegate (double[] X) {
                byte et = 0;
                if (Math.Abs(X[1] + 3.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[1] - 3.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] + 3.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] - 3.0/2.0) <= 1.0e-8)
                    et = 1;
                return et;
            });
            
            grd.Name = "StaticDroplet_meshStudyKummer";
            
        } else if(hysing) {
        
            double[] xNodes = GenericBlas.Linspace(-1.0/2.0, 1.0/2.0, kelem + 1);
            double[] yNodes = GenericBlas.Linspace(-1.0/2.0, 1.0/2.0, kelem + 1);    
            grd = Grid2D.Cartesian2DGrid(xNodes, yNodes);

            grd.EdgeTagNames.Add(1, "wall");
 
            grd.DefineEdgeTags(delegate (double[] X) {
                byte et = 0;
                if (Math.Abs(X[1] + 1.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[1] - 1.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] + 1.0/2.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] - 1.0/2.0) <= 1.0e-8)
                    et = 1;
                return et;
            });
            
            grd.Name = "StaticDroplet_meshStudyHysing";
            
        } else {
            double[] xNodes = GenericBlas.Linspace(-1.0, 1.0, kelem + 1);
            double[] yNodes = GenericBlas.Linspace(-1.0, 1.0, kelem + 1);    
            grd = Grid2D.Cartesian2DGrid(xNodes, yNodes);

            grd.EdgeTagNames.Add(1, "wall");
 
            grd.DefineEdgeTags(delegate (double[] X) {
                byte et = 0;
                if (Math.Abs(X[1] + 1.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[1] - 1.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] + 1.0) <= 1.0e-8)
                    et = 1;
                if (Math.Abs(X[0] - 1.0) <= 1.0e-8)
                    et = 1;
                return et;
            });

            grd.Name = "StaticDroplet_meshStudy";
        }
    
    } else {
    
    double[] xNodes = GenericBlas.Linspace(-1.0, 1.0, kelem + 1);
    double[] yNodes = GenericBlas.Linspace(0.0, 1.0, kelem/2 + 1);    
    grd = Grid2D.Cartesian2DGrid(xNodes, yNodes);

    grd.EdgeTagNames.Add(1, "navierslip_linear");
 
    grd.DefineEdgeTags(delegate (double[] X) {
        byte et = 0;
        if (Math.Abs(X[1] + 0.0) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[1] - 1.0) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[0] + 1.0) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[0] - 1.0) <= 1.0e-8)
            et = 1;
        return et;
    });

    grd.Name = "StaticDropletOnWall_meshStudy";
        
    }
    myDb.SaveGrid(ref grd);
    
    GridSeq[iGrid] = grd;
}
**************
Grid Edge Tags changed.
An equivalent grid (72e0c532-b2a9-47f8-a608-f8dbcca465a6) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (b8a1292a-8237-44d9-872a-7f10d5d9f25f) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (72af1481-95c5-4179-9207-471e69b68b19) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (9119ecbb-a2eb-485b-9828-8c31732c600f) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (83f6be54-110e-41a6-b334-c52bec1edfe3) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (6be15cea-9a3b-4307-94ff-ac2e70f58858) is already present in the database -- the grid will not be saved.

==============
**************
==============
// ======================
// Create Control objects
// ======================
**************
==============
using BoSSS.Application.XNSE_Solver.PhysicalBasedTestcases;
**************
==============
int[] degS = new int[] { 2, 3, 4 };
**************
==============
int iDeg0 = 0;
int iGrd0 = 0;
**************
==============
//XNSE_Control[,] controls = new XNSE_Control[degS.Length - iDeg0, GridSeq.Length - iGrd0];
List<XNSE_Control> controls = new List<XNSE_Control>();
//List<int> procPerCntrl = new List<int>();
**************
==============
for(int iDeg = iDeg0; iDeg < degS.Length; iDeg++) {
for(int iGrd = iGrd0; iGrd < GridSeq.Length; iGrd++) {
    
    var C                   = Droplet.Droplet_forWorksheet(!hysing);
    C.LogValues             = XNSE_Control.LoggingValues.None;
    C.TimesteppingMode      = (hysing) ? AppControl._TimesteppingMode.Transient : AppControl._TimesteppingMode.Steady;
    C.CutCellQuadratureType = BoSSS.Foundation.XDG.XQuadFactoryHelper.MomentFittingVariants.OneStepGaussAndStokes;
    
    C.AdvancedDiscretizationOptions.CellAgglomerationThreshold = 0.1;
    
    int pDeg = degS[iDeg];   
    var grd  = GridSeq[iGrd];
    //procPerCntrl.Add(NoProc[iGrd]);

    //C.SetDGdegree(pDeg);
    C.SetFieldOptions(pDeg,2);
    
    C.SetGrid(grd);
    
    if(kummer) {
        C.PhysicalParameters.rho_A             = 1.0;
        C.PhysicalParameters.rho_B             = 1.0;
        C.PhysicalParameters.mu_A              = 0.5;
        C.PhysicalParameters.mu_B              = 0.5;
        C.PhysicalParameters.Sigma             = 0.1;
        C.PhysicalParameters.IncludeConvection = false;
        
        C.LinearSolver.SolverCode           = LinearSolverCode.classic_pardiso;
        C.LinearSolver.ConvergenceCriterion = 1e-12;
        
    } else if(hysing) {
        C.PhysicalParameters.rho_A             = 1.0e4;
        C.PhysicalParameters.rho_B             = 1.0e4;
        C.PhysicalParameters.mu_A              = 1.0;
        C.PhysicalParameters.mu_B              = 1.0;
        C.PhysicalParameters.Sigma             = 1.0;
        C.PhysicalParameters.IncludeConvection = false;
        
        C.LinearSolver.SolverCode           = LinearSolverCode.classic_pardiso;
        C.LinearSolver.ConvergenceCriterion = 1e-10;
        
    } else {
        C.PhysicalParameters                   = BoSSS.Solution.XNSECommon.PhysicalParameters.AllOne;
        C.PhysicalParameters.IncludeConvection = true;
    }
    C.PhysicalParameters.Material = true;
    
    C.VelocityBlockPrecondMode = BoSSS.Solution.AdvancedSolvers.MultigridOperator.Mode.SymPart_DiagBlockEquilib_DropIndefinite;
    C.PressureBlockPrecondMode = BoSSS.Solution.AdvancedSolvers.MultigridOperator.Mode.IdMass_DropIndefinite;
    
    if(!onWall) {
        C.AddBoundaryValue("wall");

        if(elliptic){
            string a_str = a.ToString();
            string b_str = b.ToString();
            if(quadratic) {
                C.AddInitialValue("Phi", "X => ((X[0]).Pow2() / "+a_str+".Pow2() + (X[1]).Pow2() / "+b_str+".Pow2()) - 1.0", false);
            } else { 
                C.AddInitialValue("Phi", "X => Math.Sqrt(((X[0]).Pow2() / "+a_str+".Pow2() + (X[1]).Pow2() / "+b_str+".Pow2())) - 1.0", false);   
            }
        } else {
            string r_str = radius.ToString();
            C.AddInitialValue("Phi", "X => ((X[0]).Pow2() + (X[1]).Pow2()).Sqrt() - "+r_str, false);
        }
        
        C.SessionName = "StaticDroplet_ConvStudyPhi8HMF_k" + pDeg + "_mesh" + iGrd;
        if(kummer) {
            C.SessionName = "StaticDroplet_newConvStudyKummer_dropIndef_k" + pDeg + "_mesh" + iGrd;
        }
        if(hysing) {
            C.SessionName = "StaticDroplet_ConvStudyHysing_k" + pDeg + "_mesh" + iGrd;
        }
    
    } else {
        C.AddBoundaryValue("navierslip_linear");
        
        double s     = 2 * radius * Math.Sin(theta0);
        double h     = Math.Sqrt(radius.Pow2() - (0.25 * s.Pow2()));
        string h_str = h.ToString();
        string r_str = radius.ToString();
        C.AddInitialValue("Phi", "X => ((X[0]).Pow2() + (X[1] - "+h_str+").Pow2()).Sqrt() - "+r_str, false);
            
        C.PhysicalParameters.betaS_A = beta;
        C.PhysicalParameters.betaS_B = beta;
        C.PhysicalParameters.betaL   = 0.0;
        C.PhysicalParameters.theta_e = thetaE;
        
        C.SessionName = "StaticDropletOnWall_ConvStudy_k" + pDeg + "_mesh" + iGrd;
    }
    
    //C.LSContiProjectionMethod = BoSSS.Solution.LevelSetTools.ContinuityProjectionOption.ConstrainedDG;
    if(kummer) {
        //C.AdvancedDiscretizationOptions.SST_isotropicMode = BoSSS.Solution.XNSECommon.SurfaceStressTensor_IsotropicMode.Curvature_Projected;
    }
    if(hysing) {
        C.FastMarchingPenaltyTerms = BoSSS.Solution.LevelSetTools.Smoothing.JumpPenalization.jumpPenalizationTerms.Jump;
        
        C.dtMin         = 0.01;
        C.dtMax         = 0.01;
        C.NoOfTimesteps = 12500;
    }
       
    //controls[iDeg - iDeg0,iGrd - iGrd0] = C;
    controls.Add(C);
    C.CreateJob(); // job will be permanently linked to control object

}
}
**************
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB

==============
controls.Count;
**************
18
==============
//Info(controls[0,0]);
//controls[0,0].SessionName
controls.ElementAt(0).SessionName
**************
StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh0
==============
LastError
**************
==============
//var j00 = controls.ElementAt(0).GetJob();
**************
==============
//j00.Activate(myBatch);
**************
==============
//j00.Status;
**************
==============
//j00.Stdout;
**************
==============
//j00.Stderr;
**************
==============
using System.Threading;
**************
==============
bool run      = false;
bool parallel = false;
**************
==============
//int j = 0;
foreach(var cntrl in controls) {
    var job = cntrl.GetJob();
    if(run) {
        Console.WriteLine("Submitting Session: {0}", cntrl.SessionName);
        //if(parallel) {
        //    job.NumberOfMPIProcs = procPerCntrl.ElementAt(j);
        //    j++;
        //}
        job.Activate(myBatch);
    } else {
        Console.WriteLine("Session: {0}", cntrl.SessionName);
        var jS = job.Status;
        Console.WriteLine("Status: {0}", jS);
    }
}
**************
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh0
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh1
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh2
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh3
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh4
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh5
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh0
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh1
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh2
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh3
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh4
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh5
Status: InProgress
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh0
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh1
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh2
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh3
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh4
Status: FinishedSuccessful
Session: StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh5
Status: InProgress

==============
LastError
**************
==============
**************
==============
**************
==============
**************
==============
/*
List<ISessionInfo> filtSess = new List<ISessionInfo>();
foreach(var sess in databases.Pick(3).Sessions) {
    if(sess.Name.Contains("StaticDroplet_ConvStudyKummer2")) {
        filtSess.Add(sess);  
    }        
}
filtSess
*/
**************
Incomplete statement - missing closing parentheses?.

==============
//filtSess.DeleteAll()
**************
==============
**************
==============
//databases.Pick(3).Sessions
**************
==============
//databases.Pick(3).Sessions.Take(1).DeleteAll()
**************
==============
**************
==============
//databases.Pick(3).Sessions.Pick(0).Export().WithSupersampling(2).Do()
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
