restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 4 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 49; Grid Count = 621; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
  3: { Session Count = 33; Grid Count = 1234; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
}

 Console ready for input. Type 'help' for help.

==============
//var myDb = OpenOrCreateDefaultDatabase();
var myDb = OpenOrCreateDatabase(@"\\hpccluster\hpccluster-scratch\smuda\XNSE_studyDB")
**************
==============
ExecutionQueues;
**************
List of 1 instances of BatchProcessorClient {
  0: BoSSS.Application.BoSSSpad.MiniBatchProcessorClient
}
==============
ExecutionQueues[0].AllowedDatabases;
**************
List of 0 instances of IDatabaseInfo {
}
==============
var myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\smuda\binaries", "hpccluster");
**************
==============
using BoSSS.Application.XNSE_Solver;
**************
==============
**************
==============
WorkflowMgm.Init("CapillaryWave");   // set project name
**************
Project name is set to 'CapillaryWave'.

==============
//WorkflowMgm.SetEqualityBasedSessionJobControllCorrelation();
**************
==============
**************
==============
// ===========================
// Grids for Convergence Study
// ===========================
**************
==============
var GridSeq = new IGridInfo[3];
int[] kelemSeq = new int[]{ 8, 16, 32 };
**************
==============
double L = 1;    // equals lambda
**************
==============
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
    
    int kelem = kelemSeq[iGrid];
    
    GridCommons grd;

    double[] xNodes = GenericBlas.Linspace(0, L, kelem + 1);
    double[] yNodes = GenericBlas.Linspace(-(3.0/2.0)*L, (3.0/2.0)*L, (3 * kelem) * 1);    
    grd = Grid2D.Cartesian2DGrid(xNodes, yNodes, periodicX: true);

    grd.EdgeTagNames.Add(1, "wall");
 
    grd.DefineEdgeTags(delegate (double[] X) {
        byte et = 0;
        if (Math.Abs(X[1] + (3.0/2.0)*L) <= 1.0e-8)
            et = 1;
        if (Math.Abs(X[1] - (3.0/2.0)*L) <= 1.0e-8)
            et = 1;
        return et;
    });

    grd.Name = "CapillaryWave_studyMesh"+kelem;
    myDb.SaveGrid(ref grd);
    
    GridSeq[iGrid] = grd;
}
**************
Grid Edge Tags changed.
An equivalent grid is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid is already present in the database -- the grid will not be saved.

==============
**************
==============
// ======================
// Create Control objects
// ======================
**************
==============
using BoSSS.Application.XNSE_Solver.PhysicalBasedTestcases;
**************
==============
int[] degS = new int[] { 2 };
**************
==============
**************
==============
// physical parameter setups

double rho;               
double mu;
double sigma;

double[] dt;
double t_end;
 
int setup = 0;
switch(setup) {
    case 0: {
        // Capillary wave: Laplace number La = 3e5: 
        rho   = 1e-3;
        mu    = 1e-5;
        sigma = 3e-2;
        dt    = new double[] {8e-4, 3e-4, 1e-4};
        t_end = 0.4;
        break;
    }
    case 1: {
        // Capillary wave: Laplace number La = 3000: 
        rho   = 1e-3;
        mu    = 1e-4;
        sigma = 3e-2;
        dt    = new double[] {8e-4, 3e-4, 1e-4};
        t_end = 0.4;
        break;
    }
    case 2: {
        // Capillary wave: Laplace number La = 120: 
        rho   = 1e-3;
        mu    = 5e-4;
        sigma = 3e-2;
        dt    = new double[] {8e-4, 3e-4, 1e-4};
        t_end = 0.4;
        break;
    }
    case 3: {
        // Capillary wave: Laplace number La = 3: 
        rho   = 1e-3;
        mu    = 1e-3;
        sigma = 3e-3;
        dt    = new double[] {2e-3, 1e-3, 3e-4};
        t_end = 1.3;
        break;
    }
}
**************
==============
int deg0 = 0;
int grd0 = 2;
XNSE_Control[,] controls = new XNSE_Control[degS.Length - deg0, GridSeq.Length - grd0];
**************
==============
for(int iDeg = deg0; iDeg < degS.Length; iDeg++) {
for(int iGrd = grd0; iGrd < GridSeq.Length; iGrd++) {
    
    var C    = CapillaryWave.CW_forWorksheet();
    
    int pDeg = degS[iDeg];   
    var grd  = GridSeq[iGrd];

    C.SetDGdegree(pDeg);
    
    C.SetGrid(grd);
    C.AddBoundaryValue("wall");
    
    string L_str  = L.ToString();
    double A0     = L/100;
    string A0_str = A0.ToString();
    C.AddInitialValue("Phi", "X => X[1] - "+A0_str+" * Math.Sin(X[0] * 2.0 * Math.PI / "+L_str+")", false);
    
    double[] param = new double[4];
    param[0] = 1;        // wavenumber;
    param[1] = L;        // wavelength
    param[2] = A0;       // initial disturbance
    param[3] = 0.0;      // y-gravity
    C.AdditionalParameters = param;

    C.PhysicalParameters.rho_A = rho;
    C.PhysicalParameters.rho_B = rho;
    C.PhysicalParameters.mu_A  = mu;
    C.PhysicalParameters.mu_B  = mu;
    C.PhysicalParameters.Sigma = sigma;
    
    C.dtMin         = dt[iGrd];
    C.dtMax         = dt[iGrd];
    C.NoOfTimesteps = (int)(t_end/dt[iGrd]); 
    
    C.SessionName = "CapillaryWave_Setup"+setup+"_k" + pDeg + "_mesh" + iGrd;
    
    controls[iDeg-deg0,iGrd-grd0] = C;
    C.CreateJob(); // job will be permanently linked to control object
}
}
**************
Info: setting database path to: \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB

==============
//Info(controls[0,0]);
controls[0,0].SessionName
**************
CapillaryWave_Setup0_k2_mesh2
==============
var j00 = controls[0,0].GetJob();
**************
==============
j00.Activate(myBatch);
**************
Job not submitted yet, or no result session is known - starting submission.
Warning: no database is set for the job to submit; nothing ma be saved.
Deploying executables and additional files ...
Deployment directory: \\hpccluster\hpccluster-scratch\smuda\binaries\CapillaryWave-XNSE_Solver2020Mar26_111021
copied 32 files.
   writing file: control.obj
   copied 'amd64' runtime.
deployment finished.

==============
j00.Status;
**************
InProgress
==============
//j00.Stdout;
**************
==============
j00.Stderr;
**************
==============
**************
==============
**************
==============
//WorkflowMgm.Sessions
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
//databases.Pick(2).Sessions.Pick(0).Delete()
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
