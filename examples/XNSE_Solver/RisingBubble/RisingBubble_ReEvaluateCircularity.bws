restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 6 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 79; Grid Count = 777; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
  3: { Session Count = 743; Grid Count = 19525; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
  4: { Session Count = 172; Grid Count = 337; Path = D:\local\local_XNSE_StudyDB }
  5: { Session Count = 67; Grid Count = 301; Path = \\terminal03\Users\smuda\local\terminal03_XNSE_studyDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Foundation;
using BoSSS.Foundation.Quadrature;
using BoSSS.Foundation.XDG;
using BoSSS.Solution.XNSECommon;
using BoSSS.Application.XNSE_Solver;
**************
(1,2): warning CS0105: The using directive for `BoSSS.Foundation' appeared previously in this namespace
No. of errors|warnings: 0|1.

==============
WorkflowMgm.Init("RisingBubble")
**************
Project name is set to 'RisingBubble'.

==============
//WorkflowMgm.Sessions;
**************
==============
string studyName = "tc1_k2_mesh40";
List<ISessionInfo> evalSess = new List<ISessionInfo>();
List<ISessionInfo> evalSessNT = new List<ISessionInfo>();
foreach(var sess in WorkflowMgm.Sessions) {
    if(sess.Name.Contains(studyName)) {
        if(Convert.ToBoolean(sess.SuccessfulTermination))
            evalSess.Add(sess);  
        else 
            evalSessNT.Add(sess);
    }        
}
evalSess
**************
Loading session d5d0e3a2-b47e-4602-b644-7be3d6a02bc6 failed with message 'Unexpected end when deserializing object. Path 'm_KeysAndQueries.PressureBlockPrecondMode'.'
Loading session b3e86543-1b07-405c-a359-ae9592e5d3df failed with message 'Unexpected end when deserializing object. Path 'm_KeysAndQueries.PressureBlockPrecondMode'.'
Loading session 097e1b7d-e16c-4525-a5dc-1c47cd35a00a failed with message 'Unexpected end when deserializing object. Path 'm_KeysAndQueries.Timestepper_Scheme'.'
Loading session 137b157c-93c2-4d88-9971-8d3c688eba75 failed with message 'Could not find file '\\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB\sessions\137b157c-93c2-4d88-9971-8d3c688eba75\Session.info'.'
Loading session 28adc7a7-a336-435b-b560-d3c02f46c43d failed with message 'Could not find file '\\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB\sessions\28adc7a7-a336-435b-b560-d3c02f46c43d\Session.info'.'
List of 2 instances of ISessionInfo {
  0: RisingBubble	RisingBubble_tc1_k2_mesh40_volumeCorrection	09/02/2020 13:51:29	54ff7981...
  1: RisingBubble	RisingBubble_tc1_k2_mesh40_rerun	09/02/2020 13:53:37	c42f1f5c...
}
==============
**************
==============
// ======================
// reevaluate circularity
// ======================
**************
==============
var sess = evalSess.Pick(1);
**************
==============
int timesteps = sess.Timesteps.Count;
**************
==============
double[] time = new double[timesteps];
double[] circ = new double[timesteps];
**************
==============
bool volCorrection = true;
double conservArea = 0.0;
double[] circCor = new double[timesteps];
**************
==============
for(int ts = 0; ts < timesteps; ts++) {
    
    time[ts] = sess.Timesteps.Pick(ts).PhysicalTime;
    
    var phi    = sess.Timesteps.Pick(ts).Fields.ElementAt(0);
    var LevSet = new LevelSet(phi.Basis, "LevelSet"); 
    LevSet.Acc(1.0, phi);
    var LsTrk = new LevelSetTracker((BoSSS.Foundation.Grid.Classic.GridData) phi.GridDat, XQuadFactoryHelper.MomentFittingVariants.Saye, 1, new string[] { "A", "B" }, LevSet);
    LsTrk.UpdateTracker();
    
    int order        = 6; 
    var SchemeHelper = LsTrk.GetXDGSpaceMetrics(LsTrk.SpeciesIdS.ToArray(), order, 1).XQuadSchemeHelper;

    // area of bubble
    double area     = 0.0;
    SpeciesId spcId = LsTrk.SpeciesIdS[0];
    var vqs         = SchemeHelper.GetVolumeQuadScheme(spcId);
    CellQuadrature.GetQuadrature(new int[] { 1 }, LsTrk.GridDat,
        vqs.Compile(LsTrk.GridDat, order),
        delegate (int i0, int Length, QuadRule QR, MultidimensionalArray EvalResult) {
             EvalResult.SetAll(1.0);
        },
        delegate (int i0, int Length, MultidimensionalArray ResultsOfIntegration) {
            for (int i = 0; i < Length; i++)
                area += ResultsOfIntegration[i, 0];
        }
    ).Execute();
    
    // perimeter of bubble
    double perimtr_b         = 0.0;
    CellQuadratureScheme cqs = SchemeHelper.GetLevelSetquadScheme(0, LsTrk.Regions.GetCutCellMask());
    CellQuadrature.GetQuadrature(new int[] { 1 }, LsTrk.GridDat,
        cqs.Compile(LsTrk.GridDat, order),
        delegate (int i0, int Length, QuadRule QR, MultidimensionalArray EvalResult) {
            EvalResult.SetAll(1.0);
        },
        delegate (int i0, int Length, MultidimensionalArray ResultsOfIntegration) {
            for (int i = 0; i < Length; i++)
                perimtr_b += ResultsOfIntegration[i, 0];
        }
    ).Execute();
    
    circ[ts] = Math.Sqrt(4*Math.PI*area)/perimtr_b;
    
    
    // check volume conservation
    if (volCorrection) {
        if (ts == 0) {
            conservArea = area;    // set conserved area         
        }
        double cmc = (conservArea - area) / perimtr_b;
        //Console.WriteLine("cmc value = {0}", cmc);
        LevSet.AccConstant(-cmc);
        LsTrk.UpdateTracker();
        
        SchemeHelper = LsTrk.GetXDGSpaceMetrics(LsTrk.SpeciesIdS.ToArray(), order, 1).XQuadSchemeHelper;
        
        // area of bubble
        area = 0.0;
        vqs  = SchemeHelper.GetVolumeQuadScheme(spcId);
        CellQuadrature.GetQuadrature(new int[] { 1 }, LsTrk.GridDat,
            vqs.Compile(LsTrk.GridDat, order),
            delegate (int i0, int Length, QuadRule QR, MultidimensionalArray EvalResult) {
                 EvalResult.SetAll(1.0);
            },
            delegate (int i0, int Length, MultidimensionalArray ResultsOfIntegration) {
                for (int i = 0; i < Length; i++)
                    area += ResultsOfIntegration[i, 0];
            }
        ).Execute();
    
        // perimeter of bubble
        perimtr_b = 0.0;
        cqs       = SchemeHelper.GetLevelSetquadScheme(0, LsTrk.Regions.GetCutCellMask());
        CellQuadrature.GetQuadrature(new int[] { 1 }, LsTrk.GridDat,
            cqs.Compile(LsTrk.GridDat, order),
            delegate (int i0, int Length, QuadRule QR, MultidimensionalArray EvalResult) {
                EvalResult.SetAll(1.0);
            },
            delegate (int i0, int Length, MultidimensionalArray ResultsOfIntegration) {
                for (int i = 0; i < Length; i++)
                    perimtr_b += ResultsOfIntegration[i, 0];
            }
        ).Execute();
        
        circCor[ts] = Math.Sqrt(4*Math.PI*area)/perimtr_b;
    }
    
}
**************
==============
var plt = new Gnuplot();
**************
Using gnuplot: C:\Users\smuda\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe

==============
PlotFormat pltForm = new PlotFormat();
pltForm.LineColor  = LineColors.Black;
pltForm.Style      = Styles.Lines;
**************
==============
**************
==============
PlotFormat pltCorForm = new PlotFormat();
pltCorForm.LineColor  = LineColors.Red;
pltCorForm.Style      = Styles.Lines;
**************
==============
plt.PlotXY(time, circ, format:pltForm);
plt.PlotXY(time, circCor, format:pltCorForm);
plt.PlotNow();
**************
System.Drawing.Bitmap
==============
circ.Min()
**************
0.902865964772154
==============
circCor.Min()
**************
0.902699413261519
==============
**************
==============
**************
==============
**************
==============
