restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 5 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 79; Grid Count = 777; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
  3: { Session Count = 408; Grid Count = 8681; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
  4: { Session Count = 121; Grid Count = 9; Path = D:\local\local_XNSE_StudyDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.XNSE_Solver;
using BoSSS.Solution.LevelSetTools.FourierLevelSet;
**************
==============
//var myDb = OpenOrCreateDefaultDatabase();
//var myDb = OpenOrCreateDatabase(@"\\hpccluster\hpccluster-scratch\smuda\XNSE_studyDB")
**************
==============
ExecutionQueues;
**************
List of 2 instances of BatchProcessorClient {
  0: MiniBatchProcessor client @D:\local\binaries
  1: MiniBatchProcessor client @\\hpccluster\hpccluster-scratch\smuda\binaries
}
==============
ExecutionQueues[0].AllowedDatabases;
**************
List of 1 instances of IDatabaseInfo {
  0: { Session Count = 121; Grid Count = 9; Path = D:\local\local_XNSE_StudyDB }
}
==============
//var myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\smuda\binaries", "hpccluster");
var myBatch = ExecutionQueues[0];
**************
==============
var myDb = ExecutionQueues[0].AllowedDatabases[0];
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning(false);
**************
Starting mini batch processor in background thread...
True
==============
**************
==============
WorkflowMgm.Init("RisingBubble");   // set project name
**************
Project name is set to 'RisingBubble'.

==============
//WorkflowMgm.SetEqualityBasedSessionJobControllCorrelation();
**************
==============
//databases.Pick(3).Sessions.Pick(407).KeysAndQueries
**************
==============
**************
==============
// ========================
// physical parameter setup
// ========================
**************
==============
int setup = 0;
**************
==============
// ===========================
// Grids for Convergence Study
// ===========================
**************
==============
var GridSeq = new IGridInfo[2];
int[] kelemSeq = new int[]{ 10, 20, 40, 60, 80 };
//int[] kelemSeq = new int[]{ 10, 60 };
**************
==============
//double[] dt = 3e-3; 
**************
==============
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
    
    int kelem = kelemSeq[iGrid];
    
    GridCommons grd;

    double[] Xnodes = GenericBlas.Linspace(0, 1.0, kelem + 1);
    double[] Ynodes = GenericBlas.Linspace(0, 2.0, 2 * kelem + 1);
    grd = Grid2D.Cartesian2DGrid(Xnodes, Ynodes);

    grd.EdgeTagNames.Add(1, "wall_lower");
    grd.EdgeTagNames.Add(2, "wall_upper");
    grd.EdgeTagNames.Add(3, "freeslip_left");
    grd.EdgeTagNames.Add(4, "freeslip_right");

    grd.DefineEdgeTags(delegate (double[] X) {   
        byte et = 0;
        if (Math.Abs(X[1]) <= 1.0e-8)       
            et = 1;
        if (Math.Abs(X[1] - 2.0) <= 1.0e-8)
            et = 2;
        if (Math.Abs(X[0]) <= 1.0e-8)
            et = 3;
        if (Math.Abs(X[0] - 1.0) <= 1.0e-8)
            et = 4;
        return et;
    });
/*    
    grd.AddPredefinedPartitioning("ZwoProcSplit", delegate (double[] X) {
        int rank;
        double x = X[0];
        if (x < 0.5)
            rank = 0;
        else
            rank = 1;
        return rank;
    });

    grd.AddPredefinedPartitioning("VierProcSplit", delegate (double[] X) {
        int rank;
        double x = X[0];
        if (x < 0.35)
            rank = 0;
        else if (x < 0.5)
           rank = 1;
        else if (x < 0.75)
            rank = 2;
        else
            rank = 3;
        return rank;
    });
*/
    grd.Name = "RisingBubble_ConvergenceStudy2Mesh"+iGrid; //+"_withPartitioning";
    myDb.SaveGrid(ref grd);
    
    GridSeq[iGrid] = grd;
}
**************
Grid Edge Tags changed.
An equivalent grid (6e139417-6764-4c95-98d0-bcbaf731013c) is already present in the database -- the grid will not be saved.
Grid Edge Tags changed.
An equivalent grid (99561ff6-3923-4249-977a-95523e30baac) is already present in the database -- the grid will not be saved.

==============
/*
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
    
    ((GridCommons)GridSeq[iGrid]).AddPredefinedPartitioning("ZwoProcSplit", delegate (double[] X) {
        int rank;
        double x = X[0];
        if (x < 0.5)
            rank = 0;
        else
            rank = 1;
        return rank;
    });

    ((GridCommons)GridSeq[iGrid]).AddPredefinedPartitioning("VierProcSplit", delegate (double[] X) {
        int rank;
        double x = X[0];
        if (x < 0.35)
            rank = 0;
        else if (x < 0.5)
            rank = 1;
        else if (x < 0.75)
            rank = 2;
        else
            rank = 3;
        return rank;
    });
}
*/
**************
Incomplete statement - missing closing parentheses?.

==============
// Fourier Level Set
// =================
double[] center = new double[] { 0.5, 0.5 }; 
double radius = 0.25;

int numSp = 640;    // should increase for higher resolutions
double[] FourierP = new double[numSp];
double[] samplP = new double[numSp];
for (int sp = 0; sp < numSp; sp++) {
    FourierP[sp] = sp * (2 * Math.PI / (double)numSp);
    samplP[sp] = radius;
}

var FLSCSeq = new FourierLevSetControl[GridSeq.Length];
//double circum = 2.0 * Math.PI * radius;
//double filter = (circum * 20.0) / ((double)numSp / 2.0);
for(int iGrid = 0; iGrid < GridSeq.Length; iGrid++) {
FLSCSeq[iGrid] = new BoSSS.Solution.LevelSetTools.FourierLevelSet.FourierLevSetControl(FourierType.Polar, 2 * Math.PI, FourierP, samplP, 1.0 / (double)kelemSeq[iGrid]) {
    //C.FourierLevSetControl = new FourierLevSetControl(FourierType.Polar, 2.0*Math.PI, PeriodicFunc, radius, 1.0/(double)kelem) { 
    center = center,
    FourierEvolve = Fourier_Evolution.MaterialPoints,
    centerMove = CenterMovement.Reconstructed
    //curvComp_extended = false
};
}
**************
==============
// ======================
// Create Control objects
// ======================
**************
==============
using BoSSS.Application.XNSE_Solver.PhysicalBasedTestcases;
**************
==============
int[] degS = new int[] { 3 };
**************
==============
bool dt_min = false;
double[,] dts = new double[,] {{1.5e-2, 5e-3, 2e-3, 1e-3, 6e-4}, {1e-2, 3e-3, 1e-3, 6e-4, 5e-4}, {6e-3, 2e-3, 7.5e-4, 5e-4, 3e-4}};   // for tc1 and grids {10, 20, 40, 60, 80}
double dt_fixed = 5e-4;
//int[] timesteps = new int[,] {{200, 600, 1500, 3000, 5000}, {300, 1000, 3000, 5000, 6000}, {500, 1500, 4000, 6000, 10000}};
//double[,] dts = new double[,] {{6e-3, 2e-3, 1e-3, 7.5e-4}, {4e-3, 1.5e-3, 7.5e-9, 6e-4}, {3e-3, 1e-3, 6e-4, 4e-4}};    // for tc2 and grids {20, 40, 60, 80} with AMR lvl1
//int[] timesteps = new int[,] {{500, 1500, 3000, 4000}, {750, 2000, 4000, 5000}, {1000, 3000, 5000, 7500}};
**************
==============
int[,] logPs = new int[,] {{1, 1, 1, 1, 2}, {1, 1, 1, 2, 2}, {1, 1, 2, 2, 3}};
int logP_fixed = 2;
//int[,] logPs = new int[,] {{1, 1, 1, 2}, {1, 1, 1, 2}, {1, 1, 2, 3}};
**************
==============
**************
==============
string restartStudyName = "_ExtVel";
List<ISessionInfo> restartStudySess = new List<ISessionInfo>();
foreach(var sess in WorkflowMgm.Sessions) {
    if(sess.Name.Contains(restartStudyName)) {
        if(!Convert.ToBoolean(sess.SuccessfulTermination))
            restartStudySess.Add(sess);  
    }        
}
restartStudySess
**************
List of 6 instances of ISessionInfo {
  0: RisingBubble	RisingBubble_ExtVelLB3_k2_mesh1*	04/19/2020 20:11:05	27695456...
  1: RisingBubble	RisingBubble_ExtVelLB_k2_mesh1_restart*	04/17/2020 15:18:22	bc355a70...
  2: RisingBubble	RisingBubble_ExtVelCurv2_k2_mesh1*	03/31/2020 10:23:09	84087e56...
  3: RisingBubble	RisingBubble_ExtVelLB2_k2_mesh1*	03/31/2020 10:21:47	ab0a7316...
  4: RisingBubble	RisingBubble_ExtVelCurv_k2_mesh1*	03/30/2020 16:45:02	09f68852...
  5: RisingBubble	RisingBubble_ExtVelLB_k2_mesh1*	03/30/2020 16:43:52	cfbee3d5...
}
==============
bool restart = false;
Guid[] restartID = new Guid[2];
restartID[1] = restartStudySess.ElementAt(2).ID;
//restartID[1] = databases.Pick(3).Sessions.Pick(407);
restartID
**************
List of 2 instances of Guid {
  0: 00000000-0000-0000-0000-000000000000
  1: 84087e56-31e3-4c80-a0e7-36b7052092f9
}
==============
bool withAMR = false;
**************
==============
int deg0 = 0;
int grd0 = 1;
//XNSE_Control[,] controls = new XNSE_Control[degS.Length-deg0, GridSeq.Length-grd0];
List<XNSE_Control> controls = new List<XNSE_Control>();
**************
==============
for(int iDeg = deg0; iDeg < degS.Length; iDeg++) {
for(int iGrd = grd0; iGrd < GridSeq.Length; iGrd++) {
    
    var C = RisingBubble.RB_forWorksheet(setup, restart);
    
    C.switchOffPlotting = true;
    
    int pDeg = degS[iDeg];   
    var grd  = GridSeq[iGrd];

    C.SetDGdegree2(pDeg);
    C.FieldOptions.Add("GravityY", new FieldOpts() {
        SaveToDB = FieldOpts.SaveToDBOpt.TRUE
    });
    
    if(restart) {
        C.DbPath      = myDb.Path;
        C.GridGuid    = restartStudySess.ElementAt(0).Timesteps.Last().GridID;
        C.RestartInfo = new Tuple<Guid, BoSSS.Foundation.IO.TimestepNumber>(restartID[iGrd], null);
    } else {
        C.SetGrid(grd);
    }
    //C.GridPartType    = GridPartType.Predefined;
    //C.GridPartOptions = "ZwoProcSplit";
    C.AddBoundaryValue("wall_lower");
    C.AddBoundaryValue("wall_upper");
    C.AddBoundaryValue("freeslip_left");
    C.AddBoundaryValue("freeslip_right");
    
    C.SetLevelSetMethod(0, FLSCSeq[iGrd]);
    if(setup == 1 || withAMR) {
        C.AdaptiveMeshRefinement = true;
        C.RefineStrategy         = XNSE_Control.RefinementStrategy.constantInterface;
        C.BaseRefinementLevel    = 1;
    }
    
        
    double dt       = (dt_min) ? dt_fixed : dts[iDeg, iGrd];
    C.dtMin         = dt;
    C.dtMax         = dt;
    C.NoOfTimesteps = (int)(3.0/dt);
    
    int logP     = (dt_min) ? logP_fixed : logPs[iDeg, iGrd];
    C.LogPeriod  = logP;
    C.saveperiod = 10*logP;   
    
    //C.SessionName = "RisingBubble_tc2_ConvStudy2_k" + pDeg + "_mesh" + iGrd;
    C.SessionName = "RisingBubble_ConvStudy_k" + pDeg + "_mesh0_rerun";
    //C.SessionName = "RisingBubble_"+C.methodTagLS+"3_k" + pDeg + "_mesh" + iGrd;
    
    //controls[iDeg-deg0,iGrd-grd0] = C;
    controls.Add(C);
    C.CreateJob(); // job will be permanently linked to control object
}
}
**************
Info: setting database path to: D:\local\local_XNSE_StudyDB

==============
controls.Count()
**************
1
==============
//Info(controls[0,0]);
//controls[0,0].SessionName
controls.ElementAt(0).SessionName
**************
RisingBubble_ConvStudy_k3_mesh0_rerun
==============
**************
==============
//LastError
**************
==============
//j00.Activate(myBatch);
**************
==============
//j00.Status;
**************
==============
//j00.Stdout;
**************
==============
//j00.Stderr;
**************
==============
foreach(var cntrl in controls) {
    Console.WriteLine("Submitting Session: {0}", cntrl.SessionName);
    var job              = cntrl.GetJob();
    //job.NumberOfMPIProcs = 4;
    job.Activate(myBatch);
}
**************
Submitting Session: RisingBubble_ConvStudy_k3_mesh0_rerun
System.NotSupportedException occurred: Job can only be activated once.. Type 'LastError' for details.

==============
foreach(var cntrl in controls) {
    Console.WriteLine("Status Session: {0}", cntrl.SessionName);
    var job              = cntrl.GetJob();
    Console.WriteLine(job.Status);
}
**************
Status Session: RisingBubble_ConvStudy_k3_mesh0_rerun
PendingInExecutionQueue

==============
**************
==============
//WorkflowMgm.Sessions
**************
==============
//WorkflowMgm.Sessions.Pick(23).OpenSessionDirectory()
**************
==============
**************
==============
**************
==============
//databases.Pick(3).Sessions
**************
==============
**************
==============
//databases.Pick(3).Sessions.Take(2).DeleteAll()
**************
==============
**************
==============
//databases.Pick(3).Sessions.Pick(0).Delete()
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
