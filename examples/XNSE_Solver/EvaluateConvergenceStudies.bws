restart
**************

  BoSSSpad C# interpreter
  _______________________

Databases loaded:
List of 5 instances of IDatabaseInfo {
  0: { Session Count = 145; Grid Count = 23156; Path = \\hpccluster\hpccluster-scratch\smuda\CapillaryRise_studyDB }
  1: { Session Count = 175; Grid Count = 253; Path = D:\local\local_test_db }
  2: { Session Count = 79; Grid Count = 777; Path = \\hpccluster\hpccluster-scratch\smuda\XNSFE_testDB }
  3: { Session Count = 408; Grid Count = 8681; Path = \\HPCCLUSTER\hpccluster-scratch\smuda\XNSE_studyDB }
  4: { Session Count = 121; Grid Count = 7; Path = D:\local\local_XNSE_StudyDB }
}

 Console ready for input. Type 'help' for help.

==============
using BoSSS.Foundation.XDG;
**************
==============
WorkflowMgm.Init("StaticDroplet");
//WorkflowMgm.Init("RisingBubbleStatic");
//WorkflowMgm.Init("TwoPhaseTaylorCouette");
**************
Project name is set to 'StaticDroplet'.

==============
//WorkflowMgm.Sessions;
**************
==============
string studyName = "StaticDroplet_newConvStudyKummer_dropIndef_k";
//string studyName = "ConvStudy";
string[] FieldsToCompare = new string[] {"VelocityX", "VelocityY", "Pressure"};
int numFields = FieldsToCompare.Length;
**************
==============
List<ISessionInfo> studySess = new List<ISessionInfo>();
List<ISessionInfo> studySessNT = new List<ISessionInfo>();
foreach(var sess in WorkflowMgm.Sessions) {
    if(sess.Name.Contains(studyName)) {
        if(Convert.ToBoolean(sess.SuccessfulTermination))
            studySess.Add(sess);  
        else 
            studySessNT.Add(sess);
    }        
}
studySessNT
**************
List of 2 instances of ISessionInfo {
  0: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh5*	05/06/2020 13:43:47	3fbb4159...
  1: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh5*	05/06/2020 13:42:18	9bc4b7ea...
}
==============
studySess
**************
List of 16 instances of ISessionInfo {
  0: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh4	05/06/2020 13:43:31	d36120df...
  1: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh3	05/06/2020 13:43:14	6528b40e...
  2: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh5	05/06/2020 13:40:44	6a93f4ee...
  3: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh4	05/06/2020 13:42:02	ebbe1e30...
  4: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh2	05/06/2020 13:42:51	541f7a4c...
  5: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh1	05/06/2020 13:42:51	c0d2e7b8...
  6: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh3	05/06/2020 13:42:01	8546fff5...
  7: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k4_mesh0	05/06/2020 13:42:18	4f63634b...
  8: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh2	05/06/2020 13:41:31	1df15f7e...
  9: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh4	05/06/2020 13:40:24	05a1d130...
  10: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh1	05/06/2020 13:41:00	4c66fd6b...
  11: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k3_mesh0	05/06/2020 13:40:44	19d2237b...
  12: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh3	05/06/2020 13:40:09	4c947885...
  13: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh2	05/06/2020 13:40:08	ee1e26ec...
  14: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh1	05/06/2020 13:39:46	cbe578e4...
  15: StaticDroplet	StaticDroplet_newConvStudyKummer_dropIndef_k2_mesh0	05/06/2020 13:39:31	47e6ecbc...
}
==============
var ConvPlts = new List<Plot2Ddata>[numFields];
for(int i = 0; i < numFields; i++) {
    ConvPlts[i] = new List<Plot2Ddata>();
}
int[] pOrder = new int[] { 2, 3, 4 };
**************
==============
foreach(int p in pOrder) {
    var pDegSess = studySess.Where(s => Convert.ToInt32(s.KeysAndQueries["DGdegree:Velocity*"]) == p).ToArray();
    
    ITimestepInfo[] timesteps = pDegSess.Select(s => s.Timesteps.Newest()).ToArray();
      
    double[] GridRes;
    Dictionary<string, int[]> __DOFs;
    Dictionary<string, double[]> L2Errors;
    Guid[] timestepIds;
    
    DGFieldComparison.ComputeErrors(FieldsToCompare, timesteps, out GridRes, out __DOFs, out L2Errors, out timestepIds);
    
    int fI = 0;
    foreach(var fName in FieldsToCompare) {
        Dictionary<string, double[][]> dataGroups = new Dictionary<string, double[][]>();
        dataGroups.Add("$k = "+p+"$", new double[2][] { GridRes, L2Errors[fName] });
        ConvPlts[fI].Add(new Plot2Ddata(dataGroups.ToArray()).WithLogX().WithLogY());
        fI++;
    }
}
**************
==============
LastError
**************
==============
for(int i = 0; i < numFields; i++) {
for(int j = 0; j < pOrder.Length; j++) {
    ConvPlts[i].ElementAt(j).dataGroups[0].Format.PointSize = 0.8;    
    ConvPlts[i].ElementAt(j).dataGroups[0].Format.DashType = DashTypes.Dotted;
    ConvPlts[i].ElementAt(j).dataGroups[0].Format.LineWidth = 2;
}
}
**************
==============
**************
==============
Plot2Ddata[] fConvDat = new Plot2Ddata[numFields];
for(int i = 0; i < numFields; i++) {
    fConvDat[i] = ConvPlts[i].ElementAt(0);
    foreach(var plt in ConvPlts[i].Skip(1)) {
        fConvDat[i] = fConvDat[i].Merge(plt);
    }
}
**************
==============
FieldsToCompare
**************
List of 3 instances of String {
  0: VelocityX
  1: VelocityY
  2: Pressure
}
==============
int FldId = 0;
**************
==============
fConvDat[FldId].Regression();
**************
List of 3 instances of KeyValuePair{String,Double} {
  0: [$k = 2$, 3.40510617911264]
  1: [$k = 3$, 3.71395441728266]
  2: [$k = 4$, 4.27109841232742]
}
==============
//var fcDat = fConvDat[FldId].ToGnuplot().PlotCairolatex(xSize:14,ySize:12);
//fcDat.SaveTo(@"D:\BoSSS-experimental\public\examples\XNSE_Solver\ConvergencePlots\StaticDroplet_ConvStudy4Kummer.tex");
fConvDat[FldId].PlotNow();
**************
Using gnuplot: C:\Users\smuda\AppData\Local\FDY\BoSSS\bin\native\win\gnuplot-gp510-20160418-win32-mingw\gnuplot\bin\gnuplot.exe
set key font ",16"Left reverse 
System.Drawing.Bitmap
==============
List<double[]> slopes = new List<double[]>();
foreach (var p2d in ConvPlts[FldId]) {
    double[] abs = p2d.dataGroups[0].Abscissas;
    double[] val = p2d.dataGroups[0].Values;
    int numdp = p2d.dataGroups[0].Abscissas.Length;
    double[] slp = new double[numdp-1];
    for (int i = 0; i < numdp-1; i++) {
        double dV = val[i].Log() - val[i+1].Log();
        double dA = abs[i].Log() - abs[i+1].Log();
        slp[i] = dV / dA;
    }
    slopes.Add(slp);
}
**************
==============
slopes[2]
**************
List of 3 instances of Double {
  0: 2.74536914328514
  1: 2.8669732382533
  2: 3.42776875506416
}
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
**************
==============
