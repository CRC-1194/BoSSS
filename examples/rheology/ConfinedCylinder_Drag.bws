restart
**************

  BoSSSpad C# interpreter
  _______________________


 Console ready for input. Type 'help' for help.

==============
using BoSSS.Application.Rheology;
using BoSSS.Solution.AdvancedSolvers;
**************
==============
WorkflowMgm.Init("ConfinedCylinder_BodyforcesFix");
**************
Project name is set to 'ConfinedCylinder_BodyforcesFix'.

==============
// steady drag calculation
//var myDb = OpenOrCreateDatabase(@"\\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_Drag");
// unsteady calculation
//var myDb = OpenOrCreateDatabase(@"\\dc1\userspace\kikker\cluster\cluster_db\ConfinedCylinder_unsteady");
var myDb = OpenOrCreateDefaultDatabase();
**************
Opening existing database 'C:\Users\florian\default_bosss_db'.

==============
//var myBatch = new MsHPC2012Client(@"\\hpccluster\hpccluster-scratch\kikker\deploy_dir\","hpccluster",ComputeNodes : new[] {"hpccluster"});
//var myBatch = new MiniBatchProcessorClient(@"\\dc1\userspace\kikker\cluster\ConfinedCylinder");
var myBatch = new MiniBatchProcessorClient();
**************
==============
MiniBatchProcessor.Server.StartIfNotRunning();
**************
Starting mini batch processor in external process...
<<<<<<< HEAD
Started mini batch processor on local machine, process id is 6412.
=======
Started mini batch processor on local machine, process id is 79668.
>>>>>>> experimental/master

==============
// ======================
// Convergence Parameters
// ======================
**************
==============
int degree = 2;
int gridNo = 1;
int[] procs = new int[] {4};
**************
==============
// ======================
// Physical Parameters
// ======================
**************
==============
double u0                   = 1.5; // 0.375;// 0.66;// 3 / 2;
double h                    = 4;
double beta                 = 0.59;
double Reynolds             = 0.0001;
double Weissenberg          = 0; //aim Weissenberg number!
bool RaiseWeissenberg       = false;
double WeissenbergIncrement = 0.1;
**************
==============
// ======================
// Timestepping: steady/unsteady
// ======================
**************
==============
int NoOfTimesteps  = 1;//5000;
double dt          = 1e6;//0.01;
string SessionName = "ConfinedCylinder_drag_p"+degree+"_meshNo"+gridNo+"_Wi="+Weissenberg+"_Re0.0001_BodyforcesHalfCylinder";
**************
==============
// ===============================
// Init grids and save to database
// ===============================
**************
==============
//GridCommons grid; //     = new GridCommons[numberGrids];
Gmsh gmshGrid         = new Gmsh(System.IO.Path.Combine(
    CurrentDocDir,
    @"Cylinder_GRIDS\mesh_karman_OriginalBox_MEDIUM_"+gridNo+".msh"));
GridCommons bosssGrid = gmshGrid.GenerateBoSSSGrid();
**************


==============
bosssGrid.Name = "confined_cylinder";

Func<Vector, string> edgeTagFunc = delegate (Vector X) {
    double x = X[0];
    double y = X[1];
    
    if (Math.Abs(x - (-15)) < 1.0e-10)
        return "Velocity_inlet";
    if (Math.Abs(x - (15)) < 1.0e-10)
        return "Pressure_Outlet";
    if (Math.Abs(y - (-2)) < 1.0e-10)
        return "Wall_bottom";        
    if (Math.Abs(y - (+2)) < 1.0e-10)
        return "Wall_top";
    if (-1.0 < y && y < 1.0 && -1.0 < x  && x < 1.0)
        return "Wall_cylinder";
                    
    throw new ArgumentOutOfRangeException("at x = " + x + "and y = " + y);
};
bosssGrid.DefineEdgeTags(edgeTagFunc);            
myDb.SaveGrid(ref bosssGrid);
**************

==============
// =====================================
// setup control object for a solver run
// =====================================
**************
==============
// Set Initial Conditions  
static class InitialValues {
    
    static double u0             = 1.5; // 0.375;// 0.66;// 3 / 2;
    static double h                    = 4;
    static double beta                 = 0.59;
    static double Reynolds             = 0.0001;
    static double Weissenberg          = 0; //aim Weissenberg number!
    
    public static double VelocityXfunction(double[] X) {
        return u0 * (1  - (X[1] *  X[1])/h);
    }

    public static double VelocityYfunction(double[] X) {
        return 0.0;
    }

    public static double Pressurefunction(double[] X) {
        return u0 * 0.5 * Reynolds * (35 - X[0]);
    }
    
    public static double StressXXfunction(double[] X) {
        return 2 * Weissenberg * (1 - beta) * u0 * (-2 / h) * X[1] * u0 * (-2 / h) * X[1];
    }
    
    public static double StressXYfunction(double[] X) {
        return (1 - beta) * u0 * (-2 / h) * X[1];
    }
    
    public static double StressYYfunction(double[] X) {
        return 0.0;
    }
    public static double Phi(double[] X) {
        return -1.0;
    }
}          
**************
C# evaluator not initialized: use 'restart'.

==============
//Set boundary conditions
var Wall = new Formula("X => 0");
**************
C# evaluator not initialized: use 'restart'.

==============
//List<RheologyControl> Controls = new List<RheologyControl>();
**************
C# evaluator not initialized: use 'restart'.

==============
//Controls.Clear();

    //Database
    RheologyControl C = new RheologyControl();
    C.savetodb        = true;
    C.DbPath          = myDb.Path;
    C.ProjectName     = "Cylinder";
    C.SetGrid(bosssGrid);

    //SolverChooser
    C.NonLinearSolver.SolverCode           = NonLinearSolverCode.Newton;
    C.NonLinearSolver.MaxSolverIterations  = 100;
    C.NonLinearSolver.MinSolverIterations  = 3;
    C.NonLinearSolver.ConvergenceCriterion = 1E-6;
    C.LinearSolver.MaxSolverIterations     = 100;
    C.LinearSolver.MinSolverIterations     = 3;          
    C.LinearSolver.ConvergenceCriterion    = 1E-6;
    C.LinearSolver.SolverCode              = LinearSolverCode.classic_pardiso; //.exp_gmres_levelpmg;
    C.useJacobianForOperatorMatrix         = true;

    //Timestepping
    C.NoOfTimesteps      = NoOfTimesteps;
    C.dt                 = dt;
    C.dtMax              = C.dt;
    C.dtMin              = C.dt;
    C.Timestepper_Scheme = RheologyControl.TimesteppingScheme.ImplicitEuler;
    C.ObjectiveParam     = 1.0;

    //Configuration Shock capturing and body forces
    C.UsePerssonSensor       = false;
    C.SensorLimit            = 1e-4;
    C.AdaptiveMeshRefinement = false;
    C.RefinementLevel        = 10;
    C.UseArtificialDiffusion = false;
    C.Bodyforces             = true;
    
    //Configuration IC and BC and Solver analytics
    C.OperatorMatrixAnalysis       = false;
    C.SkipSolveAndEvaluateResidual = false;
    C.SetInitialConditions         = true;
    C.SetInitialPressure           = false;
    C.SetParamsAnalyticalSol       = false;
    C.ComputeL2Error               = false;
    C.Stokes                       = false;
    C.FixedStreamwisePeriodicBC    = false;

    //Physical parameters
    C.beta                 = beta;
    C.Reynolds             = Reynolds;
    C.Weissenberg          = Weissenberg; //aim Weissenberg number!
    C.RaiseWeissenberg     = RaiseWeissenberg;
    C.WeissenbergIncrement = WeissenbergIncrement;

    //Penalties
    C.ViscousPenaltyScaling = 1;
    C.Penalty2              = 1;
    C.Penalty1[0]           = 0;
    C.Penalty1[1]           = 0;
    C.PresPenalty2 = 1.0;
    C.PresPenalty1[0]       = 0.0;
    C.PresPenalty1[1]       = 0.0;
    C.alpha         = 1;
    C.StressPenalty = 1.0;

    //Create Fields
    C.SetDGDegree(degree);
    
    //Set initial values
    C.InitialValues.Add("VelocityX", GetFormulaObject(InitialValues.VelocityXfunction));
    C.InitialValues.Add("VelocityY", GetFormulaObject(InitialValues.VelocityYfunction));
    C.InitialValues.Add("StressXX", GetFormulaObject(InitialValues.StressXXfunction));
    C.InitialValues.Add("StressXY", GetFormulaObject(InitialValues.StressXYfunction));
    C.InitialValues.Add("StressYY", GetFormulaObject(InitialValues.StressYYfunction));
    C.InitialValues.Add("Phi", GetFormulaObject(InitialValues.Phi));

    //Set Boundary Conditions
    //C.AddBoundaryValue("Wall_bottom", "VelocityX", Wall);
    //C.AddBoundaryValue("Wall_bottom", "VelocityY", Wall);
    C.AddBoundaryValue("Wall_top", "VelocityX", Wall);
    C.AddBoundaryValue("Wall_top", "VelocityY", Wall);
    C.AddBoundaryValue("Wall_cylinder", "VelocityX", Wall);
    C.AddBoundaryValue("Wall_cylinder", "VelocityY", Wall);

    C.AddBoundaryValue("Velocity_inlet", "VelocityX", GetFormulaObject(InitialValues.VelocityXfunction));
    C.AddBoundaryValue("Velocity_inlet", "VelocityY", GetFormulaObject(InitialValues.VelocityYfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressXX", GetFormulaObject(InitialValues.StressXXfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressXY", GetFormulaObject(InitialValues.StressXYfunction));
    C.AddBoundaryValue("Velocity_inlet", "StressYY", GetFormulaObject(InitialValues.StressYYfunction)); 
    C.AddBoundaryValue("Pressure_Outlet");
    C.AddBoundaryValue("FreeSlip");
            
    //Save Session and next...
    C.SessionName = SessionName;   
    //Controls.Add(C);
    Console.WriteLine("Created control: " + C.SessionName);
**************
C# evaluator not initialized: use 'restart'.

==============
**************
==============
// ===========
// Launch Jobs
// ===========
**************
C# evaluator not initialized: use 'restart'.

==============
//Controls.Count;
**************
C# evaluator not initialized: use 'restart'.

==============
foreach (int element in procs){
var oneJob              = C.CreateJob();
oneJob.NumberOfMPIProcs = element;
oneJob.ExecutionTime    = "24:00:00";
oneJob.Activate(myBatch);
}
**************
C# evaluator not initialized: use 'restart'.

==============
WorkflowMgm.AllJobs.Pick(0).Value.
**************
C# evaluator not initialized: use 'restart'.

==============
**************

